apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "26152293"
    labels:
        datastore_id: "4974047628623872"
data:
    classification: Serious Bug
    created: "2016-05-07T00:14:56.75167Z"
    description: "Summary:\n\n**I originally submitted this as rdar://26028557, but it was closed as a duplicate of rdar://9017454, which I do not have access to. The problem still exists on the latest version of Xcode. I donâ€™t think the Radar is fixed. it would be great to either address the issue, or publish rdar://9017454 to https://openradar.appspot.com, so that users can track progress on whether the issue is resolved.**\n\nAdd the following file (also available at https://gist.github.com/modocache/fb651b97e34b5badb56f585570d4d56b) to an XCTest test suite. Follow the instructions in the comments, which demonstrate the following bugs:\n\n 1. `XCTestCase` subclasses that do not define any test methods are not displayed in test output, but *are* displayed in the Test Navigator. As a result, the Test Navigator provides misleading information when users define `XCTestCase` subclasses that are meant to provide shared test logic.\n 2. The Xcode Test Navigator displays test invocations that were run before, even if those invocations would no longer be returned by `+[XCTestCase testInvocations]`.\n 3. Xcode Test Navigator only displays test invocations returned by `+[XCTestCase testInvocations]` only once they've all been run.\n 4. Xcode Test Navigator does not display all test invocations returned by `+[XCTestCase testInvocations]`.\n 5. Xcode crashes the XCTest test suite when attempting to re-run a test invocation that no longer exists.\n\n```\n#import <XCTest/XCTest.h>\n#import <objc/runtime.h>\n\n/**\n Running a test suite composed of only this file results in the following output,\n which is exactly what I expect as a user:\n\n    ```\n    Test Suite 'All tests' started at 2016-04-30 15:32:11.912\n    Test Suite 'InvocationStationTests.xctest' started at 2016-04-30 15:32:11.913\n    Test Suite 'StringLengthOfFourTestCase' started at 2016-04-30 15:32:11.913\n    Test Case '-[StringLengthOfFourTestCase parameterizedTest_blop]' started.\n    Test Case '-[StringLengthOfFourTestCase parameterizedTest_blop]' passed (0.000 seconds).\n    Test Case '-[StringLengthOfFourTestCase parameterizedTest_blip]' started.\n    Test Case '-[StringLengthOfFourTestCase parameterizedTest_blip]' passed (0.000 seconds).\n    Test Case '-[StringLengthOfFourTestCase parameterizedTest_blam]' started.\n    Test Case '-[StringLengthOfFourTestCase parameterizedTest_blam]' passed (0.000 seconds).\n    Test Suite 'StringLengthOfFourTestCase' passed at 2016-04-30 15:32:11.915.\n    Executed 3 tests, with 0 failures (0 unexpected) in 0.001 (0.002) seconds\n    Test Suite 'StringLengthOfThreeTestCase' started at 2016-04-30 15:32:11.916\n    Test Case '-[StringLengthOfThreeTestCase parameterizedTest_foo]' started.\n    Test Case '-[StringLengthOfThreeTestCase parameterizedTest_foo]' passed (0.000 seconds).\n    Test Case '-[StringLengthOfThreeTestCase parameterizedTest_bar]' started.\n    Test Case '-[StringLengthOfThreeTestCase parameterizedTest_bar]' passed (0.000 seconds).\n    Test Case '-[StringLengthOfThreeTestCase parameterizedTest_baz]' started.\n    Test Case '-[StringLengthOfThreeTestCase parameterizedTest_baz]' passed (0.000 seconds).\n    Test Case '-[StringLengthOfThreeTestCase parameterizedTest_flo]' started.\n    Test Case '-[StringLengthOfThreeTestCase parameterizedTest_flo]' passed (0.000 seconds).\n    Test Suite 'StringLengthOfThreeTestCase' passed at 2016-04-30 15:32:11.917.\n    Executed 4 tests, with 0 failures (0 unexpected) in 0.001 (0.002) seconds\n    Test Suite 'InvocationStationTests.xctest' passed at 2016-04-30 15:32:11.918.\n    Executed 7 tests, with 0 failures (0 unexpected) in 0.002 (0.005) seconds\n    Test Suite 'All tests' passed at 2016-04-30 15:32:11.918.\n    Executed 7 tests, with 0 failures (0 unexpected) in 0.002 (0.006) seconds\n\n\n    Test session log:\n    /Users/bgesiak/Library/Developer/Xcode/DerivedData/InvocationStation-dhushsztyfdzejhkwcfzltheeaug/Logs/Test/FBD56B53-AB7C-4B6B-9826-A488847CDE2A/Session-2016-04-30_15:32:09-1ezFHI.log\n\n    Program ended with exit code: 0\n    ```\n\n However, this file demonstrates five problems with Xcode's Test Navigator when\n used in conjunction with `+[XCTestCase testInvocations]`:\n \n 1. `XCTestCase` subclasses that do not define any test methods are not\n    displayed in test output, but *are* displayed in the Test Navigator.\n    As a result, the Test Navigator provides misleading information when users\n    define `XCTestCase` subclasses that are meant to provide shared test logic.\n 2. The Xcode Test Navigator displays test invocations that were run before,\n    even if those invocations would no longer be returned by\n    `+[XCTestCase testInvocations]`.\n 3. Xcode Test Navigator only displays test invocations returned by\n   `+[XCTestCase testInvocations]` only once they've all been run.\n 4. Xcode Test Navigator does not display all test invocations returned by\n   `+[XCTestCase testInvocations]`.\n 5. Xcode crashes the XCTest test suite when attempting to re-run a test\n    invocation that no longer exists.\n \n Each of these problems is explained in detail below.\n */\n\n#pragma mark - Parameterized test implementation using `+[XCTestCase testInvocations]`\n\n/**\n A parameterized test case allows you to make the same expectation against\n multiple input parameters. The expectation is specified by subclassing\n `ParameterizedTestCase` and overriding `+[ParameterizedTestCase parameterizedTest]`.\n The parameters can be specified by overriding `+[ParameterizedTestCase parameters]`.\n */\n\n/**\n Expectations are blocks that are given a parameter. They may make\n expectations based on that parameter by using an `XCTAssert` assertion.\n Because `XCTAssert` macros require `self` to be defined as an instance of\n an `XCTestCase`, one is passed to the block.\n */\ntypedef void (^ParameterTestBlock)(XCTestCase *self, id parameter);\n\n/**\n Parameterized tests execute the same expectation on many different\n parameters. If the expectation fails for one of those many parameters,\n we want to know which one. So the user provides a name for each parameter\n test.\n */\ntypedef NSDictionary<NSString *, id> TestNameAndParameter;\nstatic NSString * const TestNameKey = @\"TestName\";\nstatic NSString * const TestParameterKey = @\"TestParameter\";\n\n/**\n Subclass in order to provide a parameterized test and a set of parameters.\n\n Problem #1: This is meant to be an abstract base class used to define tests,\n             not an actual test case. However, there is no way to keep it\n             from being displayed in the Xcode Test Navigator.\n             Screenshot: ParameterizedTestCase_appears_in_Test_Navigator.png\n\n             One solution would be providing an API for an `XCTestCase`\n             to not be displayed in the Xcode Test Navigator.\n */\n@interface ParameterizedTestCase : XCTestCase\n\n/** Return an expectation block to be made against each parameter. */\n+ (ParameterTestBlock)parameterizedTest;\n\n/**\n Return a list of test names and parameters. Each of these will be tested\n against the expectation block from `+[ParameterizedTestCase parameterizedTest]`.\n */\n+ (NSArray<TestNameAndParameter *> *)parameters;\n\n@end\n\n@implementation ParameterizedTestCase\n\n// Subclasses must override this method to return an expectation to be made\n// against each parameter from `+[ParameterizedTestCase parameters]`.\n+ (ParameterTestBlock)parameterizedTest { return ^(XCTestCase *self, id parameter){}; }\n\n// Subclasses must override this method to return a set of parameters to be\n// passed to the expectation from `+[ParameterizedTestCase parameterizedTest]`.\n+ (NSArray<TestNameAndParameter *> *)parameters { return @[]; }\n\n// A helper method that generates a selector for the given parameterized test name.\n+ (SEL)_selectorForTestWithName:(NSString *)name {\n    NSString *testName = [NSString stringWithFormat:@\"parameterizedTest_%@\", name];\n    return NSSelectorFromString(testName);\n}\n\n+ (void)initialize {\n    // We add an instance method for each parameterized test.\n    for (TestNameAndParameter *testNameAndParameter in [self parameters]) {\n        SEL name = [self _selectorForTestWithName:testNameAndParameter[TestNameKey]];\n        IMP imp = imp_implementationWithBlock(^(ParameterizedTestCase *self){\n            [[self class] parameterizedTest](self, testNameAndParameter[TestParameterKey]);\n        });\n        const char *types = [[NSString stringWithFormat:@\"%s%s%s\",\n                              @encode(id), @encode(id), @encode(SEL)] UTF8String];\n        class_addMethod(self, name, imp, types);\n    }\n}\n\n// Apple XCTest allows us to define tests dynamically, using\n// `+[XCTestCase testInvocations]`. We return one `NSInvocation` for each\n// `+[ParameterizedTestCase parameters]` parameter we pass to the\n// `+[ParameterizedTestCase parameterizedTest]` expectation.\n//\n// Problem #2: `+[XCTestCase testInvocations]` is the only API available\n//             for dynamically defining test methods in Apple XCTest.\n//             However, it is *not called* when running a single test via\n//             the Xcode Test Navigator (done by clicking on the gray arrow\n//             next to a test name). This is not ideal--after all, what if\n//             `+testInvocations` returns a list of invocations that no\n//             longer includes the single test that Xcode is attempting to\n//             run? Currently, Xcode does not respect that fact, and happily\n//             runs the test anyway--a test that no longer exists, according\n//             to `+testInvocations`.\n//\n//             One solution would be to provide an API for an `XCTestCase` to\n//             list which tests should be displayed in the Xcode Test Navigator.\n//             Xcode could use this API to determine what to display.\n+ (NSArray<NSInvocation *> *)testInvocations {\n    NSMutableArray<NSInvocation *> *invocations = [NSMutableArray array];\n    for (TestNameAndParameter *testNameAndParameter in [self parameters]) {\n        // We create an invocation based on the added instance method and add\n        // it to our list of test invocations.\n        SEL testSelector = [self _selectorForTestWithName:testNameAndParameter[TestNameKey]];\n        NSMethodSignature *signature = [self instanceMethodSignatureForSelector:testSelector];\n        NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature];\n        invocation.selector = [self _selectorForTestWithName:testNameAndParameter[TestNameKey]];\n        [invocations addObject:invocation];\n    }\n    return [invocations copy];\n}\n\n@end\n\n#pragma mark - Examples of using parameterized tests that demonstrate Xcode Test Navigator bugs\n\n@interface StringLengthOfThreeTestCase : ParameterizedTestCase\n@end\n\n@implementation StringLengthOfThreeTestCase\n\n// Problem #3: The Xcode Test Navigator does display these tests--but only\n//             after they've been run once. That also means there's no way to\n//             run just one of these tests until after running all of them.\n//             For large test suites, this can become prohibitively expensive.\n//\n//             One solution would be to provide an API for an `XCTestCase` to\n//             list which tests should be displayed, and thus are capable of\n//             being run, in the Xcode Test Navigator. This would allow an\n//             `XCTestCase` to list its test methods without those tests being\n//             run first.\n//\n//             (Xcode is capable of listing test methods that are *not*\n//             dynamically generated via `+[XCTestCase testInvocations]`,\n//             presumably by parsing the source code. Dynamically generated\n//             tests, however, are not always clearly present in source code.)\n//\n// Problem #4: The Xcode Test Navigator doesn't accurately display all of these\n//             tests. Run the test suite, and you'll see the following:\n//             Only_three_tests_from_StringLengthOfThreeTestCase_appear_in_Test_Navigator.png.\n//             Look at the logged XCTest output, and you'll see that four tests\n//             are being executed, but only three appear in the Test Navigator.\n//             It actually does appear for a split second, but disappears for\n//             some reason.\n+ (NSArray<TestNameAndParameter *> *)parameters {\n    return @[\n        @{TestNameKey: @\"foo\", TestParameterKey: @\"foo\"},\n        @{TestNameKey: @\"bar\", TestParameterKey: @\"bar\"},\n        @{TestNameKey: @\"baz\", TestParameterKey: @\"baz\"},\n        @{TestNameKey: @\"flo\", TestParameterKey: @\"flo\"},\n    ];\n}\n\n+ (ParameterTestBlock)parameterizedTest {\n    return ^(XCTestCase *self, NSString *parameter){\n        XCTAssertEqual([parameter length], 3);\n    };\n}\n\n@end\n\n@interface StringLengthOfFourTestCase : ParameterizedTestCase\n@end\n\n@implementation StringLengthOfFourTestCase\n\n+ (NSArray<TestNameAndParameter *> *)parameters {\n    return @[\n        // Problem #5: The following steps cause Xcode to crash the test suite:\n        //             1. Run the entire test suite in Xcode (âŒ˜U).\n        //             2. Comment out the \"blop\" test below. This means it will\n        //                no longer be defined dynamically as a test in this\n        //                test suite. **It is still displayed in the Xcode\n        //                Test Navigator, even after being commented out.**\n        //             3. Using the Test Navigator, click on the green check\n        //                mark next to the `StringLengthOfFourTestCase > parameterizedTest_blop`\n        //                test. This will re-run this test. However, this test\n        //                is no longer defined in this test suite. Xcode calls\n        //                `-[XCTestCase initWithSelector:]`, which calls\n        //                `+[NSInvocation _invocationWithMethodSignature:frame:]`\n        //                passing a nil `NSMethodSignature`. The test suite\n        //                crashes with: \"*** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '+[NSInvocation _invocationWithMethodSignature:frame:]: method signature argument cannot be nil'\".\n        //\n        //             Again, a solution would be to provide an API for an\n        //             XCTestCase to list the test methods that should be\n        //             displayed in the Xcode Test Navigator, to prevent\n        //             undefined tests from being run.\n        @{TestNameKey: @\"blop\", TestParameterKey: @\"blop\"}, // Comment this line out in step 2 of \"Problem #5\" above.\n        @{TestNameKey: @\"blip\", TestParameterKey: @\"blip\"},\n        @{TestNameKey: @\"blam\", TestParameterKey: @\"blam\"},\n    ];\n}\n\n+ (ParameterTestBlock)parameterizedTest {\n    return ^(XCTestCase *self, NSString *parameter){\n        XCTAssertEqual([parameter length], 4);\n    };\n}\n\n@end\n```\n\nSteps to Reproduce:\n1. Read the comments in the source file above and follow the instructions.\n2. Confirm the five problems listed in this radar (and in the comments of the source file).\n\nExpected Results:\n 1. `XCTestCase` subclasses that do not define any test methods are not displayed in test output, and are also not displayed in the Test Navigator.\n 2. The Xcode Test Navigator does not display test invocations that are no longer defined by the test suite.\n 3. The Xcode Test Navigator is capable of displaying test invocations returned by `+[XCTestCase testInvocations]`, without the need to run the entire test suite first.\n 4. The Xcode Test Navigator displays all test invocations returned by `+[XCTestCase testInvocations]`.\n 5. Xcode does not crash the XCTest test suite when attempting to re-run a test invocation that no longer exists.\n\nActual Results:\n 1. `XCTestCase` subclasses that do not define any test methods are not displayed in test output, but *are* displayed in the Test Navigator. As a result, the Test Navigator provides misleading information when users define `XCTestCase` subclasses that are meant to provide shared test logic.\n 2. The Xcode Test Navigator displays test invocations that were run before, even if those invocations would no longer be returned by `+[XCTestCase testInvocations]`.\n 3. Xcode Test Navigator only displays test invocations returned by `+[XCTestCase testInvocations]` only once they've all been run.\n 4. Xcode Test Navigator does not display all test invocations returned by `+[XCTestCase testInvocations]`.\n 5. Xcode crashes the XCTest test suite when attempting to re-run a test invocation that no longer exists.\n\nRegression:\nThis occurs in every version of Xcode that has shipped with a Test Navigator (which, to my knowledge, is every version after Xcode 5.)\n\nNotes:\nProvide additional information, such as references to related problems, workarounds and relevant attachments."
    email: B.Gesiak@gmail.com
    modified: "2016-05-07T00:14:56.75197Z"
    number: "26152293"
    number_intvalue: 26152293
    originated: 06-May-2016 05:14 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 7.3.1
    reproducible: Always
    resolved: ""
    status: Open
    title: Xcode Test Navigator does not support +[XCTestCase testInvocations] well
