apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "26130371"
    labels:
        datastore_id: "5026693190254592"
data:
    classification: Enhancement
    created: "2016-05-06T00:26:27.81591Z"
    description: "Summary:\r\nMeet Alice. Alice is a software tester at a small company and loves cat pictures. Yesterday she downloaded the CatsWritingBugReports app from the iTunes App Store and her life has not been the same since. A photo of a cat writing steps to reproduce catching a laser pointer had her rolling on the floor with laughter and delight \U0001F63B. She quickly messaged Bob that he MUST HAVE this app before moving on to the next cat entering a bug report.\r\n\r\nMeet Bob. Bob also loves cats. And bug reports. After all, bug reports can be fun, right? Bob downloaded CatsWritingBugReports and started using it while in the restroom. The second cat writing a bug report had him laughing so hard he dropped his phone.\r\nYes, he dropped his phone. Splash. Right into the... \U0001F4A9   <--(that is totally chocolate soft serve ice cream... smiling)\r\n\r\nBob, angry and frustrated with his dripping phone returned to his workstation and immediately opened iTunes. \"THIS APP KILLED MY PHONE!!!\". One star review.\r\nBob did not have AppleCare. Bob was in for a bad day.\r\n\r\nLook at Alice. She LOVES this app. But... she did not review it. She did not rate it. She is so engrossed in the app that it never occurs to her.\r\nBob on the other hand had a bad experience - which had little to do with the app. Bob gave a negative review.\r\n\r\nUsers tend to leave reviews when they have a bad experience but not when they have a good one. For app developers this is a big deal - we want those happy, delighted users to leave feedback and ratings, but right now the mechanisms to do that can be... cumbersome. It would be fantastic if there was a means for an app developer to have users give ratings or reviews *while* they are using the app. \r\n\r\nThere is a solution. Inside StoreKit there are two classes: SKComposeReviewViewController and SKStarRatingControl. Both of these are private APIs that provide rating or review functionality. Public versions of these APIs could allow users to provide App Store feedback from within apps.\r\n\r\nSteps to Reproduce:\r\n1. Create an awesome app (Such as Cats Writing Bug Reports)\r\n2. Release to app store\r\n\r\nExpected Results:\r\nAwesome, positive feedback from users who are delighted by the app. \U0001F604\r\n\r\nActual Results:\r\nNegative feedback from that one guy who dropped his phone while using the app. \U0001F615\r\nLittle positive feedback from users. Users who have positive experiences rarely run to the App Store to leave a rating.\r\n\r\nVersion:\r\niOS 9.x\r\n\r\nNotes:\r\nObviously, an API for in-app App Store rating could easily be abused. \r\n\r\nPossible solutions:\r\n- Only allow rating of the currently executing app (StoreKit gets the receipt for the app, uses that to determine what app can be rated, etc.) \r\n- Rate limit ratings.\r\n- Require Apple ID authentication, or even go so far as to require Touch ID authentication specifically.\r\n- ...etc.\r\n\r\nConfiguration:\r\niPhone 6s, 9.3.1\r\n\r\nAttachments:"
    email: quellish@gmail.com
    modified: "2016-05-06T00:26:27.81617Z"
    number: "26130371"
    number_intvalue: 26130371
    originated: 05-May-2016 05:21 PM
    parent_number: '&{NULL_VALUE}'
    product: iOS SDK
    product_version: "9.0"
    reproducible: NA
    resolved: ""
    status: Open
    title: 'StoreKit: What is Love? Baby, don''t hurt me. Don''t hurt me no more.'
