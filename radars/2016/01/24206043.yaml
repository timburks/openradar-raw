apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "24206043"
    labels:
        datastore_id: "5027827397165056"
data:
    classification: Performance issue
    created: "2016-01-15T16:24:18.79208Z"
    description: "I am using UIStackView to layout UILabels in my UICollectionViewCell subclass. I'm using the iOS SDK 9.2\r\n\r\nThe scrolling of the collection view is smooth if I don't update the labels' `text` when I dequeue them. However, if I update their `text` as I dequeue them, the scrolling is very slow. \r\n\r\nI made a very small demo to show the problem, to be ran on a device (not the simulator). You can create a new empty project and replace the contents of `ViewController.swift` with this:\r\n\r\n    import UIKit\r\n\r\n    class ViewController: UIViewController {\r\n\r\n        override func loadView() {\r\n            view = UIView()\r\n\r\n            let layout = UICollectionViewFlowLayout()\r\n            layout.itemSize = CGSize(width: 100, height: 200)\r\n            let collectionView = UICollectionView(frame: CGRectZero, collectionViewLayout: layout)\r\n            collectionView.registerClass(Cell.self, forCellWithReuseIdentifier: \"Cell\")\r\n            collectionView.translatesAutoresizingMaskIntoConstraints = false\r\n            collectionView.dataSource = self\r\n            view.addSubview(collectionView)\r\n\r\n            let constraints = [\"H:|-[collectionView]-|\",\r\n                \"V:|[collectionView]|\"\r\n            ].flatMap { NSLayoutConstraint.constraintsWithVisualFormat($0, options: [], metrics: nil, views: [\"collectionView\": collectionView])\r\n            }\r\n            NSLayoutConstraint.activateConstraints(constraints)\r\n\r\n        }\r\n    }\r\n\r\n    extension ViewController: UICollectionViewDataSource {\r\n        func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {\r\n            let cell = collectionView.dequeueReusableCellWithReuseIdentifier(\"Cell\", forIndexPath: indexPath) as! Cell\r\n\r\n            //comment out the line below to make the scrolling smoother: \r\n            cell.fillLabels()\r\n\r\n            return cell\r\n        }\r\n        func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\r\n            return 100\r\n        }\r\n    }\r\n\r\n    class Cell: UICollectionViewCell {\r\n\r\n        var labelArray = [UILabel]()\r\n\r\n        func fillLabels() {\r\n            for label in labelArray {\r\n                label.text = \"\\(label.text!) yo\"\r\n            }\r\n        }\r\n\r\n        override init(frame: CGRect) {\r\n            super.init(frame: frame)\r\n\r\n            contentView.backgroundColor = UIColor.whiteColor()\r\n\r\n            let stackView = UIStackView()\r\n            stackView.axis = .Horizontal\r\n            stackView.alignment = .Leading\r\n            stackView.distribution = .EqualSpacing\r\n            stackView.translatesAutoresizingMaskIntoConstraints = false\r\n            contentView.addSubview(stackView)\r\n\r\n            let leftStack = UIStackView()\r\n            leftStack.axis = .Vertical\r\n\r\n            let rightStack = UIStackView()\r\n            rightStack.axis = .Vertical\r\n\r\n            stackView.addArrangedSubview(leftStack)\r\n            stackView.addArrangedSubview(rightStack)\r\n\r\n            for index in 0...10 {\r\n                let leftLabel = UILabel()\r\n                leftLabel.text = \"\\(index)\"\r\n                leftStack.addArrangedSubview(leftLabel)\r\n\r\n                labelArray.append(leftLabel)\r\n\r\n                let rightLabel = UILabel()\r\n                rightLabel.text = \"\\(index)\"\r\n                rightStack.addArrangedSubview(rightLabel)\r\n\r\n                labelArray.append(rightLabel)\r\n            }\r\n\r\n\r\n            let constraints = [\r\n                \"H:|[stackView]|\",\r\n                \"V:|[stackView]|\"\r\n                ].flatMap {\r\n                    NSLayoutConstraint.constraintsWithVisualFormat($0, options: [], metrics: nil, views: [\"stackView\": stackView])\r\n            }\r\n            \r\n            NSLayoutConstraint.activateConstraints(constraints)\r\n\r\n        }\r\n\r\n        required init?(coder aDecoder: NSCoder) {\r\n            fatalError(\"init(coder:) has not been implemented\")\r\n        }\r\n    }\r\n\r\nYou'll notice the scrolling is smooth when you comment out the call to `fillLabels`. \r\n\r\nIf you try to reproduce the same layout without `UIStackViews` and include the call `fillLabels`, you'll notice the scrolling is smooth too.\r\n\r\nThis suggests `UIStackView` suffers performance bottlenecks if it has recalculate its layout."
    email: ariel.elkin@project-a.com
    modified: "2016-01-15T16:24:18.79231Z"
    number: "24206043"
    number_intvalue: 24206043
    originated: 2016/01/15
    parent_number: '&{NULL_VALUE}'
    product: iOS SDK
    product_version: "9.2"
    reproducible: Yes
    resolved: No
    status: Open
    title: Bad performance of UIStackView within UICollectionViewCells
