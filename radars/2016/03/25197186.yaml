apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "25197186"
    labels:
        datastore_id: "4942815968624640"
data:
    classification: Crash/hang/data loss
    created: "2016-03-16T18:47:04.20443Z"
    description: "Deadlock in the mutex of a bound CFStream pair, while the pair is being used for the HTTPBodyStream of an NSURLTask that's uploading data to an HTTP server. The NSURLConnectionLoader thread has two re-entrant calls into RequestBodyStreamProvider::readBodyStream, apparently reading the same stream, so I believe the inner call is deadlocking on the mutex acquired by the outer call.\r\n\r\nThis does not occur in 10.11.3 but does in 10.11.4 betas.\r\n\r\nMy thread hangs like this:\r\n\r\n    frame #0: 0x00007fff88e8cde6 libsystem_kernel.dylib`__psynch_mutexwait + 10\r\n    frame #1: 0x00007fff965b7e4a libsystem_pthread.dylib`_pthread_mutex_lock_wait + 89\r\n    frame #2: 0x00007fff9528e274 CoreFoundation`boundPairWrite + 52\r\n    frame #3: 0x00007fff951aafa5 CoreFoundation`CFWriteStreamWrite + 437\r\n  * frame #4: 0x0000000107116b5d CouchbaseLite`-[CBLMultiStreamWriter writeToOutput](self=0x000060c00004f780, _cmd=\"writeToOutput\") + 429 at CBLMultiStreamWriter.m:254\r\n    frame #5: 0x0000000107117712 CouchbaseLite`-[CBLMultiStreamWriter stream:handleEvent:](self=0x000060c00004f780, _cmd=\"stream:handleEvent:\", stream=0x000060d000056170, event=NSStreamEventHasSpaceAvailable) + 1506 at CBLMultiStreamWriter.m:288\r\n    frame #6: 0x00007fff95200094 CoreFoundation`_signalEventSync + 180\r\n    frame #7: 0x00007fff9521d29e CoreFoundation`_cfstream_shared_signalEventSync + 478\r\n    frame #8: 0x00007fff951de881 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 17\r\n...\r\n\r\nThe CFNetwork thread deadlocks like this:\r\n\r\n* thread #7: tid = 0x5393e, 0x00007fff88e8cde6 libsystem_kernel.dylib`__psynch_mutexwait + 10, name = 'com.apple.NSURLConnectionLoader'\r\n  * frame #0: 0x00007fff88e8cde6 libsystem_kernel.dylib`__psynch_mutexwait + 10\r\n    frame #1: 0x00007fff965b7e4a libsystem_pthread.dylib`_pthread_mutex_lock_wait + 89\r\n    frame #2: 0x00007fff9528dc57 CoreFoundation`boundPairRead + 151\r\n    frame #3: 0x00007fff951b49c5 CoreFoundation`CFReadStreamRead + 389\r\n    frame #4: 0x00007fff96c22b1e CFNetwork`RequestBodyStreamProvider::readBodyStream(bool) + 308\r\n    frame #5: 0x00007fff95200094 CoreFoundation`_signalEventSync + 180\r\n    frame #6: 0x00007fff9521c67b CoreFoundation`_cfstream_solo_signalEventSync + 251\r\n    frame #7: 0x00007fff951fd8fc CoreFoundation`_CFStreamSignalEvent + 476\r\n    frame #8: 0x00007fff9528dec8 CoreFoundation`boundPairRead + 776\r\n    frame #9: 0x00007fff951b49c5 CoreFoundation`CFReadStreamRead + 389\r\n    frame #10: 0x00007fff96c22b1e CFNetwork`RequestBodyStreamProvider::readBodyStream(bool) + 308\r\n    frame #11: 0x00007fff95200094 CoreFoundation`_signalEventSync + 180\r\n    frame #12: 0x00007fff9521d29e CoreFoundation`_cfstream_shared_signalEventSync + 478\r\n    frame #13: 0x00007fff951de881 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 17\r\n...\r\n\r\nSteps to Reproduce:\r\n1. Call CFStreamCreateBoundPair\r\n2. Set the input stream as the HTTPBodyStream of an NSURLTask.\r\n3. Schedule the output stream with the runloop\r\n4. Start the NSURLTask\r\n5. Whenever notified that the output stream has space available, write data to the stream; total data size is ~30MB\r\n\r\nExpected Results:\r\nNSURLTask completes and all the data written to the output stream is sent in the HTTP body to the server.\r\n\r\nActual Results:\r\nDeadlock inside CFWriteStreamWrite at some point after writing a few megabytes of data. (See backtraces for details.)\r\n\r\nVersion:\r\n10.11.4 Beta (15E64a)\r\n\r\nNotes:\r\nThe stream related code of ours has been stable for 2 years. The HTTP level was recently switched from NSURLConnection to NSURLSession, but was working fine for a while. I ran into this deadlock three days ago, but can reproduce it with revisions of our code going back several weeks (revisions that passed unit tests at the time.)\r\n\r\nMoreover, this deadlock does not occur on a different Mac running 10.11.3. Therefore I suspect this is a regression in the latest two betas of 10.11.4.\r\n\r\nConfiguration:\r\nMacBook Pro (15\" retina, late 2013) 16GB RAM"
    email: Jens.Alfke@gmail.com
    modified: "2016-03-16T18:47:04.20462Z"
    number: "25197186"
    number_intvalue: 25197186
    originated: 3/16/16
    parent_number: '&{NULL_VALUE}'
    product: OS X
    product_version: 10.11.4 Beta (15E64a)
    reproducible: Always
    resolved: ""
    status: Open
    title: Deadlock in bound stream pair during NSURLTask upload (10.11.4 regression?)
