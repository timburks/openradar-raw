apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "27161329"
    labels:
        datastore_id: "4964920420466688"
data:
    classification: Other Bug
    created: "2016-07-04T15:18:46.96255Z"
    description: "Summary:\r\nThe 10.12 SDK adds `stdatomic.h` to its module map, thus exposing its capabilities in line with C11 to Swift. (stdatomic.h was first available to the public in Xcode 7.)\r\n\r\nIn turn, the OSAtomic facilities were deprecated beginning in 10.12 in favor of the C11 constructs. These are unavailable in Swift, making simple value-based lock-free programming more difficult without bridging to C when targeting the new SDK as a minimum deployment target.\r\n\r\nSteps to Reproduce:\r\n1. Create a Swift project\r\n2. `import Darwin.C.stdatomic` \r\n3. Cmd-click on `stdatomic`\r\n4. Observe\r\n\r\nExpected Results:\r\nSwift imports definitions from section \"7.17.7 Operations on atomic types\", such as `atomic_exchange_explicit(_:_:_:)`.\r\n\r\nActual Results:\r\nSwift only imports the straightforward #defines and direct C structs and functions.\r\n\r\nVersion:\r\nXcode Version 8.0 beta (8S128d) / OS X El Capitan Version 10.11.5 (15F34)\r\n\r\nNotes:\r\nThis is behavior to be expected from the perspective of the Clang importer; it is likely that Swift should gyb overloads for the atomics-compatible types in the C stdlib overlay. Swift itself benefits from using LLVM's instruction set directly. IMHO, Swift should expose any capabilities of C11 that are representable in Swift. \r\n\r\nConfiguration:\r\nOccurs under all versions of Swift against the macOS 10.12 SDK.\r\n\r\nAttachments:"
    email: zach@waldowski.me
    modified: "2016-07-26T01:18:06.0903Z"
    number: "27161329"
    number_intvalue: 27161329
    originated: 04-Jul-2016 11:18 AM
    parent_number: "17171396"
    product: Developer Tools
    product_version: Xcode Version 8.0 beta (8S128d)
    reproducible: Always
    resolved: "false"
    status: Duplicate/17171396
    title: '[Swift] Unable to use majority of stdatomic'
