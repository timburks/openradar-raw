apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "27132908"
    labels:
        datastore_id: "6118157794148352"
data:
    classification: Bug
    created: "2016-07-02T02:24:08.59141Z"
    description: "Summary:\r\nI'm trying to create a CKShare from a CKRecord. However, I always get this error:\r\n \r\n2016-07-01 06:51:12.945321 myApp[7695:874420] *** Assertion failure in -[CKRecord setShare:], /BuildRoot/Library/Caches/com.apple.xbs/Sources/CloudKit/CloudKit-615.8/Framework/CKRecord.m:923\r\n2016-07-01 06:51:12.945742 mypp[7695:874420] *** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Share must be in the same zone as the current record'\r\n \r\nI share them in the same CKModifyRecordsOperation though, so I can't imagine why the original winds up in one zone, while the share winds up in another. If I remove the shareRecord from the RecordsOperation, it saves just fine. I've even tried to create the original in one RecordsOperation, then create the share in another RecordsOperation, but still get the same error.\r\n \r\nNote: I just checked in the CloudKit Dashboard. The share property of the runRecord does get populated and a cloudkit.share recordType does get created in my private zone, but whenever I try to browse the cloudkit.share recordType to see the record, it fails and asks me to send Apple a report.\r\n \r\nHere's the source to the code:\r\n                let myAppCKContainer:CKContainer = CKContainer.init(identifier: \"iCloud.com.omegaortega.myApp\")\r\n                let myAppCKDatabase:CKDatabase = myAppCKContainer.privateCloudDatabase;\r\n \r\n                let recordZoneID = CKRecordZoneID.init(zoneName: \"myAppData\", ownerName:self.curUserId! )\r\n                let recordString:String = \"\\(Date.timeIntervalSinceReferenceDate)-\\(run.name)\"\r\n                let myAppRecordID:CKRecordID = CKRecordID.init(recordName: recordString, zoneID: recordZoneID)\r\n                let myAppRecord:CKRecord = CKRecord.init(recordType: \"Run\", recordID: myAppRecordID)\r\n                let runRef:CKReference = CKReference.init(record: myAppRecord, action: CKReferenceAction.none)\r\n                let stopRecordString:String = \"\\(Date.timeIntervalSinceReferenceDate)-\\(run.name)\"\r\n                let stopRecordID:CKRecordID = CKRecordID.init(recordName: stopRecordString, zoneID: recordZoneID)\r\n                let stopRecord:CKRecord = CKRecord.init(recordType: \"Stop\", recordID: stopRecordID)\r\n                stopRecord[\"run\"] = runRef\r\n                stopRecord[\"name\"] = stop.name\r\n                if let location:CLLocation = stop.location {\r\n                    stopRecord[\"location\"] = location\r\n                }\r\n \r\n                let shareRecord = CKShare(rootRecord: myAppRecord)\r\n \r\n \r\n                let recordOp = CKModifyRecordsOperation.init(recordsToSave: [stopRecord,myAppRecord,shareRecord], recordIDsToDelete: nil)\r\n                recordOp.modifyRecordsCompletionBlock =  { (records:[CKRecord]?, recordIDs:[CKRecordID]?, error:NSError?) in\r\n                    print(\"saved\")\r\n                    if let allRecords = records {\r\n                        for record:CKRecord in allRecords {\r\n                            switch record.recordType {\r\n                            case \"Run\":\r\n                                self.runRecord = record\r\n                                break\r\n                            case \"Stop\":\r\n                                self.stopRecord = record\r\n                                break\r\n                 \r\n                            default:\r\n                                break\r\n                            }\r\n                        }\r\n                    }\r\n     \r\n     \r\n                }\r\n                myAppCKDatabase.add(recordOp);\r\n\r\nSteps to Reproduce:\r\n1. create a record\r\n2. create a share with that record\r\n3. save both in a modifyRecords op\r\n4. App crashes\r\n\r\nExpected Results:\r\nExpect the CKRecord not to crash when setting the share\r\n\r\nActual Results:\r\n2016-07-01 06:51:12.945321 myApp[7695:874420] *** Assertion failure in -[CKRecord setShare:], /BuildRoot/Library/Caches/com.apple.xbs/Sources/CloudKit/CloudKit-615.8/Framework/CKRecord.m:923\r\n2016-07-01 06:51:12.945742 mypp[7695:874420] *** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Share must be in the same zone as the current record'\r\n\r\nVersion:\r\niOS 10 Beta Build 1\r\n\r\nNotes:\r\nI modified my code to use the UICloudSharingController and still experienced the same thing.\r\n\r\nConfiguration:\r\niPhone 6S+"
    email: tom@omegaortega.com
    modified: "2016-07-02T02:24:08.59175Z"
    number: "27132908"
    number_intvalue: 27132908
    originated: 7/1/16
    parent_number: '&{NULL_VALUE}'
    product: CloudKit
    product_version: iOS 10 Beta Build 1
    reproducible: Every time
    resolved: ""
    status: Open
    title: Creating a CKShare crashes on iOS 10 Beta 1
