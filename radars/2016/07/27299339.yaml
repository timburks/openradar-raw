apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "27299339"
    labels:
        datastore_id: "4957768226177024"
data:
    classification: ""
    created: "2016-07-19T09:58:26.5792Z"
    description: "Under certain conditions, pertaining both to the exact code style (i.e. whether functions are inlined or not) and also just \"random effects\", array corruption are seen where elements of  a plain JavaScript array under certain conditions suddenly becomes NaN where an integer was expected. This was seen (among other places) in our application when doing ASN.1 conversion etc. However, I have managed to distill down a relatively simple test page that can quite reliably show the problem. The problem doesn't occur every time but the JavaScript code in the page can detect when it occurred and will keep refreshing the page until it occurs. On a non-affected browser, this means the page will keep refreshing. On an affected browser (such as Safari on iOS 10 beta 2 running on an iPhone 6) the refreshing will stop after some iterations (typically 5-10) and display error.\r\n\r\nThe program operates by creating an uint8array of size 8192 (it seems smaller array sizes causes the error to be more rare). It will fill this array with dummy values, then call \"toStr\" which first allocates a new plain Array, then copies the contents of the uint8array to the plain array, narrowing each element along the way. While doing this it builds up a string containing the original value and the copied value. When the error occurs, the element in the target array turns out to be NaN which should not be able to occur. The doTest() function tests for whether such a NaN value is contained in the resulting string which shows the error has occurred.\r\n\r\n Note that within each refresh the program runs 20 iterations and here it is also random when the error is seen. However, I have observed that if the error doesn't occur among the first set of iterations, it is not likely to occur at all and therefore it is necessary with this refreshing logic.\r\n\r\nNote that the program logic itself is completely deterministic so every run should be the same, which is also the case on other browsers. This can be shown by removing the comments from the log() statement in the doTest() function so it prints out the array.\r\n\r\nNote that the problem seems to go away if the function \"narrow\" is inlined rather than being a separate function (even though these two programs should be semantically equivalent). Also, if one omits the shift from \"state >> 8\" the error also seemingly goes away. Hence, it is critical the exact program structure is used when testing for the problem.\r\n\r\nSteps to Reproduce:\r\nUpload the attached HTML file to a web server, and open it on an affeced platform. The file is also attached.\r\n\r\n<html>\r\n<head>\r\n<title>Array test page</title>\r\n<script>\r\n\tlog = function(s) {\r\n\t\tvar ta = document.getElementById(\"ta\");\r\n\t\tta.value += s + \"\\n\";\r\n\t}\r\n\r\n\tfunction narrow(x_0) {\r\n\t\treturn x_0 << 24 >> 24;\r\n\t}\r\n\r\n\tfunction toStr(i8bytes) {\r\n\t\tvar bytes, i, str;\r\n\t\tbytes = new Array(i8bytes.length);\r\n\t\tstr = '';\r\n\t\tfor (i = 0; i < 16; i++) {\r\n\t\t\tbytes[i] = narrow(i8bytes[i]);\r\n\t\t\tstr += '*** (' + i8bytes[i] + ' - ' + bytes[i] + ')';\r\n\t\t}\r\n\t\treturn str;\r\n\t}\r\n\r\n\tfunction doTest() {\r\n\t\tvar sz = 8192;\r\n\t\tstate = 0;\r\n\t\tvar i;\r\n\r\n\t\tvar fnd = false;\r\n\t\tfor (i = 0; i < 20; i++) {\r\n\t\t\tvar arr = new ArrayBuffer(sz);\r\n\t\t\tvar i8bytes = new Uint8Array(arr, 0, sz);\r\n\t\t\tfor (j = 0; j < i8bytes.length; j++) {\r\n\t\t\t\tstate = state + 1;\r\n\t\t\t\tvar v = state >> 8;\r\n\t\t\t\ti8bytes[j] = narrow(v);\r\n\t\t\t}\r\n\t\t\tvar str = toStr(i8bytes);\r\n\t\t\t// log(str); <-- REMOVE COMMENT to show results\r\n\t\t\tif (str.indexOf(\"NaN\") !== -1) {\r\n\t\t\t\tlog(\"Found NaN at iteration\" + i);\r\n\t\t\t\tlog(str);\r\n\t\t\t\tfnd = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn fnd;\r\n\r\n\t}\r\n\tfunction start() {\r\n\t\tlog(\"Starting: \" + new Date());\r\n\t\tif (!doTest()) {\r\n\t\t\tlocation.reload(true); // <--- REMOVE THIS LINE TO PREVENT RELOAD \r\n\t\t}\r\n\t};\r\n</script>\r\n</head>\r\n<body onload=\"start()\">\r\n<h1>Array test page</h1>\r\n<p>Note that on a non-affected browser this page will reload indefinitely. On an affected browser, it\r\nwill stop reloading once the problem is detected.\r\n<p>\r\n<textarea id=\"ta\" rows=\"10\" cols=\"40\"></textarea>\r\n</body>\r\n</html>\r\n\r\nExpected Results:\r\nThe problem should run indefinitely.\r\n\r\nActual Results:\r\nOn an affected platform, the program stops and prints out the string it obtained, such as:\r\n\r\nFound NaN at iteration6\r\n*** (192 - NaN) *** (192 - NaN) *** (192 - NaN) ...\r\n\r\nVersion:\r\nVersion 10.0 (14A5297c), model: MG472QN/A, serial: C38NG6XJG5MN\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:\r\niPhone 6 with iOS 2 beta running on WiFi."
    email: mtfrb123@gmail.com
    modified: "2016-07-19T09:58:26.57941Z"
    number: "27299339"
    number_intvalue: 27299339
    originated: 12-07-2016
    parent_number: '&{NULL_VALUE}'
    product: Safari
    product_version: iOS 10 beta 2
    reproducible: Yes
    resolved: ""
    status: Open
    title: JavaScript Array corruption with NaN values occational seen in Safari on iOS 10 beta 2
