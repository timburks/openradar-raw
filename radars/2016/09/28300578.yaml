apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "28300578"
    labels:
        datastore_id: "6083492894998528"
data:
    classification: Crash/Hang/Data Loss
    created: "2016-09-14T15:32:02.28856Z"
    description: "Summary:\r\nIf you remove an item from a collection view’s data source, and then ask the collection view to reload, it will crash.\r\n\r\nSteps to Reproduce:\r\n1. Open the attached sample project “Gud Tay/Gud Tay.xcworkspace” (NOTE: the workspace, NOT the project) in Xcode 8.0 (8A218a)\r\n2. Under Gud_TayUITests.swift, run the testSwitchingFromRainToNoRain() test.\r\n\r\nExpected Results:\r\nNo crash. The cell with Calvin in it appears and disappears continuously. The test won’t pass, because I’ve introduced a delay to make debugging easier, but the point is that the app does not crash.\r\n\r\nActual Results:\r\nThe app crashes:\r\n\r\n2016-09-14 11:26:57.750 Gud Tay[35476:2136479] *** Assertion failure in -[UICollectionViewData validateLayoutInRect:], /BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3599.6/UICollectionViewData.m:433\r\n2016-09-14 11:26:57.758 Gud Tay[35476:2136479] *** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'UICollectionView received layout attributes for a cell with an index path that does not exist: <NSIndexPath: 0xc000000000000016> {length = 2, path = 0 - 0}'\r\n*** First throw call stack:\r\n(\r\n\t0   CoreFoundation                      0x000000010c7c634b __exceptionPreprocess + 171\r\n\t1   libobjc.A.dylib                     0x000000010c22721e objc_exception_throw + 48\r\n\t2   CoreFoundation                      0x000000010c7ca442 +[NSException raise:format:arguments:] + 98\r\n\t3   Foundation                          0x000000010bdbdedd -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 195\r\n\t4   UIKit                               0x000000010df001fb __45-[UICollectionViewData validateLayoutInRect:]_block_invoke + 1804\r\n\t5   UIKit                               0x000000010deff4e3 -[UICollectionViewData validateLayoutInRect:] + 2984\r\n\t6   UIKit                               0x000000010dea5d12 -[UICollectionView layoutSubviews] + 232\r\n\t7   UIKit                               0x000000010d61d344 -[UIView(CALayerDelegate) layoutSublayersOfLayer:] + 1237\r\n\t8   QuartzCore                          0x000000010d3cfcdc -[CALayer layoutSublayers] + 146\r\n\t9   QuartzCore                          0x000000010d3c37a0 _ZN2CA5Layer16layout_if_neededEPNS_11TransactionE + 366\r\n\t10  QuartzCore                          0x000000010d3c361e _ZN2CA5Layer28layout_and_display_if_neededEPNS_11TransactionE + 24\r\n\t11  QuartzCore                          0x000000010d35162c _ZN2CA7Context18commit_transactionEPNS_11TransactionE + 280\r\n\t12  QuartzCore                          0x000000010d37e713 _ZN2CA11Transaction6commitEv + 475\r\n\t13  QuartzCore                          0x000000010d37f083 _ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv + 113\r\n\t14  CoreFoundation                      0x000000010c76ae17 __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 23\r\n\t15  CoreFoundation                      0x000000010c76ad87 __CFRunLoopDoObservers + 391\r\n\t16  CoreFoundation                      0x000000010c74fb9e __CFRunLoopRun + 1198\r\n\t17  CoreFoundation                      0x000000010c74f494 CFRunLoopRunSpecific + 420\r\n\t18  GraphicsServices                    0x000000011124ca6f GSEventRunModal + 161\r\n\t19  UIKit                               0x000000010d558f34 UIApplicationMain + 159\r\n\t20  Gud Tay                             0x000000010b2176cf main + 111\r\n\t21  libdyld.dylib                       0x000000011183468d start + 1\r\n\t22  ???                                 0x0000000000000001 0x0 + 1\r\n)\r\nlibc++abi.dylib: terminating with uncaught exception of type NSException\r\n\r\n\r\nRegression:\r\nI have a report from someone with the same problem that this was working in iOS 9, but I can’t confirm because my app started on iOS 10. Hopefully I can get that person to dupe this with their own sample code, but I’m not sure.\r\n\r\nNotes:\r\nIgnore all the MBTA (Boston subway system) view controllers, view models, and services. They’re not related to this bug; I just didn’t have time to strip them out for the sample app. All we’re concerned with is the collection view along the bottom, which shows weather information.\r\n\r\nWhen running UI unit tests, MockWeatherService is used to provide conditions alternating between raining and not raining. The first time the weather switches from raining to not raining, WeatherViewModel updates and returns zero objects in the completion block of processForecast(_:). The collection view is subsequently updated at WeatherViewController.swift:80 via self.collectionView.realoadData(). This _should_ invalidate the layout as well, but it apparently does not, because as you can see from the exception, the collection view received attributes for element (0, 0), which should not exist when the collection view is empty.\r\n\r\nThe issue can be fixed by invalidating the layout, but only _after_ calling reloadData. You can see this in the comments in WeatherViewController.swift, lines 77–78 and 82–83. It seems that you shouldn’t have to invalidate the layout at all, and it’s also weird that he order matters.\r\n\r\nSample project: https://cl.ly/hSfy"
    email: igeek1@gmail.com
    modified: "2016-09-14T15:41:31.3306Z"
    number: "28300578"
    number_intvalue: 28300578
    originated: 14-Sep-2016 11:31 AM
    parent_number: '&{NULL_VALUE}'
    product: iOS
    product_version: 10.0 (14A345)
    reproducible: Always
    resolved: ""
    status: Open
    title: '10.0 (14A345): collection view crash when removing item from data source and reloading'
