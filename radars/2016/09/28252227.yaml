apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "28252227"
    labels:
        datastore_id: "5574297410076672"
data:
    classification: ""
    created: "2016-09-11T23:48:24.16473Z"
    description: "Summary:\r\nWe sell PSPDFKit, an SDK that's in thousands of apps on the App Store. Lately we've seen rejections again for methods that seemingly just randomly clash with internal API that Apple uses.\r\n\r\nThis is a problem. Our customers are mad and blame us for using private API, when we do not - it's just bad luck that names clash in completely unrelated parts. We cannot do anything other than trying to educate, and then rushing out a new release of our SDK with these symbols renamed (because our customers often are in a hurry and even if arguing might help - it could take a long time and it's not certain that they are not forced to rename anyway.)\r\n\r\nThis caused bugs as we rushed and forgot to update all calls. We've beefed up our test coverage over the last two years, but especially with dynamic code there's always a risk of introducing bugs for doing needless changes. It also makes our API worse and might break existing implementations.\r\n\r\nSome customers argue with the review team. Some simply re-submit and pass - without any binary changes. The system seems very arbitrary. The method flagged here was in our SDK for years. It never got flagged. I assume that this method has recently been added somewhere inside iOS 10 and thus now is on a list.\r\n\r\nSteps to Reproduce:\r\nI might be able to list customers, but would have to ping them first - we'd rather not. The test the last one received was the following:\r\n\r\nPerformance - 2.5.1\r\n\r\n\r\nYour app uses or references the following non-public APIs:\r\n\r\nfinished:, pageRange, postBody, titleForSection:\r\n\r\nThe use of non-public APIs is not permitted on the App Store because it can lead to a poor user experience should these APIs change.\r\n\r\nNext Steps\r\n\r\nPlease revise your app to remove any non-public APIs. If you have defined methods in your source code with the same names as the above-mentioned APIs, we suggest altering your method names so that they no longer collide with Apple's private APIs to avoid your application being flagged in future submissions.\r\n\r\nAdditionally, if you are using third party libraries, please update to the most recent version of those libraries. If you do not have access to the libraries' source, you may be able to search the compiled binary using the \"strings\" or \"otool\" command line tools. The \"strings\" tool can output a list of the methods that the library calls and \"otool -ov\" will output the Objective-C class structures and their defined methods. These tools can help you narrow down where the problematic code resides. You could also use the \"nm\" tool to verify if any third-party libraries are calling these APIs.\r\n\r\nResources\r\n\r\nFor information on the \"nm\" tool, please see the \"nm tool\" Xcode manual page.\r\n\r\nIf there are no alternatives for providing the functionality your app requires, you may wish to file an enhancement request.\r\n\r\nIf you have difficulty reproducing a reported issue, please try testing the workflow described in Technical Q&A QA1764: How to reproduce bugs reported against App Store submissions.\r\n\r\nIf you have code-level questions after utilizing the above resources, you may wish to consult with Apple Developer Technical Support. When the DTS engineer follows up with you, please be ready to provide:\r\n- complete details of your rejection issue(s)\r\n- screenshots\r\n- steps to reproduce the issue(s)\r\n- symbolicated crash logs - if your issue results in a crash log\r\n\r\n\r\nExpected Results:\r\nAll private methods (and functions, for that matter) implemented by Apple should start with an underscore. This, combined with a clearly-defined precedence for original versus category-defined methods, would make adding methods to framework classes by category or by subclass much safer.\r\n\r\nThis would also fix the problem with the name clashers here.\r\n\r\nActual Results:\r\nApps are rejected for unsound reasons.\r\n\r\nVersion:\r\niOS\r\n\r\nNotes:\r\nThis is not the first time this happened. I vented via Twitter but should have started describing the problem earlier. Sorry about that.\r\n\r\nHere are some incidents I can remember. There surely are more:\r\n\r\nhttps://twitter.com/steipete/status/773499862579023872\r\nhttps://twitter.com/steipete/status/451417995945193472\r\nhttps://twitter.com/steipete/status/272391185530753024\r\nhttps://twitter.com/steipete/status/654291385949024256\r\nhttps://twitter.com/0xced/statuses/314458799643693056\r\nhttps://mobile.twitter.com/chockenberry/status/270684871612051457\r\nhttp://stackoverflow.com/questions/3455604/apple-rejected-app-because-of-animationdidstopfinishedcontext-is-a-non-public\r\n\r\nI've seen that Apple is investing a lot in making the App Store better. A cleanup, faster review times - you're on a good track. Thanks!"
    email: steipete@gmail.com
    modified: "2016-09-11T23:48:24.16501Z"
    number: "28252227"
    number_intvalue: 28252227
    originated: 12-Sep-2016 01:44 AM
    parent_number: '&{NULL_VALUE}'
    product: App Store
    product_version: ""
    reproducible: Sometimes
    resolved: ""
    status: Open
    title: Incorrect App Store rejections for name clashes on methods that happen to be named like private API (especially bad for us, as we ship an SDK.)
