apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "27950334"
    labels:
        datastore_id: "5530027571544064"
data:
    classification: Enhancement
    created: "2016-08-22T17:49:09.30367Z"
    description: |-
        I think we need improved documentation and an updated sample code project that illustrates the correct flow of handling a refresh background task on Apple Watch and using it in order to update complications.

        It’s not clear from the documentation, sample code, and WWDC sessions this year that you still should call the ClockKit complication server reload or extend timeline for complication methods in order to trigger an update to the complication.

        This is doubly confusing because the other methods to cause a complication load via the complication data source are now deprecated and most of the discussion around the deprecation points developers to the background refresh task APIs but doesn’t specifically mention how to use them in conjunction with the Complication Server’s reload methods.

        I’d really like to see a sample project, some forum posts, and updated documentation that illustrates best practices for both using the background refresh task on the watch to update complications locally as well as using that in conjunction with WatchConnectivity pushes from the iPhone to update them as well.
    email: conrad.stoll@mutualmobile.com
    modified: "2016-08-22T17:49:09.30387Z"
    number: "27950334"
    number_intvalue: 27950334
    originated: 22-Aug-2016 11:49 AM
    parent_number: '&{NULL_VALUE}'
    product: watchOS SDK
    product_version: watchOS 3
    reproducible: Always
    resolved: ""
    status: Open
    title: WKRefreshBackgroundTask - Update Sample Code and Improve Documentation for WKRefreshBackgroundTask Handling and Updating Complications
