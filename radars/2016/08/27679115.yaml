apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "27679115"
    labels:
        datastore_id: "6677188103372800"
data:
    classification: Serious bug
    created: "2016-08-03T15:46:31.87768Z"
    description: "Summary:\r\nThe use of autolayout and size classes makes it possible to create very different layouts for a view, within a single storyboard or xib file.\r\n\r\nFor example, it is possible to create a layout where a label is displayed horizontally centered below an image for almost all size classes, except for some size class (say the compact height) for which the label should be displayed vertically centered to the right of the image. \r\n\r\nTo be able to create such layouts, constraints can be selectively installed or uninstalled independently for each size class, right within Interface Builder (open the Xcode Size Inspector, select the constraint and check and uncheck 'Installed', creating a special rule for any size class requiring it)\r\n\r\nTo implement the example layout described above:\r\n\r\n- The two constraints horizontally centering the label below the image would be installed for all size classes, except for the compact height size class for which they would not be installed\r\n- The two constraints vertically centering the label on the right of the image would be only installed for the compact height size class\r\n\r\nSuch setups work in most cases well, but I discovered that they might generate autolayout conflicts in the case of collection view cells. If a cell is namely displayed when the app uses the size class specialisation for which exceptions were made (in our example above the compact height one), layout constraints which have not being marked as installed for this size class still show up in conflicts with other installed constraints.\r\n\r\nSteps to Reproduce:\r\nI created a small sample project (see Attachments) implementing several layouts where an image and a title are positioned differently depending on the size class, as described above. These layouts are made as follows:\r\n\r\na) Simple view controller view\r\nb) Table view with prototype cells\r\nc) Collection view with prototype cells\r\nd) Table view with cells instantiated from a xib file\r\ne) Collection view with cells instantiated from a xib file\r\n\r\nFor debugging purposes, the project logs the 4 constraints which are not always installed depending on the size class.\r\n\r\nYou should play with this project as follows:\r\n\r\n1. Run the project with an iPhone Plus device or simulator (i.e. supporting landscape compact orientation on the springboard), rotated in landscape orientation\r\n\r\n2. The project starts with the simple view example selected. Rotate the device into portrait orientation, then back into landscape orientation. In the Xcode console, you can see that constraints are correctly installed depending on the involved size class. No autolayout conflicts are reported to the console\r\n\r\n3. Switch to the Table (prototype) tab and rotate the device twice again. Everything works as expected. The behavior is therefore correct for prototype table view cells\r\n\r\n4. Switch to the Table (xib) prototype and rotate the device twice again. Everything works as expected. The behavior is therefore correct for table view cells instantiated from a xib\r\n\r\n5. Your device should now be held in landscape orientation. Open the Collection (prototype) tab and check the console. You will see that autolayout conflicts are logged. The involved constraints are 'debug_label_image_vertical_distance' (constraint positioning the label below the image for all size classes, not installed for compact height) and 'debug_vertical_label_centering' (constraint positioning the label centered next to the image, installed for the compact height size class only). Those constraints should not appear for the same compact size together, yet they are in conflict, leading to a broken layout\r\n6. You can repeat this test with the Collection (xib) example. The issue is therefore the same, whether the cell is a prototype one or is instantiated from a xib\r\n\r\nNote that there are no issues if all these examples are opened in portrait orientation first.\r\n\r\nExpected Results:\r\nConstraints not installed for a size class never conflict with other installed constraints when this size class is in use.\r\n\r\nActual Results:\r\nConstraints not installed for a size class can create autolayout conflict with other installed constraints when this size class is in use.\r\n\r\nVersion:\r\nTested on iOS 9, as well as on iOS 10 beta 4\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:\r\nAny device\r\n\r\nCode sample available at: https://github.com/defagos/radars/tree/develop/uninstalled-constraint-bug"
    email: defagos@gmail.com
    modified: "2016-08-03T15:46:31.87796Z"
    number: "27679115"
    number_intvalue: 27679115
    originated: 03-Aug-2016 05:43 PM
    parent_number: '&{NULL_VALUE}'
    product: iOS SDK
    product_version: 9 and 10
    reproducible: Always
    resolved: ""
    status: Open
    title: Constraints not installed for a size class still generate autolayout conflicts at runtime when this size class is in use
