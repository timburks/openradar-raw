apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "27844227"
    labels:
        datastore_id: "4967156219379712"
data:
    classification: Performance
    created: "2016-08-15T09:16:46.99825Z"
    description: "Peter Steinberger15-Aug-2016 11:15 AM\r\n\r\nSummary:\r\nWe work on a large project with many sub-projects and targets, mixed Objective-C(++) and C/C++ (and very very little Swift).\r\n\r\nWhile Xcode is indexing, typing often has a delay of multiple seconds, making it very sluggish and hard to use. This eventually stops once all files are indexed, but if I touch any headers the game starts from the beginning.\r\n\r\nThis is especially problematic because indexing can take 20 or more minutes on a top-of-the line rMBP. I'm basically typing blind and at some point text appears.\r\n\r\nI don't mind if indexing takes a long time, but it really should be happening in the background. I took a sample while I was waiting for typing to appear:\r\n\r\nhttps://gist.github.com/steipete/09ed94e78f084804a48291bef6c965c5\r\n\r\nWhat is Xcode doing on the main thread while I type?\r\n(I did not spend extended time on this and it's quite hard to correctly understand code-flow without having access to the source code, so some of these might be uninformed wrong guesses)\r\n\r\n- Running a quite complex and slow regular expression via `[IDEMediaResource extractNonVariantNameFromString:withFoldingStrategy:returningVariant:]`\r\n- Rebuilding much of the UI and running that through lots of slow AutoLayout calls (e.g. [IDEEditorContext _rebuildRightControlGroup] or _willMeasureMinSizeForFullscreen, originating from [NSView _layoutAtWindowLevelIfNeeded] - is the whole window layout invalidated each time i type?)\r\n- Deallocating large-ish images via NSCache (-[IDEEditorHistoryItem setCachedImage:])\r\n- Loads of extremely deeply nested [NSView _recursiveDisplayRectIfNeededIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:topView:] calls that end up in many slow drawRect: calls.\r\n- IDEPathCell seems to copy images within drawRect which calls to NSImageURLReferencingRepProvider (slow)\r\n- Heavy KVO usage which is rather slow due to the nature of how things work (NSKeyValueUnnestedProperty, loads of string comparisons)\r\n- -[IDEUtilityArea _rebuildCategoriesAndStack] seems to be expensive.\r\n\r\nBUT. That's all acceptable and not a big deal, and much of it are small improvements and much of it is also just how AppKit works. I spun up Instruments to see what really is happening here.\r\n\r\nhttps://twitter.com/steipete/status/765106084755415040\r\n\r\nI did an instrumentation run of roughly a minute (attached as part of this radar). BY FAR the most time is spent in 3 functions, which all seem like perfect optimization candidates.\r\n\r\nWeight\tSelf Weight\t\tSymbol Name\r\n18.27 s   31.0%\t17.00 ms\t \t                            -[DVTiPhoneSimulator deviceSpecificOverridingPropertiesForBuildable:withBaselineParameters:]\r\n14.16 s   24.0%\t10.00 ms\t \t                            -[DVTiPhoneSimulator supportedSDKsForBuildable:buildParameters:error:]\r\n11.48 s   19.4%\t10.00 ms\t \t                            -[DVTAbstractiOSDevice supportedArchitecturesForBuildable:buildParameters:error:]\r\n\r\nIt seems our main performance issue here does not originate from DevToolsCore/IDEFoundation, but IDEiOSSupportCore:\r\n\r\nDigging deeper, here's what shows up on top of time profiling. These might be candidates for caching:\r\n\r\n866.00 ms    1.4%\t11.00 ms\t \t                             -[SimDevice deviceType]\r\n540.00 ms    0.9%\t1.00 ms\t \t                             -[SimDeviceType(DVTAdditions) dvt_supportedArchs]\r\n\r\nThis seems to be called a lot while I type - I do not change the configuration while I enter text, this is a likely candidate for caching:\r\n\r\n2.73 s    4.6%\t5.00 ms\t \t                              -[Xcode3Target baseSDKForBuildConfigurationName:]\r\n\r\nEspecially because half of the time is spent here:\r\n901.00 ms    1.5%\t8.00 ms\t \t                                +[Xcode3SDK sdkForNameOrPath:]\r\n\r\n[DVTMacroDefinitionTable setLiteralValue:forMacroName:conditionSet:] spends almost all time on checking something confirms to a protocol - maybe this check could be moved somewhere higher up?\r\n\r\nWeight\tSelf Weight\t\tSymbol Name\r\n14.16 s   24.0%\t10.00 ms\t \t                            -[DVTiPhoneSimulator supportedSDKsForBuildable:buildParameters:error:]\r\n\r\nAgain spending a ton of time in sdkForNameOrPath:\r\n\r\nWeight\tSelf Weight\t\tSymbol Name\r\n11.48 s   19.4%\t10.00 ms\t \t                            -[DVTAbstractiOSDevice supportedArchitecturesForBuildable:buildParameters:error:]\r\n\r\nCache candidates?\r\n809.00 ms    1.3%\t5.00 ms\t \t                             -[DVTiPhoneSimulator nativeArchitecture]\r\n1.11 s    1.8%\t9.00 ms\t \t                              -[DVTiPhoneSimulator operatingSystemVersion]\r\n336.00 ms    0.5%\t7.00 ms\t \t                              -[DVTPlatformFamily platforms]\r\n\r\nBuidling an error string that is taking up 3.5% of the time alone. (Never seen that - could be optimized/delayed to create error description lazily?)\r\n2.09 s    3.5%\t9.00 ms\t \t                              +[NSError(DVTDeviceIneligibility) dvt_errorWithDeviceIneligibilityErrorCode:device:buildable:buildParameters:]\r\n\r\n\r\nI've only spent an hour on this radar, as I'm sure Apple has smarter people who have a better idea where to work on. This radar is even more so here to show that there is a problem, and it seems a few weeks on it could easily create a 10x or more performance win here. Xcode being sluggish ultimately makes it harder to build great apps for the iOS platform, compared to other IDEs such as Visual Studio or even Android Studio, which is much faster despite running inside a JVM.\r\n\r\nDespite all that critique, I have to say that Xcode improved a lot over the years. I started with Xcode 3 and it's amazing how far it came. I understand that there are deadline and marketing wants even more features, and the Xcode team is doing amazing work in pushing forward fast with a relatively small sized team. You have my respect for that.\r\n\r\nSteps to Reproduce:\r\n1. Open a large iOS project in Xcode (maybe Pages.app?)\r\n2. Delete DerivedData\r\n3. Watch Xcode re-indexing the project and start typing, modify source and header files\r\n4. Observe multi-second delays while typing.\r\n\r\nExpected Results:\r\nIndexing can be slow; but typing should be fast and have a < 250ms delay to be somewhat usable.\r\n\r\nActual Results:\r\nDelays of 3000ms and more while typing make it really hard to work.\r\n\r\nVersion:\r\nXcode 8b5 (8S193k)\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:\r\n\r\n\r\nAttachments:\r\n'Xcode-Indexing-While-I-Type-Instruments.trace.zip' was successfully uploaded."
    email: steipete@gmail.com
    modified: "2016-08-15T09:16:46.99852Z"
    number: "27844227"
    number_intvalue: 27844227
    originated: 15-Aug-2016 11:15 AM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: 8b5
    reproducible: Always
    resolved: ""
    status: Open
    title: Xcode is unusably slow during indexing
