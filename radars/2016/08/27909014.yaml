apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "27909014"
    labels:
        datastore_id: "6675608629149696"
data:
    classification: Performance
    created: "2016-08-18T18:24:35.37641Z"
    description: "Summary:\r\nBridging an NSArray from Objective-C to a typed array in Swift can cause memory leaks to be reported in Instruments. Changing the code from a typed array to an NSArray fixes the leak, but only when each member in the array is cast individually:\r\n\r\n```\r\narray.map { $0 as? ElementType}.filter { $0 != nil }.flatMap { $0 }\r\n```\r\n\r\nHappens when either -O (fast) or -O -whole-module-optimization compiler flags are enabled.\r\n\r\nSteps to Reproduce:\r\n1. Download the attached project zip and unzip.\r\n2. Open in Xcode and select a simulator or device.\r\n3. Profile the app in Instruments, selecting the 'Leaks' instrument if prompted (either Simulator or Device).\r\n4. Change `#if 1` to `#if 0` on line 15 in `AppDelegate.m`.\r\n5. Profile the app again.\r\n\r\nExpected Results:\r\nThere shouldnâ€™t be any memory leaks, regardless of whether typed bridging is used.\r\n\r\nActual Results:\r\nInstruments detects a memory leak when bridging to typed array from Objective-C. (see attached screenshot)\r\n\r\nVersion:\r\nXcode Version 7.3.1 (7D1014)\r\nOS X 10.11.6\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:\r\nApple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)\r\nTarget: x86_64-apple-macosx10.9\r\n\r\nSwiftArrayBridgingLeakExample.zip - configuration file has been successfully uploaded.\r\n\r\nAttachments:\r\n'Screenshot 2016-08-18 11.14.40.png' and 'SwiftArrayBridgingLeakExample.zip' were successfully uploaded."
    email: michael@msanders.com
    modified: "2016-08-18T18:24:35.37659Z"
    number: "27909014"
    number_intvalue: 27909014
    originated: 18-Aug-2016
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: Always
    resolved: ""
    status: Open
    title: NSArray <=> Swift array bridging leaking memory
