apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "29292824"
    labels:
        datastore_id: "5026012219834368"
data:
    classification: Bug
    created: "2016-11-16T19:41:55.52036Z"
    description: "Area:\r\nSomething not on this list\r\n\r\nSummary:\r\nAbout half the time, the following ReplayKit API\r\n\r\n[self.extensionContext loadBroadcastingApplicationInfoWithCompletion:^(NSString *_Nonnull bundleID, NSString *_Nonnull displayName, UIImage *_Nullable appIcon) {}];\r\n\r\nSwitches the ordering of the parameters to the completion block. When this happens a UIImage is passed into displayName, or bundleID, potentially causing a crash if this case isn't checked.\r\n\r\nSteps to Reproduce:\r\n1. Create a ReplayKit UI extension\r\n2. Implement the above API\r\n3. Add logging to above completion block that logs bundleID, displayName, and appIcon\r\n4. Create a handful of broadcasts\r\n5. Verify that the completion block parameters are out of order\r\n\r\nExpected Results:\r\nbundleID should be an NSString\r\ndisplayName should be an NSString\r\nappIcon should be a UIImage\r\n\r\nActual Results:\r\nbundleID is sometimes a UIImage\r\ndisplayName is sometimes a UIImage\r\nappIcon is sometimes an NSString\r\n\r\nVersion:\r\niOS 10.1.1\r\n\r\nNotes:\r\nSeems to happen roughly half the time. We've added very defensive code that checks the types and tries to detect a bundle ID in a string as a workaround.\r\n\r\nConfiguration:\r\niPad Mini 4\r\n\r\nAttachments:"
    email: jboiles@twitter.com
    modified: "2016-11-16T19:41:55.52065Z"
    number: "29292824"
    number_intvalue: 29292824
    originated: "2016-11-16"
    parent_number: '&{NULL_VALUE}'
    product: ReplayKit
    product_version: iOS 10.1.1
    reproducible: Yes
    resolved: No
    status: Open
    title: 'ReplayKit loadBroadcastingApplicationInfoWithCompletion: passes incorrect parameters to completion block.'
