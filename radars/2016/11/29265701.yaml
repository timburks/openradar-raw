apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "29265701"
    labels:
        datastore_id: "5596235431936000"
data:
    classification: ""
    created: "2016-11-15T10:48:54.04012Z"
    description: "Summary:\r\nIf a local label has the same location as a global (.globl) label then jumps to the local label can go via a dynamic loader stub and crash if the stack is not SysV ABI aligned. This happens even if the global label is unused, and the jump to the local label is from within the same assembly file.\r\n\r\nSteps to Reproduce:\r\nInstall Xcode 8.\r\nBuild a flat_namespace bundle from an assembly file that jumps to a local label (and ensure a global label has the same value as the local label).\r\nLoad with dlopen(RTLD_LAZY).\r\nCall into code in the loaded bundle that does a plain local jump the local label.\r\nThe local jump will invoke the dynamic stub resolver and crash if the stack does not adhere to SysV ABI conventions.\r\n\r\n\r\nTranscript:\r\nbash$ uname -a\r\nDarwin dhcpu06.sics.se 15.6.0 Darwin Kernel Version 15.6.0: Thu Sep  1 15:01:16 PDT 2016; root:xnu-3248.60.11~2/RELEASE_X86_64 x86_64\r\nbash$ /usr/bin/as --version\r\nApple LLVM version 8.0.0 (clang-800.0.38)\r\nTarget: x86_64-apple-darwin15.6.0\r\nThread model: posix\r\nInstalledDir: /Applications/Xcode_8_0_0.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\r\nbash$ cc --version\r\nApple LLVM version 8.0.0 (clang-800.0.38)\r\nTarget: x86_64-apple-darwin15.6.0\r\nThread model: posix\r\nInstalledDir: /Applications/Xcode_8_0_0.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\r\nbash$ cat asbug.s\r\n\t.text\t\r\n\r\n\t.p2align 4,,15\r\n\t.globl\t_test\r\n_test:\r\n\t# _test is called using SysV ABI, so %rsp is 8 (mod 16) here\r\n\tsub\t$8, %rsp\r\n\t# non-API \"call\" to LOCAL label (SysV ABI would require %rsp 0 (mod 16) here\r\n\t#\r\n\t# NOTE: Jumping to a local label should not put any\r\n\t# requirements on stack layout. In particular, SysV ABI calling\r\n\t# conventions should be irrelevant.\r\n\t#\r\n\tjne _bad_local\r\n\t# Restore stack pointer\r\n\tadd\t$8, %rsp\r\n\t# return to C\r\n\tret\r\n\r\n\t.p2align 4,,15\r\n\t.globl\t_bad_globl\r\n\t# The \".globl\"-declared label _bad_globl is not used anywhere. Only the plain label _bad_local is used.\r\n_bad_globl:\r\n_bad_local:\r\n\t# Restore stack pointer\r\n\tadd\t$8, %rsp\r\n\t# return to C\r\n\tret\r\n\r\nbash$ cat asbug_main.c\r\n/*\r\n/usr/bin/as -arch x86_64  asbug.s -o asbug.o && cc -Wl,-flat_namespace -bundle -Wall -Werror asbug.o -o asbug.bundle && otool -rtV asbug.bundle && cc -Wall -Werror asbug_main.c -o asbug && { ./asbug || echo \"bomb $?\"; }\r\n*/\r\n\r\n#include <stdlib.h>\r\n#include <dlfcn.h>\r\n\r\ntypedef void void_fun(void);\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n  void *test;\r\n\r\n  void *handle = dlopen(\"asbug.bundle\", RTLD_LAZY);\r\n  if (handle == NULL) exit(42);\r\n\r\n  test = dlsym(handle, \"test\");\r\n  if (test == NULL) exit(43);\r\n\r\n  ((void_fun*)test)();\r\n\r\n  (void)argc; (void)argv;\r\n\r\n  return 0;\r\n}\r\nbash$ /usr/bin/as -arch x86_64 asbug.s -o asbug.o && cc -Wl,-flat_namespace -bundle -Wall -Werror asbug.o -o asbug.bundle && otool -rtV asbug.bundle && cc -Wall -Werror asbug_main.c -o asbug && { ./asbug || echo \"bomb $?\"; }\r\nasbug.bundle:\r\n(__TEXT,__text) section\r\n_test:\r\n0000000000000f80\tsubq\t$0x8, %rsp\r\n0000000000000f84\tjne\t0xf96 ## symbol stub for: _bad_globl <<< BUG, should be plain \"jne _bad_local\"\r\n0000000000000f8a\taddq\t$0x8, %rsp\r\n0000000000000f8e\tretq\r\n0000000000000f8f\tnop\r\n_bad_local:\r\n_bad_globl:\r\n0000000000000f90\taddq\t$0x8, %rsp\r\n0000000000000f94\tretq\r\nSegmentation fault: 11\r\nbomb 139\r\nbash$ \r\n\r\nExpected Results:\r\nJumps within an assembly file to local labels in the same assembly file should never cause the dynamic loader to be invoked (or to crash).\r\n\r\nActual Results:\r\nThe dynamic loader is involved for resolving a stub, and crashes if the stack violates the SysV ABI alignment requirements.\r\n\r\nVersion:\r\nXcode 8.0.0, OS X 10.11.6 (15G1108)\r\n\r\nNotes:\r\nA workaround is to never locate global labels at the same place as local labels, and never use global labels in in assembly file unless they are called in a SysV compliant manner.\r\n\r\nA separate bug is that the Assembler reference claims \"The .globl directive ... If symbol_name is otherwise defined (by ... a label), it acts within the assembly EXACTLY as if the .globl statement was not given\" (my emph), which is clearly incorrect here. https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/Assembler/040-Assembler_Directives/asm_directives.html\r\n\r\nConfiguration:\r\n\r\n\r\nAttachments:"
    email: Per.Mildner.usenet@gmail.com
    modified: "2016-11-15T10:48:54.0403Z"
    number: "29265701"
    number_intvalue: 29265701
    originated: 15-Nov-2016 11:43 AM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: Always
    resolved: ""
    status: Open
    title: Local label in assembly file can cause dynamic loader to crash (OS X x86_64)
