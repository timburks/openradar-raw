apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "29325639"
    labels:
        datastore_id: "6185699694870528"
data:
    classification: Other Bug
    created: "2016-11-18T03:31:58.19082Z"
    description: "Summary:\r\n\r\n1. Doc of CALayer.sublayers\r\nThe sublayers are listed in back to front order.\r\n\r\n2. Doc of CALayer.zPosition:\r\nChanging the value of this property changes the the front-to-back ordering of layers onscreen. Higher values place this layer visually closer to the viewer than layers with lower values.\r\n\r\n3. Doc CALayer.addSublayer(:):\r\nAppends the layer to the layerâ€™s list of sublayers.\r\n\r\nThe \"back to front order\" and \"front-to-back ordering\" should be the same thing. But in reality, the order of the value of sublayers may be different from the ordering determined by zPosition, thus causes inconsistency. For example, one can call addSublayer(layerWithLowerZPosition) after addSublayer(layerWithHigherZPosition). The resulting sublayers will be [layerWithHigherZPosition, layerWithLowerZPosition], representing a reversed order from the zPosition order(or visual order).\r\n\r\nSo it seems there are 2 kinds of layer ordering, which is very confusing. The docs should differentiate them clearly. At least the doc of  CALayer.sublayers shouldn't simply say \"back to front order\".\r\n\r\nOr maybe the whole design of sublayers API is flawed: it's element order should never conflict zPosition order or visual order.\r\n\r\nSteps to Reproduce:\r\n1. Run sample app.\r\n2. Read logs to see conflicting orders.\r\n\r\nCode: https://cloudup.com/cxNm0lyGiDb"
    email: an00na@gmail.com
    modified: "2016-11-18T03:32:38.87072Z"
    number: "29325639"
    number_intvalue: 29325639
    originated: 17-Nov-2016 09:31 PM
    parent_number: '&{NULL_VALUE}'
    product: iOS SDK
    product_version: "10.1"
    reproducible: Always
    resolved: ""
    status: Open
    title: sublayers order issue
