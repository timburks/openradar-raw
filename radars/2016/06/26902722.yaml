apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "26902722"
    labels:
        datastore_id: "4592242618531840"
data:
    classification: Other Bug
    created: "2016-06-20T22:14:58.00607Z"
    description: "Summary:\r\nWith the first developer seed of Xcode 8, clang has gotten much stricter regarding nullability — which is good! Unfortunately, it also reports false positives — which is sad.\r\n\r\nSteps to Reproduce:\r\nCompile the following function with `-Wnullable-to-nonnull-conversion` in the specified Xcode version as Objective–C and as Objective-C++:\r\n```\r\nstatic BOOL IsValidJSONData(NSData *const _Nullable data) {\r\n    if (data == nil) return NO;\r\n\r\n    return nil != [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:NULL];\r\n}\r\n```\r\n\r\nExpected Results:\r\nWhile the implementation is absurdly wasteful, the code above should compile without warnings (let alone errors). This happens regardless if compiled as Objective–C or Objective–C++.\r\n\r\nActual Results:\r\nWhen compiled as Objective–C, the code compiles without errors or warnings. When compiled as Objective–C++, however, there’s a warning that the parameter passed to `+[NSJSONSerialization JSONObjectWithData:options:error:]` could be nil — which is obviously wrong, since there is no way that the constant could have been changed.\r\n\r\nNotes:\r\nThis does not happen on Xcode 7. In fact, marking a nullable parameter as const, and then performing a nil check is how I silenced these warnings without casts or additional local variables."
    email: daniel@puppiesonacid.de
    modified: "2016-06-20T22:14:58.00631Z"
    number: "26902722"
    number_intvalue: 26902722
    originated: 20-Jun-2016 03:12 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode-beta (8S128d)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Clang: -Wnullable-to-nonnull-conversion is over–eager in Objective-C++'
