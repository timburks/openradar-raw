apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "10035461"
    labels:
        datastore_id: "1323403"
data:
    classification: enhancement
    created: "2011-08-27T21:46:51.80611Z"
    description: "Summary:\r\n\r\nHi!\r\n\r\n\"help\" in the lldb executable also lists all of the built-in gdb-compatible commands.  9 times out of 10, I'm more interested in the commands that lldb defines, but those always get scrolled off the top of the screen, showing me the gdb aliases which, while nice, aren't what I'm usually interested in doing a top-level help.\r\n\r\nIt'd be cool to have a \"help gdb-compatibility\" or \"command list --aliases\"  so we could see it, and not have the generic lldb help polluted with them.\r\n\r\n\r\nSteps to Reproduce:\r\n\r\nLaunch lldb (LLDB-69):\r\n% lldb\r\n\r\nGet help\r\n(lldb) help\r\n\r\n\r\nExpected Results:\r\n\r\nList of supported commands, for exploration or general help:\r\n\r\n_regexp-break -- Set a breakpoint using a regular expression to specify the\r\n                 location.\r\n_regexp-down  -- Go down \"n\" frames in the stack (1 frame by default).\r\n_regexp-up    -- Go up \"n\" frames in the stack (1 frame by default).\r\napropos       -- Find a list of debugger commands related to a particular\r\n                 word/subject.\r\nbreakpoint    -- A set of commands for operating on breakpoints. Also see\r\n                 _regexp-break.\r\ncommand       -- A set of commands for managing or customizing the debugger\r\n                 commands.\r\ndisassemble   -- Disassemble bytes in the current function, or elsewhere in the\r\n                 executable program as specified by the user.\r\nexpression    -- Evaluate a C/ObjC/C++ expression in the current program\r\n                 context, using variables currently in scope.\r\nframe         -- A set of commands for operating on the current thread's frames.\r\nhelp          -- Show a list of all debugger commands, or give details about\r\n                 specific commands.\r\nlog           -- A set of commands for operating on logs.\r\nmemory        -- A set of commands for operating on memory.\r\nplatform      -- A set of commands to manage and create platforms.\r\nprocess       -- A set of commands for operating on a process.\r\nquit          -- Quit out of the LLDB debugger.\r\nregister      -- A set of commands to access thread registers.\r\nscript        -- Pass an expression to the script interpreter for evaluation and\r\n                 return the results. Drop into the interactive interpreter if no\r\n                 expression is given.\r\nsettings      -- A set of commands for manipulating internal settable debugger\r\n                 variables.\r\nsource        -- A set of commands for accessing source file information\r\ntarget        -- A set of commands for operating on debugger targets.\r\nthread        -- A set of commands for operating on one or more threads within a\r\n                 running process.\r\ntype          -- A set of commands for operating on the type system\r\nversion       -- Show version of LLDB debugger.\r\n\r\n\r\n\r\nActual Results:\r\n\r\nthe lldb command help as listed above, and all 50 built-in aliases:\r\n\r\nThe following is a list of your current command abbreviations (see 'help command alias' for more info):\r\n\r\nb        -- ('_regexp-break')  Set a breakpoint using a regular expression to\r\n            specify the location.\r\nbt       -- ('thread backtrace')  Show the stack for one or more threads.  If no\r\n            threads are specified, show the currently selected thread.  Use the\r\n            thread-index \"all\" to see all threads.\r\nc        -- ('process continue')  Continue execution of all threads in the\r\n            current process.\r\ncontinue -- ('process continue')  Continue execution of all threads in the\r\n            current process.\r\ndown     -- ('_regexp-down')  Go down \"n\" frames in the stack (1 frame by\r\n            default).\r\nexit     -- ('quit')  Quit out of the LLDB debugger.\r\nexpr     -- ('expression')  Evaluate a C/ObjC/C++ expression in the current\r\n            program context, using variables currently in scope.\r\nf        -- ('thread step-out')  Finish executing the current function and\r\n            return to its call site in specified thread (current thread, if none\r\n            specified).\r\nfile     -- ('target create')  Create a target using the argument as the main\r\n            executable.\r\nfinish   -- ('thread step-out')  Finish executing the current function and\r\n            return to its call site in specified thread (current thread, if none\r\n            specified).\r\nimage    -- ('target modules')  A set of commands for accessing information for\r\n            one or more target modules.\r\nl        -- ('source list')  Display source code (as specified) based on the\r\n            current executable's debug info.\r\nlist     -- ('source list')  Display source code (as specified) based on the\r\n            current executable's debug info.\r\nn        -- ('thread step-over')  Source level single step in specified thread\r\n            (current thread, if none specified), stepping over calls.\r\nnext     -- ('thread step-over')  Source level single step in specified thread\r\n            (current thread, if none specified), stepping over calls.\r\np        -- ('expression --')  Evaluate a C/ObjC/C++ expression in the current\r\n            program context, using variables currently in scope.\r\npo       -- ('expression -o  --')  Evaluate a C/ObjC/C++ expression in the\r\n            current program context, using variables currently in scope.\r\nprint    -- ('expression --')  Evaluate a C/ObjC/C++ expression in the current\r\n            program context, using variables currently in scope.\r\nq        -- ('quit')  Quit out of the LLDB debugger.\r\nr        -- ('process launch --')  Launch the executable in the debugger.\r\nrun      -- ('process launch --')  Launch the executable in the debugger.\r\ns        -- ('thread step-in')  Source level single step in specified thread\r\n            (current thread, if none specified).\r\nsi       -- ('thread step-inst')  Single step one instruction in specified\r\n            thread (current thread, if none specified).\r\nstep     -- ('thread step-in')  Source level single step in specified thread\r\n            (current thread, if none specified).\r\nup       -- ('_regexp-up')  Go up \"n\" frames in the stack (1 frame by default).\r\nx        -- ('memory read')  Read from the memory of the process being debugged.\r\n\r\nFor more information on any particular command, try 'help <command-name>'."
    email: borkwareLLC@gmail.com
    modified: "2011-08-28T05:51:47.372537Z"
    number: "10035461"
    number_intvalue: 10035461
    originated: 8/27/2011
    parent_number: '&{NULL_VALUE}'
    product: developer tools
    product_version: LLDB-69
    reproducible: n/a
    resolved: ""
    status: open
    title: '[lldb] please hide alias definitions under a different help command'
