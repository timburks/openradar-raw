apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "9209110"
    labels:
        datastore_id: "1151402"
data:
    classification: ""
    created: "2011-03-30T18:15:54.467128Z"
    description: "Summary:\r\n\r\nBackground:\r\nMac OSX Server 10.6.7 serving AFP group folders, and serving a Time Machine backup location. Clients are a mixture of 10.6.7 and 10.5.8.\r\n\r\nMost users have network home folders, but a few have portable home directories, and a few have laptops. Many more users than actual workstations (\"hot bunking\" so to speak).\r\n\r\nAs the Admin, I have a local admin account on each workstation. User accounts don't have admin priveledges.\r\n\r\nMy local admin userID and credentials are NOT the same as the admin account ID and credentials on the server (to prevent the compromise of a single workstation from getting admin control over the server.) And my server credentials are NOT stored in the local client keychain.\r\n\r\nUsing Workgroup Manager, I am pushing Time Machine settings to each client. The settings I am pushing are consistent with those examples in the Apple Manuals (specify URL of the time machine backup destination, but not username). The exact info I'm pushing is as follows \"afp://server4.local/timemachine3\".  (The server is on a private network and not publically-accessible, so no fancy FQDN is being used, and doesn't appear to be related to my issue.)  These Workgroup Manager settings worked in getting each Client Machine to start backing up to the server destination as specified and expected.\r\n\r\nWe have strict password policies (controlled thru Workgroup Manager) that require changing passwords periodically. The users are doing this as expected.\r\n\r\nThe Problem:\r\nWhen the first Time Machine backup ran for each client workstation, it used the username and password of whichever user was logged in at that time to establish the credentials for that TM backup. On the server, I see those users as the owners of the TM backup sparseimages associated with each client machine.\r\n\r\nOn the clients, (using my local admin priveledges) I see an entry in the \"System\" keychain with that users's password that was in effect on the day the TM backup was first created.  TM backups continue as expected without incident.\r\n\r\nOnce the user changes their password (per the periodic password change policy), the TM password stored in the System keychain DOESN'T update. All TM backups from that day forward fail due to the password mismatch.\r\n\r\nI can manually correct this, one machine at a time, by manually updating the TM password that is stored in the \"System\" Keychain using my local Admin credentials, but that is not an optimal solution (by far).\r\n\r\nI have also tried creating the TM backup using my SERVER admin credentials, but this hasn't worked reliably for me in the past either (I'm not sure why, but I suspect it is due to AFP not working right when more than one userID is connecting to the server from the same client), and also leaves my server admin credentials on all the client machines (some of which are laptops and travel a lot), which is a security risk I am not willing to take.\r\n\r\nThe Apple Server manuals seem to suggest that backing up to a server offering Time Machine backups should \"just work\" without all this hassle, including backing up all local client files, regardless of who is logged in, and how the authentication is made. \r\n\r\nSteps to Reproduce:\r\n1. Push TM destination/policy to client workstations thru workgroup manager.\r\n2. User logs into client workstation.  First Time Machine backup runs.  A Keychain item is silently added to the \"System\" keychain for that workstation, with the logged-in user's current password.\r\n3. Sometime later, the user changes their login password, thru normal means.\r\n4. Time Machine backups fail from this point forward, due to outdated password still being stored in the \"System\" Keychain.\r\n\r\n\r\n\r\nExpected Results:\r\nIMHO, Time Machine should generate and use a certificate for authentication between client and server, not the password of whichever user just happened to be logged in at the moment the first TM backup was run.\r\n\r\nAlso, storing the currently logged-in user's login password in the \"System\" Keychain when the first TM backup is kicked-off seems like a security flaw.  Suppose I'm the admin of the mac, but my user has \"priveledged\" information that they want to keep private, perhaps by using FileVault to protect their home folder.  \r\n\r\nAs the admin, I can compromise their FileVault information by seeing that their password was stored in the \"System\" Keychain under an item called Time Machine.\r\n\r\nActual Results:\r\nTM not working after user changes password.\r\nUser's password exposed to admin, by being stored in the \"System\" Keychain, where the admin can view it.\r\n\r\n\r\nRegression:\r\n\r\nNotes:\r\nI'm filing this as a \"Serious Bug\" because it prevents Time Machine from reliably backing up multiple workstations to a OSX Server, if a periodic password change policy is used.\r\nI also think this should be considered for a \"Security Flaw\" since it is possible for someone who might be a network admin to expose individual's login password, and thus unlock their FileVaults."
    email: cpragman@gmail.com
    modified: "2011-08-28T05:37:20.261502Z"
    number: "9209110"
    number_intvalue: 9209110
    originated: 03/30/2011
    parent_number: '&{NULL_VALUE}'
    product: OSX Server
    product_version: 10.6.7 (and earlier I suspect)
    reproducible: Yes
    resolved: ""
    status: Open
    title: Time Machine backup to OSX Server fails after user changes their login password
