apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "9149683"
    labels:
        datastore_id: "1141405"
data:
    classification: Serious Bug
    created: "2011-03-17T18:59:42.776972Z"
    description: "Summary: The documentation viewer no longer shows a Table of Contents\r\n\r\nSteps to Reproduce:\r\n\r\n1) Open the \"Apple Human Interface Guidelines\"\r\n2) Look for a Table of Contents.\r\n3) Open the dropdown arrows in the sidebar and look for \"Managing Complexity in Your Software\"\r\n4) Use the Jump Bar menus to find \"Managing Complexity in Your Software\"\r\n\r\nExpected Results:\r\n\r\nIn step 2, you should see a Table of Contents for this chapter-based documentation.\r\n\r\nIn step 3, you should see the section listed in the sidebar.\r\n\r\nIn step 4, you should be able to see other chapters.\r\n\r\nActual Results:\r\n\r\nIn step 2, you don't see a Table of Contents.\r\n\r\nIn step 3, you don't see the section listed in the sidebar.\r\n\r\nIn step 4, you can't see the other chapters because they are covered by other menus.\r\n\r\nRegression:\r\n\r\nThis is a regression from Xcode 3.\r\n\r\nNotes:\r\n\r\nThe chapter-based documents are the crown jewels of Apple's developer documentation. Titles like The Objective-C Programming Language, iPhone Human Interface Guidelines, and the Cocoa Fundamentals Guide are essential reading for all developers, both beginner and advanced. As I began learning about Xcode 4, of course I turned to the excellent User Guide.\r\n\r\nThese guides typically span many chapters when sections that cover a wide range of topics. And this is how you navigate through those chapters:\r\n\r\nhttp://furbo.org/wp-content/uploads/2011/03/Unmanaged_complexity.png\r\n\r\nThe pity here is that someone has forgotten that a Table of Contents tells a much more important story than the individual chapters. A roadmap lets you visit the destinations efficiently.\r\n\r\nTo get an idea of how painful this is, try finding the recommended Singleton implementation in the Cocoa Fundamentals Guide using the Jump Bar.\r\n\r\nOf course the documentation viewer has a search function, but even that's a bit laborious because you have to click on a lot of disclosure triangles to find the right item in the results. Why aren't the relevant results opened automatically? (And, yes, option clicking the disclosure triangle can be used to achieve this goal, but the question still remains: why isn't this the default action?)\r\n\r\nThe root of the problem here and with the method names in the class documentation, is that a deep hierarchy is too hard to navigate. Present the information in a single list and it becomes much more useful. Imagine how bad the code editor navigation would be if it presented a hierarchy based upon classes, properties and methods. It's flattened into a single menu for a reason: and those same reasons exist in the documentation viewer.\r\n\r\nThe Jump Bar is a great addition to Xcode, but it's true power lies in having a predictable end point. With code, that end point is a function, property or method. With documentation, that end point is elusive: it varies depending both with the type and the structure of the documentation you're viewing. And that's a real problem when you're looking for something.\r\n\r\nMore information (including screenshots) at: http://furbo.org/?p=334"
    email: craig.hockenberry@gmail.com
    modified: "2011-08-28T05:37:30.722235Z"
    number: "9149683"
    number_intvalue: 9149683
    originated: ""
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 4.0 / 4A304a
    reproducible: Always
    resolved: ""
    status: Open
    title: 'BUG: The documentation viewer does not show a Table of Contents'
