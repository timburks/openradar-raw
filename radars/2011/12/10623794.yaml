apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "10623794"
    labels:
        datastore_id: "1472405"
data:
    classification: Other Bug
    created: "2011-12-23T14:48:06.593401Z"
    description: "Summary:\r\n\r\nSecKeyGetBlockSize is documented to return \"the block length associated with the key in bytes.\" However, in reality it returns the logical key size, not the block length. The logical key size does not equal the block size for many of the symmetric key types. The function should be fixed to return correct values.\r\n\r\nFurthermore, SecKeyGetBlockSize returns the key size in bits, not bytes. Either the documentation should be changed accordingly or the function should be fixed to return values in bytes. Returning the block size in bytes would be more helpful.\r\n\r\nSteps to Reproduce:\r\n\r\nBuild and run the attached project. It creates an empty temporary keychain, and adds four symmetric keys and an asymmetric key pair to it (3DES, AES-128, AES-192,  AES-256 and a 2048-bit RSA key pair).  For all five keys, the result of SecKeyGetBlockSize is printed on the console.\r\n\r\nExpected Results:\r\n\r\n3DES block size is 64 bits, expected 8 bytes (64 bits)\r\nAES-128 block size is 128 bits, expected 16 bytes (128 bits)\r\nAES-192 block size is 128 bits, expected 16 bytes (128 bits)\r\nAES-256 block size is 128 bits, expected 16 bytes (128 bits)\r\nRSA block size is 2048 bits, expected 256 bytes (2048 bits)\r\n\r\nActual Results:\r\n\r\n2011-12-23 15:27:21.000 KeychainBugs[43582:707] 3DES block size is 192 bits, expected 8 bytes (64 bits)\r\n2011-12-23 15:27:21.058 KeychainBugs[43582:707] AES-128 block size is 128 bits, expected 16 bytes (128 bits)\r\n2011-12-23 15:27:21.249 KeychainBugs[43582:707] AES-192 block size is 192 bits, expected 16 bytes (128 bits)\r\n2011-12-23 15:27:21.265 KeychainBugs[43582:707] AES-256 block size is 256 bits, expected 16 bytes (128 bits)\r\n2011-12-23 15:27:23.821 KeychainBugs[43582:707] RSA block size is 2048 bits, expected 256 bytes (2048 bits)\r\n\r\nAll results except AES-128 and RSA are wrong. AES-192 is particularly bad, because the returned value isn't even a multiple of the true block size.\r\n\r\nRegression:\r\n\r\nUnknown.\r\n\r\nNotes:\r\n\r\n\r\n#import <Foundation/Foundation.h>\r\n#import <Security/Security.h>\r\n\r\nstatic void ReportError(OSStatus status, NSString *message, ...) __attribute__((noreturn));\r\n\r\nstatic void \r\nReportError(OSStatus status, NSString *message, ...)\r\n{\r\n    va_list args;\r\n    va_start(args, message);\r\n    NSString *bakedMessage = [[[NSString alloc] initWithFormat:message arguments:args] autorelease];\r\n    va_end(args);\r\n    CFStringRef errorString = SecCopyErrorMessageString(status, NULL);\r\n    NSLog(@\"%@: %@ (%d)\", bakedMessage, (errorString ? (NSString *)errorString : @\"unknown error\"),  (int)status);\r\n    if (errorString)\r\n        CFRelease(errorString);\r\n    exit(1);\r\n}\r\n\r\nstatic SecKeychainRef\r\nMakeKeychain(NSString *path)\r\n{\r\n    if ([[NSFileManager defaultManager] fileExistsAtPath:path]) {\r\n        [[NSFileManager defaultManager] removeItemAtPath:path error:NULL];\r\n    }\r\n    \r\n    SecKeychainRef keychain = NULL;\r\n    OSStatus status = SecKeychainCreate([path fileSystemRepresentation], 6, \"foobar\", NO, NULL, &keychain);\r\n    if (status)\r\n        ReportError(status, @\"Can't create keychain\");\r\n    [(id)keychain autorelease];\r\n    return keychain;\r\n}\r\n\r\nstruct Keypair {\r\n    SecKeyRef publicKey;\r\n    SecKeyRef privateKey;\r\n};\r\n\r\nstatic struct Keypair\r\nMakeRSAKeyPair(NSString *label, SecKeychainRef keychain)\r\n{\r\n    OSStatus status;\r\n    \r\n    NSMutableDictionary *parameters = [NSMutableDictionary dictionary];\r\n    \r\n    [parameters setObject:kSecAttrKeyTypeRSA forKey:kSecAttrKeyType];\r\n    [parameters setObject:[NSNumber numberWithInt:2048] forKey:kSecAttrKeySizeInBits];\r\n    [parameters setObject:label forKey:kSecAttrLabel];\r\n    if (keychain) {\r\n        [parameters setObject:(id)keychain forKey:kSecUseKeychain];\r\n        [parameters setObject:(id)kCFBooleanTrue forKey:kSecAttrIsPermanent];\r\n    }\r\n    \r\n    SecKeyRef spublicKey = NULL;\r\n    SecKeyRef sprivateKey = NULL;\r\n    status = SecKeyGeneratePair((CFDictionaryRef)parameters, &spublicKey, &sprivateKey);\r\n    if (status)\r\n        ReportError(status, @\"Can't generate key pair\");\r\n    [(id)spublicKey autorelease];\r\n    [(id)sprivateKey autorelease];\r\n    \r\n    return (struct Keypair){ .publicKey = spublicKey, .privateKey = sprivateKey };\r\n}\r\n\r\nstatic SecKeyRef\r\nMake3DESKey(NSString *label, SecKeychainRef keychain)\r\n{\r\n    NSMutableDictionary *parameters = [NSMutableDictionary dictionary];\r\n    [parameters setObject:[NSNumber numberWithInt:192] forKey:kSecAttrKeySizeInBits];\r\n    [parameters setObject:kSecAttrKeyType3DES forKey:kSecAttrKeyType];\r\n    [parameters setObject:label forKey:kSecAttrLabel];\r\n    [parameters setObject:label forKey:kSecAttrApplicationTag];\r\n    if (keychain) {\r\n        [parameters setObject:(id)keychain forKey:kSecUseKeychain];\r\n        [parameters setObject:(id)kCFBooleanTrue forKey:kSecAttrIsPermanent];\r\n    }\r\n    \r\n    CFErrorRef cferror = NULL;\r\n    SecKeyRef skey = SecKeyGenerateSymmetric((CFDictionaryRef)parameters, &cferror);\r\n    if (skey == NULL) {\r\n        ReportError((OSStatus)CFErrorGetCode(cferror), @\"Can't generate symmetric key\");\r\n        CFRelease(cferror);\r\n    }\r\n    [(id)skey autorelease];\r\n    return skey;\r\n}\r\n\r\nstatic SecKeyRef\r\nMakeAESKey(NSString *label, int keySize, SecKeychainRef keychain)\r\n{\r\n    NSMutableDictionary *parameters = [NSMutableDictionary dictionary];\r\n    [parameters setObject:[NSNumber numberWithInt:keySize] forKey:kSecAttrKeySizeInBits];\r\n    [parameters setObject:kSecAttrKeyTypeAES forKey:kSecAttrKeyType];\r\n    [parameters setObject:label forKey:kSecAttrLabel];\r\n    [parameters setObject:label forKey:kSecAttrApplicationTag];\r\n    if (keychain) {\r\n        [parameters setObject:(id)keychain forKey:kSecUseKeychain];\r\n        [parameters setObject:(id)kCFBooleanTrue forKey:kSecAttrIsPermanent];\r\n    }\r\n    \r\n    CFErrorRef cferror = NULL;\r\n    SecKeyRef skey = SecKeyGenerateSymmetric((CFDictionaryRef)parameters, &cferror);\r\n    if (skey == NULL) {\r\n        ReportError((OSStatus)CFErrorGetCode(cferror), @\"Can't generate symmetric key\");\r\n        CFRelease(cferror);\r\n    }\r\n    [(id)skey autorelease];\r\n    return skey;\r\n}\r\n\r\nint \r\nmain (int argc, const char *argv[])\r\n{\r\n    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];\r\n\r\n    NSString *keychainPath = [NSTemporaryDirectory() stringByAppendingPathComponent:@\"Test Keychain.keychain\"];\r\n    SecKeychainRef keychain = MakeKeychain(keychainPath);\r\n\r\n    SecKeyRef tripleDESKey = Make3DESKey(@\"Test key (3DES)\", keychain);\r\n    SecKeyRef aes128Key = MakeAESKey(@\"Test key (AES-128)\", 128, keychain);\r\n    SecKeyRef aes192Key = MakeAESKey(@\"Test key (AES-192)\", 192, keychain);\r\n    SecKeyRef aes256Key = MakeAESKey(@\"Test key (AES-256)\", 256, keychain);\r\n    struct Keypair keypair = MakeRSAKeyPair(@\"Test key (RSA)\", keychain);\r\n\r\n    NSLog(@\"3DES block size is %lu bits, expected 8 bytes (64 bits)\", SecKeyGetBlockSize(tripleDESKey));\r\n    NSLog(@\"AES-128 block size is %lu bits, expected 16 bytes (128 bits)\", SecKeyGetBlockSize(aes128Key));\r\n    NSLog(@\"AES-192 block size is %lu bits, expected 16 bytes (128 bits)\", SecKeyGetBlockSize(aes192Key));\r\n    NSLog(@\"AES-256 block size is %lu bits, expected 16 bytes (128 bits)\", SecKeyGetBlockSize(aes256Key));\r\n    NSLog(@\"RSA block size is %lu bits, expected 256 bytes (2048 bits)\", SecKeyGetBlockSize(keypair.publicKey));\r\n\r\n    [pool drain];\r\n    return 0;\r\n}"
    email: Karoly.Lorentey@gmail.com
    modified: "2011-12-23T14:48:06.593817Z"
    number: "10623794"
    number_intvalue: 10623794
    originated: 23-Dec-2011 03:45 PM
    parent_number: '&{NULL_VALUE}'
    product: Mac OS X
    product_version: 10.7.2 (11C73)
    reproducible: Always
    resolved: ""
    status: Open
    title: SecKeyGetBlockSize does not actually return the block size
