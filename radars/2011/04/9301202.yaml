apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "9301202"
    labels:
        datastore_id: "1173404"
data:
    classification: Feature (New)
    created: "2011-04-18T22:09:21.264101Z"
    description: "19-Apr-2011 12:07 AM Emanuele Vulcano:\r\nThe short version: Please allow apps to \"grow a popover\" from their multitasking tile like Print Center does.\r\n\r\nThe long version:\r\n\r\niOS has always been weak in those tasks that require multiple applications to be performed. In particular, there is no way to interact with multiple applications at once without entirely switching to another application. Often, users do not want to interact with the entirety of an app if they plan to \"peek\" at it or use it alongside another; iOS forces them to. Other platforms solve this problem in several ways, such as allowing apps to have \"widgets\" that live in a common launcher space. This does not mesh well with the app-centric model of iOS, however. This enhancement request proposes a way that, in the poster's opinion, _does_ mesh well.\r\n\r\niOS apps currently have a single mode of use, in which an app uses the entire screen. This proposal adds another 'transient' mode of use, where an application can show a portion of itself temporarily onscreen, possibly partially overlaying another application. The portion is provided by the app as a view controller; the view controller is displayed onscreen in a popover pointing to the application's multitasking tile, or in a similar way that ties it explicitly to the app.\r\n\r\nThe above could be implemented as follows:\r\n\r\n • Apps supporting transient usage mode declare themselves in their Info.plist files with an appropriate key.\r\n\r\n • At any time, an event occurs that would cause the switch to the application. For legacy applications, this causes a normal app switch. For transient apps, the OS:\r\n  - launches the app in the background; and\r\n  - optionally, asks the application delegate how to handle the incoming interaction, for instance:\r\n\r\n- (UIApplicationModes) modesForApplication:(UIApplication*) app openingURL:(NSURL*) url sourceApplication:(NSString*) app annotation:(id) ann;\r\n{\r\n\t// for example, this application wants to perform a fullscreen switch only if\r\n\t// files are opened.\r\n\t\r\n\tif ([url isFileURL])\r\n\t\treturn UIApplicationModeSwitch; // can only switch\r\n\telse\r\n\t\treturn UIApplicationModeSwitch | UIApplicationModeTransient; // can show a transient view\t\t\r\n}\r\n\r\n  • If the app supports a transient view, the OS requests a view controller for display from the app delegate:\r\n\r\n- (UIViewController*) transientViewControllerForApplication:(UIApplication*) app;\r\n{\r\n\treturn [[[SomeViewController alloc] initWithNibName:@\"SomeViewController\" bundle:nil] autorelease];\r\n}\r\n\r\n  • The OS then displays the view appropriately. For example:\r\n   - on iPad, the multitasking tray opens, then a popover appears pointing to the application's tile on the tray. The popover contains the view controller. Touching outside the popover causes it to be dismissed, hiding the view. This is similar to the behavior of the Print Center tile provided by AirPrint.\r\n   - on iPhone, the multitasking tray opens to a higher height than normal. The view may appear in the extra space so shown. An arrow (similar to the one used for folders in Springboard) may point to the application tile in the tray. Dismissing the multitasking tray also dismisses this view.\r\n\r\nAs long as the view is displayed, the transient app is running; as far as the clients of the UIApplication singleton in it can tell, it is in the foreground and inactive. The app pushed up by the multitasking tray is also running, in the foreground and inactive. Dismissing the view causes the transient app to move to the background. The view could also have a \"full screen\" button (for example, in the popover's navigation bar). If tapped, the button would cause a transition to occur, which would end with a switch to the transient app (now taking the entire screen); just like any normal app switch, this would cause the previous application to move to the background.\r\n\r\nTo maintain a consistent experience, apps may be forbidden from invoking their transient view directly. The appaerance could be tied to events that would normally cause a fullscreen app switch. For example:\r\n - opening a URL;\r\n - opening a file;\r\n - the user tapping an alert button on a local or remote notification.\r\nThe user might also be able to invoke the transient view himself, for instance through a control included near the app's tile in the multitasking tray, or by touching a transient-capable app in the tray (which would cause the transient view to appear instead of switching to the entire app; a second touch would switch to the app). The app could also let the user access a transient view by posting a local notification.\r\n\r\nThe following are a set of use cases where this capability would be useful:\r\n\r\n - A file transfer application might accept files in the background. When a file arrives, the application could post a local notification. Opening it, only a quick \"tray\" containing the newly received files appears as a transient view. The user can quickly delete or open files, or return to their previous task.\r\n\r\n - A multiplayer game could have a long-running in-game event; for instance, a RPG could allow a player to craft a weapon of some sort in a set amount of time. The user may switch away from the game and perform other tasks, while still being able to invoke the transient view to check the status or his in-game craft action.\r\n\r\n - A IM application might allow the user to chat while performing another task by using the transient view to display the conversation.\r\n\r\n - A clipboard manager app might allow the user to invoke a transient view where he can save the current contents of the pasteboard, or copy previously saved items.\r\n\r\n - An iPad application could use its iPhone view controllers to present a smaller but full-featured version of itself to the user, allowing him full access to app features without leaving the current task."
    email: me@infinite-labs.net
    modified: "2011-08-28T05:37:02.377956Z"
    number: "9301202"
    number_intvalue: 9301202
    originated: 19-Apr-2011 12:07 AM
    parent_number: '&{NULL_VALUE}'
    product: iPhone SDK
    product_version: "4.3"
    reproducible: Not Applicable
    resolved: ""
    status: Open
    title: Please allow iOS apps to "grow" popovers from the multitasking tray.
