apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "9336975"
    labels:
        datastore_id: "1180404"
data:
    classification: Serious bug
    created: "2011-04-26T09:00:17.540181Z"
    description: "Summary:\r\n\r\nsetitimer with ITIMER_VIRTUAL has no effect on 64-bit kernel Mac OS X\r\n10.6.7. ITIMER_REAL works.\r\n\r\nSteps to Reproduce:\r\n\r\nSee attached program.\r\n\r\nExpected Results:\r\n\r\nexpect SIGVTALRM to happen, i.e. V is written by test program until\r\ninterrupted by CTRL+C.\r\n\r\nTranscript from a machine (with 32-bit kernel) where it works as it\r\nshould (real user name replaced with xxx):\r\n\r\nsekretariat:~ xxx$ gcc -version\r\ni686-apple-darwin10-gcc-4.2.1: no input files\r\nsekretariat:~ xxx$ gcc -Wall -Werror timer.c -o timer && ./timer\r\nVVVVVVVVVVVVVVVVVVVVVVVVV^C\r\nsekretariat:~ xxx$ uname -a\r\nDarwin sekretariat.local 10.7.0 Darwin Kernel Version 10.7.0: Sat Jan 29 15:17:16 PST 2011; root:xnu-1504.9.37~1/RELEASE_I386 i386\r\nsekretariat:~ xxx$ date\r\nTue Apr 19 16:29:09 CEST 2011\r\n\r\nActual Results:\r\nSIGVTALRM is never signalled, i.e. V is never written\r\n\r\nTranscript from failing machine (with 64-bit kernel):\r\nbalrog:PrologTestFiles xxx$ gcc --version\r\ni686-apple-darwin10-gcc-4.2.1 (GCC) 4.2.1 (Apple Inc. build 5664)\r\nCopyright (C) 2007 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\r\nbalrog:PrologTestFiles xxx$ gcc -Wall -Werror timer.c -o timer && ./timer\r\n^C\r\nbalrog:PrologTestFiles xxx$ uname -a\r\nDarwin balrog.local 10.7.0 Darwin Kernel Version 10.7.0: Sat Jan 29 15:16:10 PST 2011; root:xnu-1504.9.37~1/RELEASE_X86_64 x86_64\r\nbalrog:PrologTestFiles xxx$ date\r\nDi 19 Apr 2011 15:39:53 CEST\r\n\r\nRegression:\r\n\r\nThis seems to work with 32-bit kernels. Running on a VMWare guest (Mac\r\nOS X Server 10.6.7) I can reproduce the problem when it boots with\r\n64-bit kernel but the problem goes away when I reboot the same VMWare\r\nguest with a 32-bit kernel (even without recompiling the timer\r\nexecutable). Note that the above systems refer to real machines, not\r\nVMWare guests.\r\n\r\nNotes:\r\n\r\nThis is a serious bug for us, even though there is a workaround (use 32-bit kernels), since our product (a programming language runtime) is embedded in our customers products and we have no way of informing the end users of the workaround.\r\n\r\n/* timer.c BEGIN */\r\n/*\r\n\r\nThis program demonstrates a bug where setitimer ITIMER_VIRTUAL does\r\nnot seem to have any effect (seen on Mac OS X 10.6.7).\r\n\r\n[PM] Slightly modified from a program found on the net, originally\r\nwritten by Marc Feeley.\r\n\r\nCompile and run as\r\n\r\n gcc -Wall -Werror timer.c -o timer && ./timer\r\n\r\nit should write one V on stdout every 1/10 of a second.\r\n\r\nor\r\n\r\n gcc -DITIMER_SECS=1 timer.c -o timer && ./timer\r\n\r\nit should write one V on stdout about once every second.\r\n\r\nWhen the bug occurs the program just hangs.\r\n\r\nThe program can be built to use ITIMER_REAL instead, with\r\n\r\n gcc -DUSE_ITIMER_REAL timer.c -o timer && ./timer\r\n\r\nthis has not been seen to hang.\r\n\r\n*/\r\n\r\n#include <sys/time.h>\r\n#include <signal.h>\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <unistd.h>\r\n#include <errno.h>\r\n\r\n#ifndef ITIMER_SECS\r\n#define ITIMER_SECS 0\r\n#endif\r\n#ifndef ITIMER_USECS\r\n#define ITIMER_USECS 100000\r\n#endif  /* ITIMER_USECS */\r\n\r\n#define CHECK(EXPR) do{                         \\\r\n   if ((EXPR) == -1) {                         \\\r\n     int e = errno;                            \\\r\n     fprintf(stderr, \"%s:%d ERROR errno=%d\\n\", \\\r\n             __FILE__, (int)__LINE__, e);      \\\r\n     fflush(stderr);                           \\\r\n     abort();                                  \\\r\n   }                                           \\\r\n } while (0)\r\n\r\nvoid heartbeat_interrupt_handler (int sig)\r\n{\r\n#ifdef USE_ITIMER_REAL\r\nwrite (STDOUT_FILENO, \"R\", 1);\r\n#else\r\nwrite (STDOUT_FILENO, \"V\", 1);\r\n#endif\r\n}\r\n\r\nint main (int argc, char *argv[])\r\n{\r\nstruct itimerval tv;\r\nint secs = ITIMER_SECS;\r\nint usecs = ITIMER_USECS;\r\n\r\n#ifdef USE_ITIMER_REAL\r\nint HEARTBEAT_ITIMER = ITIMER_REAL;\r\nint SIG = SIGALRM;\r\n#else\r\nint HEARTBEAT_ITIMER = ITIMER_VIRTUAL;\r\nint SIG = SIGVTALRM;\r\n#endif\r\n\r\nstruct sigaction act;\r\nact.sa_handler = heartbeat_interrupt_handler;\r\nact.sa_flags = 0;\r\nCHECK(sigemptyset(&act.sa_mask));\r\nCHECK(sigaction(SIG, &act, 0));\r\n\r\ntv.it_interval.tv_sec  = secs;\r\ntv.it_interval.tv_usec = usecs;\r\ntv.it_value.tv_sec     = secs;\r\ntv.it_value.tv_usec    = usecs;\r\nCHECK(setitimer(HEARTBEAT_ITIMER, &tv, 0));\r\n\r\nfor (;;)\r\n  {\r\n    /* keep CPU 100% busy */\r\n  }\r\n\r\nreturn 0;\r\n}\r\n\r\n/* timer.c END */"
    email: Per.Mildner.usenet@gmail.com
    modified: "2013-10-23T22:30:22.029506Z"
    number: "9336975"
    number_intvalue: 9336975
    originated: 26-Apr-2011 10:49 AM
    parent_number: '&{NULL_VALUE}'
    product: Mac OS X
    product_version: 10.6.7
    reproducible: Always
    resolved: ""
    status: Closed
    title: setitimer with ITIMER_VIRTUAL has no effect on 64-bit kernel
