apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "8772319"
    labels:
        datastore_id: "1216407"
data:
    classification: Feature (New)
    created: "2011-06-15T14:16:41.574323Z"
    description: "Problem Summary:\r\nThe Security API provides a very nice way for applications to store passwords in a secure way by having them written into keychains. The fact that only the application that has written a password to a keychain may later on access it (ACL restriction) is a great benefit in general, but it is a real pain if you want to develop applications that \"work\" on user's keychains, e.g. syncing passwords with some non OS X password services, transferring passwords between keychains, etc. In that case each access to the password of a password entry (or the private key of a private key entry) causes a dialog to be displayed. While these dialogs are a security feature in general, there are situations where they make useful software development impossible, since I cannot expect a user with 100+ items in a keychain to hit that dialog button 100+ times to allow an application to read all its password.\r\n\r\nSolution:\r\nThe solution is as simple as adding two tiny features. First one is bulk operation. Instead of forcing the app to request permission for each item, the app can perform a bulk operation and the dialog will ask the user if the application in question may access 100+ items in the keychain (allowing the user to see a list of all items, if he really cares for it). This way the user once gives permission, not 100+ times. The second solution is even better and even more simple to integrate into the current code: A keychain has a *global ACL* with trusted applications. Trusted applications are allowed to bypass the ACLs for individual keychain items. If an application is in the global ACL, access is equal as if it was in the ACL of every existing keychain item. I know that this is somewhat risky, but adding an app to the global ACL doesn't have to be easy or user friendly. If it is necessary to perform complicated steps via keychain access, that would be acceptable, after all a user has to perform those steps only once in most cases. Just like item ACLs the hash of the application is verified, so when it changes, the system will ask the user again. A nice byproduct of the global ACL is that certain command line utilities can be added to that list, finally allowing certain keychain operations on headless systems that are currently really painful or impossible to implement.\r\n\r\nThis feature has been missed by developers for as long as keychain exists, so over a decade. Already 2006 people like Ken McLeod or Perry the Cynic have noted on the CDSA mailing list that those kind of features are really missing, e.g.\r\n\r\nhttp://lists.apple.com/archives/apple-cdsa/2006/Aug/msg00013.html\r\n\r\nand there are plenty of developers requesting them on that list over and over again, and still after so many years, nothing has happened, nothing has been improved. With the Internet always around and with services in the cloud, a locked up system like the current security API and keychains is just outdated. And if Apple is not dealing with that issue, I'm afraid that sooner or later some alternative API from some company like 1Password.com will be offered and all major applications will migrate to that API istead.\r\n\r\nI know that you can write CDSA plugins, but those are not treated equally in all aspects and would not be transparent to all applications that use Sec* API calls. Further a storage plugin would not solve the problems, since an application still has to understand the internal \"format\" of a keychain file... in that case the app can as well directly operate on those files and bypass the security framework altogether."
    email: m.hanauska@gmail.com
    modified: "2011-08-28T05:38:42.561395Z"
    number: "8772319"
    number_intvalue: 8772319
    originated: 15-Dec-2010
    parent_number: '&{NULL_VALUE}'
    product: Mac OS X
    product_version: Any
    reproducible: ""
    resolved: ""
    status: Open
    title: Allow Bulk Operations on Keychains and Allow Trusted Helper Apps for Keychains
