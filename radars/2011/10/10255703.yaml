apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "10255703"
    labels:
        datastore_id: "1385401"
data:
    classification: Serious bug
    created: "2011-10-08T18:42:21.243302Z"
    description: "Summary:\r\n\r\nAssigning an instance variable through an expression statement will release the intermediate prematurely, and then crash as the now-deleted object is retained by the instance variable assignment.\r\n\r\nReduced case:\r\n\r\n#import <Foundation/Foundation.h>\r\n\r\n@interface Hej : NSObject { id level; } @end\r\n@implementation Hej \r\n-(void)test;\r\n{\r\n    level = ({id temp = [NSObject new]; temp; });\r\n}\r\n@end\r\n\r\nint main (int argc, const char * argv[]) {\r\n    @autoreleasepool {\r\n        [[Hej new] test];\r\n    }\r\n    return 0;\r\n}\r\n\r\nRegression:\r\nAssigning to a local variable and then the ivar works fine.\r\n\r\nNotes:\r\nCompiler is \"Apple LLVM Compiler 3.0\".\r\n\r\nYou might also be asking yourself, \"why are you using GCC compiler extensions? They make my head hurt.\". I love expression statements, because they allow me to write things like:\r\n  #define $notNull(x) ({ __typeof(x) xx = (x); NSAssert(xx != nil, @\"Must not be nil\"); xx; })\r\n\r\nused like\r\n  [dict setObject:$notNull([foo bar]) forKey:@\"thing\"];"
    email: joachimb@gmail.com
    modified: "2011-10-08T18:42:21.243626Z"
    number: "10255703"
    number_intvalue: 10255703
    originated: 08-Oct-2011 08:41 PM
    parent_number: '&{NULL_VALUE}'
    product: iPhone SDK
    product_version: Xcode 4.2 GM/4D199
    reproducible: Always
    resolved: ""
    status: Open
    title: ARCing instance through expression statement to ivar crashes
