apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "7679737"
    labels:
        datastore_id: "160415"
data:
    classification: Performance
    created: "2010-02-23T14:59:55.993913Z"
    description: "Summary: \r\nIf you have a NSFetchedResultsController, you specify a sectionNameKeyPath, and your fetch request has a fetchBatchSize set (like the default template for a Navigation app with Core Data), your initial fetch performance can seriously degrade since the NSFetchedResultsController needs the whole result set to generate the table index. The result set is fetched in batches instead of in all at once, which yields worse performance than simply fetching the entire data set in a single query.\r\n\r\nSteps to Reproduce:\r\n1. Create a new project using the iPhone Navigation-based Application template and select Use Core Data for Storage.\r\n2. Create a new NSManagedObject entity that contains a string attribute and generate the class files for this entity.\r\n3. Add a new method to the the generate class file that returns the first letter of the string attribute. This will be used as the section index key path.\r\n4. Set the NSFetchedResultsController's sectionNameKeyPath property to the key path for the method generate in step 3.\r\n5. Enable Core Data SQL Debug logging for the app - -com.apple.CoreData.SQLDebug 1\r\n6. Run\r\n\r\nExpected Results:\r\nThe table view will be populated in an efficient manner, using batching where appropriate.\r\n\r\nActual Results:\r\nThe data is read from the data store in an inefficient manner - since the whole data set is needed, the data store is queries until all results have been returned, using the batch size specified for the NSFetchRequest. This essentially defeats the purpose of batching, since running multiple queries can be less efficient than running a single large query.\r\n\r\nHere's some SQL Debug output:\r\n\r\n2010-02-23 09:54:59.856 NSFetchRequestBatch[14304:207] CoreData: annotation: Connecting to sqlite database file at \"/Users/eblair/Library/Application Support/iPhone Simulator/User/Applications/B66748CA-A099-4890-BF95-9202483C46F6/NSFetchRequestBatch.app/NSFetchRequestBatch.sqlite\"\r\n2010-02-23 09:54:59.867 NSFetchRequestBatch[14304:207] CoreData: sql: pragma cache_size=1000\r\n2010-02-23 09:54:59.868 NSFetchRequestBatch[14304:207] CoreData: sql: SELECT Z_VERSION, Z_UUID, Z_PLIST FROM Z_METADATA\r\n2010-02-23 09:54:59.884 NSFetchRequestBatch[14304:207] CoreData: sql: SELECT 0, t0.Z_PK FROM ZDICTENTRY t0 ORDER BY t0.ZWORD COLLATE NSCollateLocaleSensitiveNoCase \r\n2010-02-23 09:54:59.922 NSFetchRequestBatch[14304:207] CoreData: annotation: sql connection fetch time: 0.0373s\r\n2010-02-23 09:54:59.923 NSFetchRequestBatch[14304:207] CoreData: annotation: total fetch execution time: 0.0389s for 2350 rows.\r\n2010-02-23 09:54:59.933 NSFetchRequestBatch[14304:207] CoreData: sql: SELECT 0, t0.Z_PK, t0.Z_OPT, t0.ZWORD FROM ZDICTENTRY t0 WHERE  t0.Z_PK IN  (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)  ORDER BY t0.ZWORD COLLATE NSCollateLocaleSensitiveNoCase  LIMIT 20\r\n2010-02-23 09:54:59.937 NSFetchRequestBatch[14304:207] CoreData: annotation: sql connection fetch time: 0.0042s\r\n2010-02-23 09:54:59.938 NSFetchRequestBatch[14304:207] CoreData: annotation: total fetch execution time: 0.0050s for 20 rows.\r\n2010-02-23 09:54:59.939 NSFetchRequestBatch[14304:207] CoreData: sql: SELECT 0, t0.Z_PK, t0.Z_OPT, t0.ZWORD FROM ZDICTENTRY t0 WHERE  t0.Z_PK IN  (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)  ORDER BY t0.ZWORD COLLATE NSCollateLocaleSensitiveNoCase  LIMIT 20\r\n2010-02-23 09:54:59.940 NSFetchRequestBatch[14304:207] CoreData: annotation: sql connection fetch time: 0.0008s\r\n2010-02-23 09:54:59.940 NSFetchRequestBatch[14304:207] CoreData: annotation: total fetch execution time: 0.0013s for 20 rows.\r\n2010-02-23 09:54:59.941 NSFetchRequestBatch[14304:207] CoreData: sql: SELECT 0, t0.Z_PK, t0.Z_OPT, t0.ZWORD FROM ZDICTENTRY t0 WHERE  t0.Z_PK IN  (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)  ORDER BY t0.ZWORD COLLATE NSCollateLocaleSensitiveNoCase  LIMIT 20\r\n2010-02-23 09:54:59.942 NSFetchRequestBatch[14304:207] CoreData: annotation: sql connection fetch time: 0.0007s\r\n2010-02-23 09:54:59.942 NSFetchRequestBatch[14304:207] CoreData: annotation: total fetch execution time: 0.0013s for 20 rows.\r\n\r\n\r\nRegression:\r\n\r\n\r\nNotes:\r\nThe attached project demonstrates the issue using the steps described above.\r\n\r\nI'm filing this bug in response to BenT's request on the developer forum in response to my question - <https://devforums.apple.com/thread/39927>. I'm not sure what the best solution would be. My first instinct would be to disable batching when querying to generate the table index, but I don't know enough about the internals of Core Data or NSFetchedResultsController to know whether this is the best (or even feasible) approach."
    email: eric.s.blair@gmail.com
    modified: "2011-08-28T05:42:30.900086Z"
    number: "7679737"
    number_intvalue: 7679737
    originated: 2/23/2009
    parent_number: '&{NULL_VALUE}'
    product: iPhone SDK
    product_version: 3.1.3
    reproducible: Always
    resolved: ""
    status: Open
    title: NSFetchedResultsController, Table Index, and Batched Fetch Performance Issue
