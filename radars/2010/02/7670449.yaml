apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "7670449"
    labels:
        datastore_id: "160406"
data:
    classification: Enhancement
    created: "2010-02-20T01:49:16.588999Z"
    description: "The STAssertEqualObjects and STAssertEquals macros are commonly used and quite useful as a more expressive alternative to STAssertTrue with an expression that compares objects or primitives. However, asserting that two items are NOT equal is less intuitive. Currently, it requires creating a comparison expression and either (1) wrapping it in STAssertFalse or (2) negating it and wrapping in STAssertTrue. The downside to this is that the failure text produced by STAssertFalse and STAssertTrue are less helpful in that they don't actually print the values that were being compared, just the expression that was true or false. (The complementary STAssertNil and STAssertNotNil macros are an example of the convenience this can provide.) Here's an example of what tests might look like today:\r\n\r\n- (void) testEpicFail {\r\n\tid string1 = @\"FOO\"; id string2 = @\"BAR\";\r\n\t// Poor attempt at testing object equality\r\n\tSTAssertTrue([string1 isEqual:string2], nil);\r\n\tSTAssertEqualObjects(string1, string2, nil);\r\n\t// Poor attempt at testing object inequality\r\n\tSTAssertFalse([string1 isEqual:string1], nil);\r\n//\tSTAssertNotEqualObjects(string1, string1, nil);\r\n}\r\n\r\nThe errors that result from this test read as follows (trimmed for space):\r\n\r\n\terror: -[SampleTest testEpicFail] : \"[string1 isEqual:string2]\" should be true. \r\n\terror: -[SampleTest testEpicFail] : 'FOO' should be equal to 'BAR' \r\n\terror: -[SampleTest testEpicFail] : \"[string1 isEqual:string1]\" should be false. \r\n\r\nNotice that the first and third errors actually print the expression text, not the values that are actually being compared. To find the values that were unequal, one must debug the unit tests, a separate problem that currently requires creating a custom executable. The need for this would be somewhat reduced if the last line in the test (which is commented) worked and produced something like this:\r\n\r\n\terror: -[SampleTest testEpicFail] : 'FOO' should not be equal to 'FOO'\r\n\r\nObviously, this toy example doesn't fully demonstrate the potential. Implementing -hash and -isEqual: often results in mistakes, and comparing the output of -description can be helpful.\r\n\r\nAnother problem is the difficulty of reversing tests. Since STAssertEqualObjects doesn't have a \"dual\" macro, it isn't easily invertible, and asserting inequality increases the amount of work required to reverse the test. The same tests can be written with the true/false macros, but as shown above, the results of such tests are not nearly as helpful as they could be.\r\n\r\nAll of the above examples could be adapted for STAssertEquals, with the dual being STAssertNotEqual. (Too bad the macro wasn't originally names STAssertEqual…) This seems a little less critical, since primitive types support other comparisons (e.g. > ≥ < ≤) that don't apply as well to objects."
    email: quinntaylor@mac.com
    modified: "2011-08-28T05:42:33.756856Z"
    number: "7670449"
    number_intvalue: 7670449
    originated: "2010-02-19"
    parent_number: '&{NULL_VALUE}'
    product: OCUnit
    product_version: ""
    reproducible: Not Applicable
    resolved: P3, Later
    status: Open
    title: Add STAssertNotEqualObjects macro, maybe STAssertNotEqual
