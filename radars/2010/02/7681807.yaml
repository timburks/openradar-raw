apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "7681807"
    labels:
        datastore_id: "161413"
data:
    classification: Enhancement
    created: "2010-02-23T22:41:02.872549Z"
    description: "The STAssertNil and STAssertNotNil macros are commonly used and very handy, but their output when an assertion fails leaves quite a bit to be desired. Here's an example of what such failures look like today:\r\n\r\n- (void) testFAIL {\r\n\tid bar = nil;\r\n\tSTAssertNil([NSObject new], nil);\r\n\tSTAssertNil(@\"foo\", nil);\r\n\tSTAssertNil(self, nil);\r\n\tSTAssertNotNil(bar, nil);\r\n}\r\n\r\nThe errors that result from this test read as follows (trimmed for space):\r\n\r\n\terror: -[SampleTest testFAIL] : \"(([NSObject new]) == nil)\" should be true. \r\n\terror: -[SampleTest testFAIL] : \"((@\"foo\") == nil)\" should be true. \r\n\terror: -[SampleTest testFAIL] : \"((self) == nil)\" should be true. \r\n\terror: -[SampleTest testFAIL] : \"((bar) != nil)\" should be true. \r\n\r\nThese errors would be more intelligible and self-evident if they read more like this:\r\n\r\n\terror: -[SampleTest testFAIL] : [NSObject new] should be nil. \r\n\terror: -[SampleTest testFAIL] : @\"foo\" should be nil. \r\n\terror: -[SampleTest testFAIL] : self should be nil. \r\n\terror: -[SampleTest testFAIL] : bar should be non-nil. \r\n\r\nThe current error messages are produced using +failureInCondition:isTrue:inFile:atLine:withDescription: (the same NSException class method used by STAssertTrue and STAssertFalse) and wrap the expression text such that it looks vaguely like Lisp.\r\n\r\nAdding a new class method (+failureInExpression:isNil:inFile:atLine:withDescription:) to NSException and slightly modifying the STAssertNil and STAssertNotNil macros makes these tests much more intelligible with minimal effort. I've attached a sample implementation (based on the old Sen:te source, as in <rdar://problem/7670449>) which I've verified to work with my existing unit tests.\r\n\r\n------------ attachment included below for this report --------------\r\n\r\n// NSException_SenTestFailure.h, add to @interface NSException(SenTestFailure)\r\n\r\n+ (NSException *) failureInExpression:(NSString *)expression\r\n                                isNil:(BOOL)isNil\r\n                               inFile:(NSString *)filename\r\n                               atLine:(int) lineNumber\r\n                      withDescription:(NSString *) formatString, ...;\r\n\r\n// NSException_SenTestFailure.m, add to @implementation NSException(SenTestFailure)\r\n\r\n+ (NSException *) failureInExpression:(NSString *)expression\r\n                                isNil:(BOOL)isNil\r\n                               inFile:(NSString *)filename\r\n                               atLine:(int) lineNumber\r\n                      withDescription:(NSString *) formatString, ...\r\n{\r\n    NSString *description;\r\n    if (formatString != nil) {\r\n        va_list argList;\r\n        va_start(argList, formatString);\r\n        description = [[[NSString alloc] initWithFormat:formatString \r\n                                              arguments:argList] autorelease];\r\n        va_end(argList);\r\n    } else {\r\n        description = @\"\";\r\n    }\r\n    \r\n    NSString *reason = [NSString stringWithFormat:@\"%@ should be %@. %@\",\r\n                        expression, (isNil ? @\"nil\" : @\"non-nil\"), description];\r\n    NSDictionary *userInfo = [NSDictionary dictionaryWithObjectsAndKeys:\r\n                              SenConditionFailure, SenFailureTypeKey,\r\n                              expression, SenTestConditionKey,\r\n                              filename, SenTestFilenameKey,\r\n                              [NSNumber numberWithInt:lineNumber], SenTestLineNumberKey,\r\n                              description, SenTestDescriptionKey,\r\n                              nil];\r\n    return [self exceptionWithName:SenTestFailureException\r\n                            reason:reason\r\n                          userInfo:userInfo];\r\n\r\n}\r\n\r\n// SenTestCase_Macros.h, replace existing STAssertNil and STAssertNotNil macros\r\n\r\n#define STAssertNil(a1, description, ...) \\\r\ndo { \\\r\n    @try {\\\r\n        if ((a1) != nil) { \\\r\n            [self failWithException:([NSException failureInExpression:[NSString stringWithUTF8String:#a1] \\\r\n                                                                isNil:YES \\\r\n                                                               inFile:[NSString stringWithUTF8String:__FILE__] \\\r\n                                                               atLine:__LINE__ \\\r\n                                                      withDescription:@\"%@\", STComposeString(description, ##__VA_ARGS__)])]; \\\r\n        } \\\r\n    }\\\r\n    @catch (id anException) {\\\r\n        [self failWithException:([NSException failureInRaise:[NSString stringWithFormat:@\"(%s) == nil fails\", #a1] \\\r\n                                                   exception:anException \\\r\n                                                      inFile:[NSString stringWithUTF8String:__FILE__] \\\r\n                                                      atLine:__LINE__ \\\r\n                                             withDescription:@\"%@\", STComposeString(description, ##__VA_ARGS__)])]; \\\r\n    }\\\r\n} while(0)\r\n\r\n#define STAssertNotNil(a1, description, ...) \\\r\ndo { \\\r\n    @try {\\\r\n        if ((a1) == nil) { \\\r\n            [self failWithException:([NSException failureInExpression:[NSString stringWithUTF8String:#a1] \\\r\n                                                                isNil:NO \\\r\n                                                               inFile:[NSString stringWithUTF8String:__FILE__] \\\r\n                                                               atLine:__LINE__ \\\r\n                                                      withDescription:@\"%@\", STComposeString(description, ##__VA_ARGS__)])]; \\\r\n        } \\\r\n    }\\\r\n    @catch (id anException) {\\\r\n        [self failWithException:([NSException failureInRaise:[NSString stringWithFormat:@\"(%s) != nil fails\", #a1] \\\r\n                                                   exception:anException \\\r\n                                                      inFile:[NSString stringWithUTF8String:__FILE__] \\\r\n                                                      atLine:__LINE__ \\\r\n                                             withDescription:@\"%@\", STComposeString(description, ##__VA_ARGS__)])]; \\\r\n    }\\\r\n} while(0)"
    email: quinntaylor@mac.com
    modified: "2011-08-28T05:42:30.320597Z"
    number: "7681807"
    number_intvalue: 7681807
    originated: "2010-02-23"
    parent_number: '&{NULL_VALUE}'
    product: OCUnit
    product_version: ""
    reproducible: Not Applicable
    resolved: P3, NMOS
    status: Open
    title: Improve formatting of STAssertNil and STAssertNotNil macro output
