apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "7710615"
    labels:
        datastore_id: "165419"
data:
    classification: Enhancement
    created: "2010-03-03T07:19:59.258992Z"
    description: "I'd love to see -containsString: (and -containsString:options:) officially added to NSString. People not familiar with Cocoa are often stymied when they can't find such a method, since they don't know to look for NSRange-related functions, or understand checking range.location != NSNotFound.\r\n\r\nI understand the Ã¼ber-conservative approach we generally take with adding new API, but it would seem this should have been around since 10.0. Despite the fact that you can already accomplish this with a few more lines of code, such overlap isn't without precedent. For example, NSSet has both -member: and -containsObject: and both are useful. Sometimes you just need a boolean value, not all the extra fluff.\r\n\r\nDevelopers often write their own -containsString: method to get around this shortcoming, added via categories. When this happens in reusable code (third-party libraries or frameworks), conflicts and uncertainty arise, particularly when such methods respond differently and/or not as -rangeOfString:options: does.\r\n\r\nRELATED: <rdar://6883210> claims that NSString responds to an undocumented -containsString: method, although it issues a warning at compile time, but I can't reproduce this behavior on Snow Leopard. I'm wondering whether it's possibly a category conflict causing undefined results."
    email: quinntaylor@mac.com
    modified: "2011-08-28T05:42:24.231433Z"
    number: "7710615"
    number_intvalue: 7710615
    originated: "2010-03-02"
    parent_number: '&{NULL_VALUE}'
    product: NSString
    product_version: ""
    reproducible: Not Applicable
    resolved: ""
    status: Open
    title: 'Add -containsString: and -containsString:options: methods'
