apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "7944700"
    labels:
        datastore_id: "334401"
data:
    classification: Security
    created: "2010-05-05T12:31:12.00311Z"
    description: "05-May-2010 03:28 AM Yotam Gingold:\r\n'multiprocessing_uuid.c' was successfully uploaded\r\n\r\n05-May-2010 03:28 AM Yotam Gingold:\r\nSummary:\r\nAfter a fork(), uuid_generate_random() generates the same UUID sequence in every child.\r\n\r\nSteps to Reproduce:\r\n\r\n// g++ -o multiprocessing_uuid multiprocessing_uuid.c\r\n\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n#include <uuid/uuid.h>\r\n\r\nint main( int argc, char* argv[] )\r\n{\r\n    for( int i = 0; i < 20; ++i )\r\n    {\r\n        const int pid = fork();\r\n        if( pid == 0 )\r\n        {\r\n            uuid_t uuid;\r\n            uuid_generate_random( uuid );\r\n            char uuid_string[ 37 ];\r\n            uuid_unparse( uuid, uuid_string );\r\n            printf( \"%s\\n\", uuid_string );\r\n            break;\r\n        }\r\n    }\r\n    \r\n    return 0;\r\n}\r\n\r\n\r\nExpected Results:\r\n\r\n20 different UUIDs.\r\n\r\nActual Results:\r\n\r\n20 identical UUIDs.\r\n\r\nRegression:\r\n\r\nNotes:"
    email: yotam.gingold@gmail.com
    modified: "2011-08-28T05:41:37.003309Z"
    number: "7944700"
    number_intvalue: 7944700
    originated: 05-May-2010 03:28 PM
    parent_number: '&{NULL_VALUE}'
    product: Mac OS X
    product_version: 10.6.3/10D578
    reproducible: always
    resolved: ""
    status: Open
    title: After a fork(), uuid_generate_random() generates the same UUIDs in every child.
