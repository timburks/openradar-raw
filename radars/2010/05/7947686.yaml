apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "7947686"
    labels:
        datastore_id: "336401"
data:
    classification: Other Bug
    created: "2010-05-05T22:02:35.756362Z"
    description: "I have a custom subclass of NSMutableDictionary which had the following snippet of code:\r\n\r\n- (id) initWithDictionary:(NSDictionary*)otherDictionary {\r\n    return (self = [super initWithDictionary:otherDictionary]);\r\n}\r\n\r\nWhen running build and analyze in Xcode, it produced the following message:\r\n\r\n\"Although the value stored to 'self' is used in the enclosing expression, the value is never actually read from 'self'.\"\r\n\r\nFWIW, this seemingly-contrived (and now removed) code only existed because the header file included a documentation comment describing how this method has a particular side effect in the subclass. Without repeating the method prototype, Doxygen wouldn't create documentation for it, and without the corresponding implementation, the compiler issued a warning that the class implementation was incomplete. (The fact that the method already exists in parent classes, and probably shouldn't warn me, is a topic for another day.) I resolved the issue by moving the documentation to the class description itself.\r\n\r\nRegardless, the principle is that \"self\" is a somewhat of a special-case variable, and I wouldn't expect that one would have to explicitly read from self to assure that it is actually used. Further, of course the code goes on to call [self ...] numerous times, so although there are no ... = self statements, I'd say that self is actually read fairly frequently."
    email: quinntaylor@mac.com
    modified: "2011-08-28T05:41:36.774107Z"
    number: "7947686"
    number_intvalue: 7947686
    originated: "2010-05-05"
    parent_number: '&{NULL_VALUE}'
    product: clang - static analyzer
    product_version: x
    reproducible: Always
    resolved: ""
    status: Open
    title: False positive when assigning to (but not reading from) self in initializer
