apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "8010332"
    labels:
        datastore_id: "369401"
data:
    classification: Crash/Hang/Data Loss
    created: "2010-05-20T21:18:21.227242Z"
    description: "SUMMARY\r\n\r\nSloppy programming in ld64-97.2/src/ld/ld.cpp’s canonicalizeAnonymousName function causes ld to behave unexpectedly and may cause ld to crash. This problem occurs when encountering a symbol in a nested anonymous namespace, when the parent of the anonymous namespace is named and ends with one or more digits, and when an order file is used.\r\n\r\nSTEPS TO REPRODUCE\r\n\r\nAttempt to build the attached test program using “make:”\r\n\r\nmark@selecty bash$ tar -jxf ldcrash.tar.bz2 \r\nmark@selecty bash$ cd ldcrash\r\nmark@selecty bash$ make\r\n\r\nEXPECTED RESULTS\r\n\r\nThis is a simple well-formed no-op program. It should compile and link successfully.\r\n\r\nOBSERVED RESULTS\r\n\r\nThe program fails to link. ld crashes with SIGSEGV.\r\n\r\ng++  -c test.cc -o test.o\r\ng++  test.o -o test -Wl,-order_file,test.order\r\ncollect2: ld terminated with signal 11 [Segmentation fault]\r\nmake: *** [test] Error 1\r\n\r\nREGRESSION\r\n\r\nThis appears to have regressed between Xcode 2.4.1/2.5’s ld64-62.1 and Xcode 3.0’s ld64-77, although this analysis is based solely on source code examination and I haven’t tested with a live 2.5 installation.\r\n\r\nNOTES\r\n\r\ncanonicalizeAnonymousName simplistically scans a symbol for _GLOBAL__N_ and then backs up as many digits as it is able to in an attempt to find the length of the anonymous namespace pseudo-name generated by the compiler. If the containing namespace’s name ends in a digit, canonicalizeAnonymousName will interpret it as part of the anonymous namespace pseudo-name’s length. For example, in this program:\r\n\r\nnamespace n1 {\r\nnamespace {\r\nint i;\r\n}  // namespace\r\n}  // namespace n1\r\n\r\nthe variable i is decorated as __ZN2n112_GLOBAL__N_11iE. canonicalizeAnonymousName will interpret the length of the anonymous namespace’s pseudo-name as 112 characters long, when in reality it is only 12 characters long, because it included the trailing 1 from parent namespace n1. This leads to inappropriate behavior of canonicalizeAnonymousName: the result it returns will be incorrect, it will potentially overflow its “out” buffer, and it may crash. Certain names will make a crash more likely. Naming the outer namespace n9999999 and using a small test program will cause a crash in both the i386 and x86_64 versions of ld64-97.6.2.\r\n\r\ncanonicalizeAnonymousName is only called in the ordered symbol sort portion of the sortAtoms routine, and only when an ordered symbol is given that is not found in the global symbol table. One way to ensure that this occurs is to request ordering of a symbol that’s not present in the output. This can occur in production scenarios where a single order file is used with multiple build configurations, not all of which will produce the same set of symbols in the output. This case will also occur when a symbol to order is not global (for example, a static function). When this happens, a map of symbols is built, and names in an anonymous namespace are supposed to be canonicalized using canonicalizeAnonymousName.\r\n\r\nThe attached program exhibits the bug in the form of a crash. It should link cleanly (and not do anything), but instead, ld crashes:\r\n\r\nmark@selecty bash$ make\r\ng++  -c test.cc -o test.o\r\ng++  test.o -o test -Wl,-order_file,test.order\r\ncollect2: ld terminated with signal 11 [Segmentation fault]\r\nmake: *** [test] Error 1\r\n\r\nThis bug has caused ld crashes in Chromium/Google Chrome, a large project written predominantly in C++. We have seen it several times when an anonymous namespace is placed within namespace gles2.\r\n\r\nThe fix is to rewrite canonicalizeAnonymousName (and its partner function, usesAnonymousNamespace) to properly interpret decorated C++ names in such a way as to identify those that are in an anonymous namespace and remove these anonymous namespace pseudo-names by replacing them with hyphens. An added improvement that can be made is that names nested within multiple anonymous namespaces can be canonicalized properly.\r\n\r\nI am including a patch to ld64-97.2 to implement the proposed improvement. The bug also affects ld64-85.2.1 as included in Xcode 3.1.4 9M2809. If there will be further releases of Xcode 3.1.x, this patch should be included.\r\n\r\nmark@selecty bash$ ld -v\r\n@(#)PROGRAM:ld  PROJECT:ld64-97.2\r\nllvm version 2.6svn,  Apple Build #2207-05\r\nmark@selecty bash$ xcodebuild -version\r\nXcode 3.2.2\r\nComponent versions: DevToolsCore-1648.0; DevToolsSupport-1631.0\r\nBuildVersion: 10M2148\r\nmark@selecty bash$ uname -a\r\nDarwin selecty 10.3.0 Darwin Kernel Version 10.3.0: Fri Feb 26 11:58:09 PST 2010; root:xnu-1504.3.12~1/RELEASE_I386 i386\r\nmark@selecty bash$ sw_vers\r\nProductName:\tMac OS X\r\nProductVersion:\t10.6.3\r\nBuildVersion:\t10D573"
    email: mark@chromium.org
    modified: "2011-08-28T05:41:29.996387Z"
    number: "8010332"
    number_intvalue: 8010332
    originated: 05/20/2010
    parent_number: "7989734"
    product: Developer Tools
    product_version: Xcode 3.2.2 10M2148, ld64 97.2
    reproducible: Always
    resolved: ""
    status: Duplicate/7989734
    title: ld can crash when encountering a symbol in a nested anonymous namespace
