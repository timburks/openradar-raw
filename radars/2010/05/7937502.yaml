apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "7937502"
    labels:
        datastore_id: "326401"
data:
    classification: ""
    created: "2010-05-03T23:46:34.768972Z"
    description: "### Summary:\r\n\r\nBuilding a target using xcodebuild from a shell script build phase takes 2x as long as building the target normally from the IDE.\r\n\r\n### Steps to Reproduce:\r\n\r\n1. Open a moderately-sized project that ideally takes ~30 seconds to build.\r\n2. Clean the project.\r\n3. Make sure the intended target is the active target.\r\n4. Build the project, and time how long it takes to complete.\r\n5. Create an empty target (no dependencies). Call it \"FakeTarget.\"\r\n6. Add a shell script build phase to FakeTarget, with a single command:\r\n\r\n    xcodebuild -activetarget\r\n\r\n7. Make sure the main target from step #3 is still the active target (_not_ FakeTarget.)\r\n8. Right click \"FakeTarget\" and click \"Build \"FakeTarget,\" and time how long it takes to complete.\r\n\r\nOn my machine, the time in step #8 is 2x the time from step #4. On the other hand, if in step #6 you route the xcodebuild output to /dev/null, as such:\r\n\r\n    xcodebuild -activetarget  > /dev/null 2>&1\r\n\r\nboth build times are the same. Therefore it appears that Xcode's eating a lot of CPU time parsing xcodebuild's output, and monitoring Xcode during step #8 verifies this."
    email: davekeck@gmail.com
    modified: "2011-08-28T05:41:38.568876Z"
    number: "7937502"
    number_intvalue: 7937502
    originated: 5/3/10
    parent_number: '&{NULL_VALUE}'
    product: Xcode
    product_version: 3.2.2
    reproducible: Always
    resolved: ""
    status: Open
    title: Xcode's parsing of xcodebuild output drastically degrades performance
