apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "8135410"
    labels:
        datastore_id: "464402"
data:
    classification: UI/Usability
    created: "2010-06-27T21:02:53.583119Z"
    description: "27-Jun-2010 11:01 PM Emanuele Vulcano:\r\nSummary:\r\nThe Xcode support for localization is incomplete, unusable, uses deprecated defaults and makes it difficult to actually work correctly on a localized application.\r\n\r\nThe following interconnected problems arise from the Xcode workflow:\r\n\r\n• Xcode has no built-in support for localization other than managing files in different .lproj directories. This requires the use of other tools, often unwieldy.\r\n\r\n• Xcode's model of having XIB files of different languages be wholly separate files causes serious problems: XIB files are partly responsible of the behavior of the application and must be kept in sync with the app sources to eg prevent crashes from nonexisting (removed or renamed) classes being used, or from stray older outlet connections causing setValue:forKey: to raise exceptions. This is already a tedious and time-sensitive process when there is *one* XIB file. However, Xcode's model means having to manually cascade any edits to all other localized XIBs — this means having to manually touch 2-5 files *for each edit*, for an edit that the machine is *already* able to apply automatically (via ibtool, for example) for no adequate reason.\r\n\r\nNote that this also makes tools like AppleGlot inadequate for use: since these tools basically edit code \"after the fact\", this means the application is basically shipping with untested code (the NIBs produced by AG). The lack of localization tools inside Xcode proper makes it impossible to test an app in a localization other than the base one, since the burden to keep localizations updated in Xcode itself is simply too high. (This is especially apparent if a developer is also the localizer of the application, as in my case.)\r\n\r\n• Xcode's model of having each localized file be a container for its own, private list of localized versions makes absolutely no sense and is out of sync with the optimal solution of the problem, which is making localizations a first-class concept. An example of a consequence of this is adding a new localization by working entirely in Xcode: this involves\r\n\r\n  1. Finding each localized resource in the project.\r\n  2. Opening the Get Info panel for that resource.\r\n  3. Hitting 'Add Localization…'.\r\n  4. Inserting the localization ISO code.\r\n  5. Hitting OK.\r\n\r\nSteps 2-5 have to be repeated for each resource; in a low- to medium-complexity project as many as 40-50 files may be localized and need the above, causing hundreds of wasted clicks. Note that the operating system correctly makes *localizations* first-class citizens instead (by using .lproj folders); indeed, the set of localizations should be a property of a target (or of the bundle generated by that target), NOT of a single file.\r\n\r\n• Xcode proposes 'English' as the default localization name when making a file localizable. This has long been deprecated and has lead to non-immediately-apparent localization errors where a file was copied in a .lproj folder other than the desired one.\r\n\r\nAn example script that tries to avoid these problems can be seen at <http://github.com/millenomi/infinitelabs-build-tools/blob/master/BuildLocale>. The script is run by a shell script phase in an Xcode target and is set to place compiled localization files (such as compiled NIBs) in the app bundle's localized resources directory by being invoked as:\r\n\r\n     COMPILED_LOCALES_DIR=\"$BUILT_PRODUCTS_DIR\"/\"$WRAPPER_NAME\" PRODUCE_APPLIED=YES \"$INFINITELABS_TOOLS\"/BuildLocale\r\n\r\n(The PRODUCE_APPLIED variable causes the script to also produce non-compiled .xib files for manual inspection.)\r\n\r\nThis however requires additional steps outside Xcode, such as gathering strings files produced by ibtool and genstrings and placing localized versions of the same in an appropriate directory. (By enumerating such locale-code-named directories, the script allows entire localizations to be added or removed on the fly by simply adding or removing their directories, reaching one of the goals specified above.)\r\n\r\nAlso note how the script has to emulate certain things Xcode already possesses, such as detecting if files have been edited and XIB compiling.\r\n\r\n\r\nProposed solutions:\r\n\r\n• Integrate first-class localization tools into Xcode. In particular:\r\n\r\n - Targets that can produce bundles should have a list of localizations that applies to the target as a whole. Files can be marked as localizable, but no longer have a list of own localizations. The IDE must allow for custom localized variants of files to be supplied manually, but should also offer to keep localizations up-to-date by creating temporary unlocalized placeholders for resources that don't have a localized variant by copying the original source file. (For example, if I add Readme.rtf as a localizable resource for a base locale of 'en' and I also have set the bundle to have a 'it' locale, the English file is also immediately copied to the Italian locale and marked as a placeholder, nonlocalized copy.) This greatly simplifies localization management by making localizations first-class citizens of projects.\r\n\r\n - Xcode should have basic localization capabilities, supporting structured editing of .strings files and of strings in NIB files (the way it supports structured editing of .plist files, or the way Interface Builder allows for string editing in NIB files), glossary support, support for extracting and importing these localizations from localization teams, and support for underlining which files have untranslated strings, at the very least.\r\n\r\n - Compiling source files should automatically extract strings into .strings files for later localization (same as currently running genstrings on them).\r\n\r\n - Compiling XIB files should also cascade any change onto localized versions of the same file (same as currently running ibtool with the --incremental-file option)."
    email: millenomi@gmail.com
    modified: "2011-08-28T05:40:55.242882Z"
    number: "8135410"
    number_intvalue: 8135410
    originated: 27-Jun-2010 11:01 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: 3.2.3
    reproducible: Always
    resolved: ""
    status: Open
    title: The Xcode localization workflow is totally bonkers.
