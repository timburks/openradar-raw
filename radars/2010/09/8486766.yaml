apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "8486766"
    labels:
        datastore_id: "675403"
data:
    classification: Enhancement
    created: "2010-09-28T17:20:46.990187Z"
    description: "Summary: Many applications need to store very small amounts of encrypted data, such as a single account password. Currently on both Mac and OS SDKs, this means using the Security Framework to set up an item with Keychain Services. While this provides some level of abstraction from the nuts and bolts of encryption, it's not as simple as it could be.\r\n\r\nI propose adding methods like this to NSUserDefaults:\r\n\r\n-(void)setObject: (id)obj forKey: (NSString *)key encrypted: (BOOL)crypt;\r\n-(id)objectForKey: (NSString *)key error: (NSError **)error;\r\n\r\nwhere crypt==YES would mean that the value gets stored in an encrypted store. The other situation (crypt==NO) means that the value gets stored in the usual place as currently implemented. This completely abstracts the encryption workflow from the process. Because the implementation is hidden, the actual encrypted content could be stored anywhere. On iOS it might make sense to have a user defaults plist stored with NSFileProtectionComplete - on Mac OS X it could use the default keychain. Retrieving objects from the encrypted store should be entirely transparent; whether an object is stored in the encrypted or regular store, it can be recovered using a single mechanism. The retrieval method needs to return an error by-ref to signify failure conditions (an iOS device is locked, the user did not authenticate correctly to Keychain Services or did not grant this application access to the underlying item; or indeed any error that can occur with NSUserDefaults now but that is not currently indicated to the caller).\r\n\r\nNotes: The motivation for this bug report is comparison with the equivalent API in the Eclipse rich client platform. There, we have the ISecurePreferences interface (http://help.eclipse.org/galileo/index.jsp?topic=/org.eclipse.platform.doc.isv/reference/api/org/eclipse/equinox/security/storage/ISecurePreferences.html) which behaves in a way similar to that described here. Users of that API do not need to be aware of the platform's encryption implementation or support in order to write a password to disk securely."
    email: iamleeg@gmail.com
    modified: "2011-08-28T05:39:45.43479Z"
    number: "8486766"
    number_intvalue: 8486766
    originated: 28/09/2010
    parent_number: '&{NULL_VALUE}'
    product: iOS SDK
    product_version: Any
    reproducible: Not Applicable
    resolved: ""
    status: Open
    title: Make it easier to store encrypted passwords
