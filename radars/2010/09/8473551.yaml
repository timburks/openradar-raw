apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "8473551"
    labels:
        datastore_id: "668402"
data:
    classification: Feature
    created: "2010-09-24T07:34:25.264463Z"
    description: "This is a feature request to allow creating/building and using 3rd party dynamic libraries and frameworks on iOS. With the new license term changes to section 3.3.2, it appears that dynamic linking is no longer forbidden by the terms of agreement. However, the Xcode toolchain has been crippled for iOS so it is not possible to build dynamic libraries and frameworks (unlike on Mac) even though we can dynamically link to built in Apple provided frameworks.\r\n\r\nThis feature is very important because of licenses like the LGPL. There is vast quantity of already written, high quality, tested/debugged software out there that is LGPL, but for commercial, closed source projects, LGPL is untouchable on iOS because we can only currently statically link and the LGPL is viral in this case.\r\n\r\n\r\nPlease bring dynamic library support to iOS. You already provide it for the built in Apple frameworks. Please expose it for the rest of us. There shouldn't be any more security concerns than allowing interpreted languages on IOS (which everybody seems to be obsessed with in the new license terms).\r\n\r\n\r\n\r\nThis is the new clause:\r\n\r\n3.3.2 An Application may not download or install executable code. Interpreted code may only be used in an Application if all scripts, code and interpreters are packaged in the Application and not downloaded. The only exception to the foregoing is scripts and code downloaded and run by Apple's built-in WebKit framework.\r\n\r\n\r\nThis is the previous version:\r\n\r\n3.3.2 An Application may not itself install or launch other executable code by any means,including without limitation through the use of a plug-in architecture, calling other frameworks, other APIs or otherwise. Unless otherwise approved by Apple in writing, no interpreted code may be downloaded or used in an Application except for code that is interpreted and run by Apple's Documented APIs and built-in interpreter(s). Notwithstanding the foregoing, with Appleâ€™s prior written consent, an Application may use embedded interpreted code in a limited way if such use is solely for providing minor features or functionality that are consistent with the intended and advertised purpose of the Application.\r\n\r\n\r\n\r\n\r\nI have additional reasons to want this feature. \r\n\r\n1) Objective-C categories are causing havoc with static linking. This requires the use of -ObjC or worse -all_load. The latter flag is particularly problematic for projects that expect duplicate symbols to be thrown away. \r\n\r\n2) Using code from multiple projects. The problem is often these larger projects depend on common dependencies and create code duplication. For example, the Facebook code for iOS is commonly embedded into projects. This creates multiple problems. \r\n\r\na) First, it encourages developers to embed the code into their libraries instead of taking the time to properly setup the dependencies as a separate (dynamic) library. \r\n\r\nb) Second, there is version drift where different projects may be using different versions of the same library.\r\n\r\nc) Third, embedding the code also encourages library developers to be sloppy and they will more likely break the API or ABI. This combined with (b) makes it really hard to deal with.\r\n\r\nWith dynamic libraries and judicious use of @rpath should minimize or eliminate all of these problems.\r\n\r\nObjective-C namespaces might solve this problem, but that's another discussion. Dynamic libraries are proven and simply need to be uncrippled on iOS."
    email: ewmailing@gmail.com
    modified: "2011-08-28T05:39:47.78668Z"
    number: "8473551"
    number_intvalue: 8473551
    originated: "2010-09-24"
    parent_number: '&{NULL_VALUE}'
    product: iOS
    product_version: ""
    reproducible: ""
    resolved: ""
    status: duplicate
    title: Add 3rd party dynamic library/framework support to iOS
