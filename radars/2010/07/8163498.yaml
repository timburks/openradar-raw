apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "8163498"
    labels:
        datastore_id: "467402"
data:
    classification: Feature Request
    created: "2010-07-06T21:54:10.627186Z"
    description: "Summary:\r\nCurrently, supported URL schemes must be included in the Info.plist. With In App Purchases it would be desirable to add URL schemes on the fly. One example would be URL schemes for turn-by-turn Navigation apps that could add country-specific URL schemes according to the maps the user purchased via IAP. Right now an app can only register all schemes even though some extended functionality isn't even available. Or refrain from registering any schemes and thus not advertise the service.\r\n\r\nAnother interesting use case are document readers that could be extended via IAP.\r\n\r\nAPI proposal:\r\nThe API should be a property on UIApplication:\r\n\r\n@property(nonatomic) NSArray *registeredURLSchemes;\r\n\r\nWhen reading the property, it would return the actually registered schemes, from both Info.plist and dynamically registered ones.\r\n\r\nThis would even solve the issue of conflicting URL schemes since only the actually registered schemes would be returned. By overriding the property apps could fix conflicting URL schemes themselves (important for Navigation apps).\r\n\r\nSecurity considerations:\r\nIn theory, apps could register system URL schemes or vendor schemes of competing apps. To prevent that, it might be desirable to add a new list of allowed URL schemes in the Info.plist. Only schemes mentioned there would be allowed to register. Alternatively, the Info.plist format would be unchanged and the API would only allow to remove schemes programmatically."
    email: futuretap@googlemail.com
    modified: "2011-08-28T05:40:45.244094Z"
    number: "8163498"
    number_intvalue: 8163498
    originated: 06-Jul-2010 11:53 PM
    parent_number: '&{NULL_VALUE}'
    product: iPhone SDK
    product_version: n/a
    reproducible: Not Applicable
    resolved: ""
    status: Open
    title: URL handler registration should be possible on the fly
