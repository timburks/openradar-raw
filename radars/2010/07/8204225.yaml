apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "8204225"
    labels:
        datastore_id: "534401"
data:
    classification: Serious Bug
    created: "2010-07-20T15:04:17.360656Z"
    description: "18-Jul-2010 10:21 AM Cyril Godefroy:\r\nSummary:\r\nTrying to edit and rewrite the IPTCDictionary with imageIO on the iPhone SDK 4.0.1 deletes the dictionary from the image. Seems only happening on jpeg files.\r\n\r\nSteps to Reproduce:\r\n---------------\r\n\r\nOpen a public.jpeg image with ImageIO\r\n\r\nRead the ExifDictionary\r\nread the GPSDictionary\r\nRead the IPTCDictionary\r\n\r\nEdit the info from these dictionaries\r\n\r\nRewrite the dictionaries to the file\r\n\r\n\r\nExpected Results:\r\n--------------\r\n\r\nThe end file should contain IPTC info, for example Keywords\r\n\r\nActual Results:\r\n-----------\r\nPreview on the Mac doesn't display any IPTC info, nor keywords\r\n\r\n\r\nNotes:\r\n------\r\nI did try by putting a file with IPTC info in the shared document folder, editing it and saving it back: the destinationFile had no more IPTC Keywords.\r\n\r\nAnother developer had the same kind of issues, and reported on Stack Overflow:\r\nhttp://stackoverflow.com/questions/3003036/\r\n\r\nHere is the code, I also provide the full app.\r\n\r\n\r\n- (void)saveMetaData{\t\r\n\tCGImageSourceRef source = CGImageSourceCreateWithURL((CFURLRef)[NSURL fileURLWithPath:[self filePath]], nil);\r\n\t\r\n\t//get all the metadata in the image\r\n    NSDictionary *metadata = (NSDictionary *) CGImageSourceCopyPropertiesAtIndex(source,0,NULL);\r\n    \r\n    //make the metadata dictionary mutable so we can add properties to it\r\n    NSMutableDictionary *metadataAsMutable = [metadata mutableCopy];\r\n    [metadata release];\r\n\t\r\n\tNSMutableDictionary *EXIFDictionary = [[[metadataAsMutable objectForKey:(NSString *)kCGImagePropertyExifDictionary]mutableCopy]autorelease];\r\n    \r\n    if(!EXIFDictionary)\r\n    {\r\n        //if the image does not have an EXIF dictionary (not all images do), then create one for us to use\r\n        EXIFDictionary = [NSMutableDictionary dictionary];\r\n    }\r\n\t\r\n\t//we need to format the date so it conforms to the EXIF spec and can be read by other apps\r\n\t\r\n    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc]init];\r\n    \r\n\t//the date format for EXIF dates as from http://www.abmt.unibas.ch/dokumente/ExIF.pdf\r\n    [dateFormatter setDateFormat:@\"yyyy:MM:dd HH:mm:ss\"]; \r\n    \r\n\t//use the date formatter to get a string from the date we were passed in the EXIF format\r\n\tNSString *EXIFFormattedCreatedDate = [dateFormatter stringFromDate:[self creationDate]]; \r\n    \r\n\t[dateFormatter release];\r\n    \r\n    [EXIFDictionary setObject:EXIFFormattedCreatedDate forKey:(NSString *)kCGImagePropertyExifDateTimeDigitized];\r\n\t\r\n\tNSMutableDictionary *GPSDictionary = [[[metadataAsMutable objectForKey:(NSString *)kCGImagePropertyGPSDictionary ]mutableCopy]autorelease];\r\n\tif(!GPSDictionary){\r\n\r\n\t\tGPSDictionary = [NSMutableDictionary dictionary];\r\n\t}\r\n\t[GPSDictionary setObject:self.longitude forKey:(NSString *)kCGImagePropertyGPSLongitude];\r\n\t[GPSDictionary setObject:self.latitude forKey:(NSString *)kCGImagePropertyGPSLatitude];\r\n\t\r\n\t\r\n\tNSMutableDictionary *IPTCDictionary = [[[metadataAsMutable objectForKey:(NSString *)kCGImagePropertyIPTCDictionary ]mutableCopy]autorelease];\r\n\tif(!IPTCDictionary){\r\n\t\tIPTCDictionary = [NSMutableDictionary dictionary];\r\n\t}\r\n\tif(self.name)\r\n\t\t[IPTCDictionary setObject:self.name forKey:(NSString *)kCGImagePropertyIPTCHeadline];\r\n\tif(self.tags)\r\n\t\t[IPTCDictionary setObject:self.tags forKey:(NSString *)kCGImagePropertyIPTCKeywords];\r\n\t\r\n\t\t\t\t\t\t\t\t\t\t  \r\n\t//add our modified dictionaries data back into the imageâ€™s metadata\r\n    [metadataAsMutable setObject:EXIFDictionary forKey:(NSString *)kCGImagePropertyExifDictionary];\r\n\t[metadataAsMutable setObject:IPTCDictionary forKey:(NSString *)kCGImagePropertyIPTCDictionary];\r\n    [metadataAsMutable setObject:GPSDictionary  forKey:(NSString *)kCGImagePropertyGPSDictionary];\r\n\t\r\n    \r\n    CFStringRef UTI = CGImageSourceGetType(source);\r\n\t//this will be the data CGImageDestinationRef will write into\r\n    NSMutableData *data = [NSMutableData data];\r\n    \r\n    CGImageDestinationRef destination = CGImageDestinationCreateWithData((CFMutableDataRef)data,UTI,1,NULL);\r\n    \r\n    if(!destination)\r\n    {\r\n        NSLog(@\"***Could not create image destination ***\");\r\n        return ;\r\n    }\r\n    \r\n    //add the image contained in the image source to the destination, overidding the old metadata with our modified metadata\r\n    CGImageDestinationAddImageFromSource(destination,source,0, (CFDictionaryRef) metadataAsMutable);\r\n    \r\n    //tell the destination to write the image data and metadata into our data object.\r\n    //It will return false if something goes wrong\r\n    BOOL success = NO;\r\n    success = CGImageDestinationFinalize(destination);\r\n    \r\n    if(!success)\r\n    {\r\n        NSLog(@\"***Could not create data from image destination ***\");\r\n        return ;\r\n    }\r\n    \r\n    //now we have the data ready to go, so do whatever you want with it\r\n    //here we just write it to disk at the same path we were passed\r\n    [data writeToURL:[NSURL fileURLWithPath:[self filePath]] atomically:YES];\r\n    \r\n    //cleanup\r\n    CFRelease(destination);\r\n    CFRelease(source);\r\n}\r\n\r\n\r\n18-Jul-2010 10:25 AM Cyril Godefroy:\r\n'Archive-1.zip' was successfully uploaded\r\n\r\n\r\n\r\n-----------------\r\nOpenRadar Note: Am I wrong in believing I should be able to write my iptc dict with this code? I have to admit, I'm an imageIO noob."
    email: cgodefroy@gmail.com
    modified: "2012-03-23T08:50:25.357017Z"
    number: "8204225"
    number_intvalue: 8204225
    originated: 2010/07/18
    parent_number: '&{NULL_VALUE}'
    product: iOS
    product_version: 4.0.1
    reproducible: Always
    resolved: 2011-07  iOS 5
    status: Closed
    title: ImageIO iPhone doesn't handle IPTCDictionary on write
