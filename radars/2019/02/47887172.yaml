apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "47887172"
    labels:
        datastore_id: "4988181535522816"
data:
    classification: Bug
    created: "2019-02-07T18:06:31.448539Z"
    description: "We are seeing that H264 consistently outperforms HEVC in terms of SSIM at 3 Mbps with a 1280x720 resolution. Please find attached the SSIM and PSNR of encoding the same asset on an iPhone 8 running iOS 12.1 at various bitrates using both HEVC and H264, as well as driver code. SSIM and PSNR were measured with FFmpeg using the following command: ffmpeg -i hevc.mp4 -i video.mp4 -lavfi \"ssim;[0:v][1:v]psnr\" -f null -\r\n\r\n-----\r\n\r\n\r\n+------+----------+----------+--+------+-----------+-----------+\r\n| SSIM |          |          |  | PSNR |           |           |\r\n+------+----------+----------+--+------+-----------+-----------+\r\n| Mbps | H264     | HEVC     |  | Mbps | H264      | HEVC      |\r\n| 1.6  | 0.868546 | 0.866705 |  | 1.6  | 28.742276 | 29.012076 |\r\n| 1.8  | 0.878769 | 0.870306 |  | 1.8  | 29.127728 | 29.145616 |\r\n| 2.0  | 0.887289 | 0.876988 |  | 2.0  | 29.493496 | 29.401263 |\r\n| 2.2  | 0.894511 | 0.885587 |  | 2.2  | 29.826788 | 29.753897 |\r\n| 2.4  | 0.901402 | 0.892895 |  | 2.4  | 30.168525 | 30.083894 |\r\n| 2.6  | 0.907192 | 0.901793 |  | 2.6  | 30.482898 | 30.523067 |\r\n| 2.8  | 0.912267 | 0.910082 |  | 2.8  | 30.776906 | 30.990894 |\r\n| 3.0  | 0.916828 | 0.916097 |  | 3.0  | 31.044133 | 31.348581 |\r\n| 3.2  | 0.921024 | 0.921129 |  | 3.2  | 31.316162 | 31.696412 |\r\n| 3.4  | 0.924703 | 0.926292 |  | 3.4  | 31.564169 | 32.059309 |\r\n| 3.6  | 0.928121 | 0.930604 |  | 3.6  | 31.793409 | 32.375958 |\r\n| 3.8  | 0.931357 | 0.933995 |  | 3.8  | 32.039006 | 32.647455 |\r\n| 4.2  | 0.936885 | 0.940416 |  | 4.2  | 32.458297 | 33.190408 |\r\n| 4.7  | 0.942769 | 0.946592 |  | 4.7  | 32.956044 | 33.77437  |\r\n| 5.6  | 0.951091 | 0.955087 |  | 5.6  | 33.749049 | 34.707639 |\r\n| 7.2  | 0.961685 | 0.964716 |  | 7.2  | 34.977282 | 35.99391  |\r\n| 10.8 | 0.974855 | 0.97714  |  | 10.8 | 37.143887 | 38.316594 |\r\n| 14.4 | 0.98164  | 0.983663 |  | 14.4 | 38.844081 | 40.099846 |\r\n| 21.6 | 0.988423 | 0.989922 |  | 21.6 | 41.34255  | 42.658182 |\r\n| 28.8 | 0.991736 | 0.992605 |  | 28.8 | 43.166993 | 44.312512 |\r\n| 43.2 | 0.995039 | 0.994992 |  | 43.2 | 45.774187 | 46.329256 |\r\n| 57.6 | 0.996671 | 0.995594 |  | 57.6 | 47.556865 | 47.045504 |\r\n+------+----------+----------+--+------+-----------+-----------+\r\n\r\n-----\r\n\r\n- (void)testCodec:(AVVideoCodecType)codec withBitrate:(CGFloat)bitRate {\r\n    NSURL *const outputUrl = [[[NSURL fileURLWithPath:NSTemporaryDirectory()]\r\n                               URLByAppendingPathComponent:[[NSUUID UUID] UUIDString]]\r\n                              URLByAppendingPathExtension:@\"mp4\"];\r\n\r\n    NSURL *const url = [[NSBundle bundleForClass:[self class]] URLForResource:@\"video\" withExtension:@\"mp4\"];\r\n    AVAsset *const asset = [AVAsset assetWithURL:url];\r\n    AVAssetTrack *const videoTrack = [[asset tracksWithMediaType:AVMediaTypeVideo] firstObject];\r\n    NSError *error = nil;\r\n    AVAssetReader *const assetReader = [AVAssetReader assetReaderWithAsset:asset error:&error];\r\n    XCTAssertNil(error);\r\n    AVAssetWriter *const assetWriter = [AVAssetWriter assetWriterWithURL:outputUrl fileType:AVFileTypeMPEG4 error:&error];\r\n    XCTAssertNil(error);\r\n\r\n    AVAssetWriterInput *const input = [[AVAssetWriterInput alloc] initWithMediaType:AVMediaTypeVideo\r\n                                                                     outputSettings:@{\r\n                                                                                      AVVideoCodecKey: codec,\r\n                                                                                      AVVideoWidthKey: @(1280),\r\n                                                                                      AVVideoHeightKey: @(720),\r\n                                                                                      AVVideoCompressionPropertiesKey: @{\r\n                                                                                              AVVideoAverageBitRateKey: @(bitRate),\r\n                                                                                              }\r\n                                                                                      }];\r\n\r\n    AVAssetReaderOutput *const output = [[AVAssetReaderTrackOutput alloc] initWithTrack:videoTrack\r\n                                                                         outputSettings:@{\r\n                                                                                          (id)kCVPixelBufferPixelFormatTypeKey:\r\n                                                                                              @(kCVPixelFormatType_32BGRA),\r\n                                                                                          }];\r\n\r\n    [assetReader addOutput:output];\r\n    [assetWriter addInput:input];\r\n\r\n    XCTAssertNil(assetReader.error);\r\n    XCTAssertNil(assetWriter.error);\r\n\r\n    [assetReader startReading];\r\n    [assetWriter startWriting];\r\n\r\n    [assetWriter startSessionAtSourceTime:kCMTimeZero];\r\n\r\n    const dispatch_queue_t queue = dispatch_queue_create(\"transcode\", DISPATCH_QUEUE_SERIAL);\r\n    const dispatch_semaphore_t transcode = dispatch_semaphore_create(0);\r\n    [input requestMediaDataWhenReadyOnQueue:queue usingBlock:^{\r\n        while ([input isReadyForMoreMediaData]) {\r\n            const CMSampleBufferRef sampleBuffer = [output copyNextSampleBuffer];\r\n\r\n            XCTAssertNil(assetReader.error);\r\n            XCTAssertNil(assetWriter.error);\r\n\r\n            if (sampleBuffer) {\r\n                [input appendSampleBuffer:sampleBuffer];\r\n                CFRelease(sampleBuffer);\r\n            } else {\r\n                [input markAsFinished];\r\n                dispatch_semaphore_signal(transcode);\r\n            }\r\n        }\r\n    }];\r\n\r\n    dispatch_semaphore_wait(transcode, DISPATCH_TIME_FOREVER);\r\n\r\n    const dispatch_semaphore_t write = dispatch_semaphore_create(0);\r\n    [assetWriter finishWritingWithCompletionHandler:^{\r\n        dispatch_semaphore_signal(write);\r\n    }];\r\n\r\n    XCTAssertNil(assetWriter.error);\r\n\r\n    dispatch_semaphore_wait(write, DISPATCH_TIME_FOREVER);\r\n\r\n    NSLog(@\"Wrote to %@\", outputUrl);\r\n}\r\n\r\n-----"
    email: cellsworth@gmail.com
    modified: "2019-02-07T18:06:31.448731Z"
    number: "47887172"
    number_intvalue: 47887172
    originated: 2/7/19
    parent_number: '&{NULL_VALUE}'
    product: AVFoundation
    product_version: iOS 12.1
    reproducible: Always
    resolved: ""
    status: Open
    title: H264 outperforms HEVC SSIM at 3 Mbps, 1280x720
