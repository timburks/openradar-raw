apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "51091611"
    labels:
        datastore_id: "4979396226056192"
data:
    classification: UI/Usability
    created: "2019-05-24T01:55:51.523794Z"
    description: "Area:\r\nFoundation\r\n\r\nSummary:\r\nUtilizing claimed \"https\" scheme redirection is the only reliable generic way of identifying a native OAuth 2.0 client. In iOS, Universal Links should NOT require user interaction when used for redirection flows in the ever popular delegation protocol.\r\n---\r\nThe best current practices for OAuth 2.0 implementation in Native Applications are outlined in RFC8252 and recommend:\r\n- External user-agents should be used for authorization requests. Safari and the in-app browser tabs—SFSafariViewController, SFAuthenticationSession, and ASWebAuthenticationSession—can be used in iOS.\r\n- In order to prevent client impersonation, the (public) client software needs to be identified with means other than a client secret: \r\n1. The user could verify the client information and provide their consent for client authorization\r\n2. Claimed \"https\" scheme could be used in the redirection URI\r\n\r\nThe consent screen relies on user's input; hence, it may not guarantee client identification, allowing for mistakes. In addition, the consent screen cannot be implemented consistently in iOS. The authentication classes impose a mandatory consent dialog that lacks client identifier, showing only the app's (product) name. Hence, a separate consent screen is required from the authorization server in all cases. When the authentication classes are used for authorization, the user will be asked for their consent an extra time. A redundant user interaction, especially on mobile, deteriorates the user experience. \r\n\r\nClaimed \"https\" scheme redirection URI could serve as a client identifier and should NOT require additional user input. This, however, cannot be achieved with the current implementation of Universal Links. If the external user-agent is initiated/opened with the authorization URL, redirecting to a Universal Link from the authorization endpoint does not open the associated app. An extra, intermediate screen is required, from which the authorization request has to be made. In iOS 10+, with the in-app browser tabs, the user has to initiate the authorization request in order for a Universal Link to be redirected to the app. The  request can be made automatically in Safari, but an intermediate screen is still required. Also, using Safari requires leaving the app. In iOS 9, Universal Links are not redirected to the app.\r\n\r\nSteps to Reproduce:\r\nInitiate an external user-agent with an OAuth 2.0 authorization URL (RFC6749, section-4.1.1). Provide a Universal Link as the `redirect_uri` parameter. Do not introduce any additional screens, like a consent dialog from the authorization server, and take the user directly to the authorization endpoint. \r\n\r\nAn example template app:\r\nhttps://github.com/lapinek/oauth-2-universal-links\r\n\r\nExpected Results:\r\nRedirecting to a Universal Link opens the app\r\n\r\nActual Results:\r\nThe Universal Link is opened in the user-agent\r\n\r\nVersion/Build:\r\niPhone 6s: iOS 11.4.1 (15G77)\r\nXcode 10.2.1 (10E1001): iOS 10.3.1 (14E8301), iOS 11.4 (15F79), iOS 12.2 (16E226)"
    email: konstantin.lapine@forgerock.com
    modified: "2019-07-01T21:39:46.956791Z"
    number: "51091611"
    number_intvalue: 51091611
    originated: May 23 2019, 6:43 PM
    parent_number: '&{NULL_VALUE}'
    product: iOS + SDK
    product_version: iOS 11+
    reproducible: Always
    resolved: ""
    status: ""
    title: OAuth 2.0 redirection with Universal Links should NOT require user interaction
