apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "48587226"
    labels:
        datastore_id: "4972869587042304"
data:
    classification: Suggestion
    created: "2019-03-05T02:58:46.946203Z"
    description: "I'm writing a tool in Swift that automates downloading and installing Xcode. It's a reimplementation of https://github.com/xcpretty/xcode-install. The goal is to have a tool that can download and install Xcode, including any additional steps that are needed to be able to use the computer for development purposes. Some of these steps, like accepting Xcode license agreements or enabling developer mode, require superuser privileges. I understand that these specific tasks aren't all public API, but I believe that this problem generalizes to other situations where Swift is used as a scripting language to automate tasks on macOS.\r\n\r\nIt seems like there’s no good way to escalate privileges on macOS in a command-line app, especially with Swift. Because of this, I worry that the solution many people (including myself) will choose will be worse even than if something like system() or AuthorizationExecuteWithPrivileges were still available to use.\r\n\r\nOptions that I've considered are:\r\n\r\n- sudo in Process: sudo doesn’t read from stdin so this doesn't work\r\n- capture sudoer's password with readpassphrase and pipe to sudo -S in Process: doesn't make me feel great that I'm impersonating sudo and the passphrase is in my memory space for a time. Also requires checking sudo -nv in order to replicate the normal sudo behaviour when a sudoer has cached privileges.\r\n- SMJobBless: requires an app bundle\r\n- AuthorizationExecuteWithPrivileges: deprecated\r\n- system(): unavailable in Swift\r\n- Run the entire tool with sudo: unnecessary and unwanted. Perhaps I could drop the extra privileges when possible, but I haven't explored this.\r\n- Reverse-engineer the privileged process and try to reimplement in a way if relevant API that I can use exists. For example, this could work for `xcodebuild -license agree` because I can use authopen to get a privileged file handle to /Library/Preferences/com.apple.dt.Xcode.plist. This probably won't work in all cases, and is a brittle solution.\r\n- Use another language: In my concrete example, the original Ruby implementation does this trivially, but I'd like to use Swift instead.\r\n\r\nI don't have a strong opinion about what the ideal API to solve this problem would be, and I don't have a lot of security experience to guide a suggestion. The API I want probably looks like AuthorizationExecuteWithPrivileges, where I can describe a command or Process that is run with elevated privileges if the user permits. Another option that would align with SMJobBless would be to add API that allows registering a privileged helper that isn't in an app bundle but with the same code signing requirements. At that point perhaps the same launchd on-demand launching and XPC mechanisms could be used. I'd rather not have to ship two executables though, so this loses the convenience SBJobBless has for app bundles."
    email: brandon@brandonevans.ca
    modified: "2019-03-05T02:58:46.946394Z"
    number: "48587226"
    number_intvalue: 48587226
    originated: 2019/03/04
    parent_number: '&{NULL_VALUE}'
    product: macOS + SDK, Swift
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Open
    title: No clear best practice for privilege escalation in Swift CLI tool
