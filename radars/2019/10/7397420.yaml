apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "7397420"
    labels:
        datastore_id: "5039593078390784"
data:
    classification: Incorrect/Unexpected Behavior
    created: "2019-10-21T11:42:11.470089Z"
    description: "When creating windows on Mac Catalyst, it would be expected for those UIWindows to have a tintColor matching the systems accent color, that is set by the user in System Preferences. However, currently the window's tintColor is always the default system blue color after creating a new UIWindow.\r\n\r\nThis causes most controls, that rely on the tintColor, to stay blue, while other UI elements, which seems to be only UIButtons or subclasses of it, to get the system's accent color as their tintColor.\r\n\r\nExpected Behavior:\r\nA new UIWindow should have the system accent color as its tintColor.\r\n\r\nCurrent Behavior:\r\nA new UIWindow has a system blue color as its tintColor.\r\n\r\nIn PDF Viewer we currently use a workaround to use the accent color as the window tint color by creating a dummy UIButton and retrieve its tint color to set it on the window, like this:\r\n\r\nclass AccentColoredWindow: UIWindow {\r\n\r\n    override init(windowScene: UIWindowScene) {\r\n        super.init(windowScene: windowScene)\r\n        setupTintColor()\r\n    }\r\n\r\n    private func setupTintColor() {\r\n        let tintDummyButton = UIButton()\r\n        // This matches the systems accent color.\r\n        self.tintColor = tintDummyButton.tintColor\r\n    }\r\n}\r\n\r\nHowever, it would be expected for this to work out of the box, without having to rely on this workaround."
    email: stefan.kieleithner@gmail.com
    modified: "2019-10-21T11:42:11.470224Z"
    number: "7397420"
    number_intvalue: 7397420
    originated: 10/21/19
    parent_number: '&{NULL_VALUE}'
    product: macOS
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Open
    title: 'Catalyst: Windows should be tinted using the system accent color'
