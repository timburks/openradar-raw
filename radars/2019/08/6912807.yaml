apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "6912807"
    labels:
        datastore_id: "5042232436457472"
data:
    classification: Issue
    created: "2019-08-03T11:38:11.898936Z"
    description: "Xcode uses an old format for describing is build system. It's time to move to a filesystem-based workflow.\r\n\r\nEver since I've begun developing with Xcode, I've been mystified by the .pbxproj file format. \r\n\r\nOn the one hand, it's designed to be human-readable, resembling JSON but no cigar. Older versions of PBX were written as a plist. \r\nOn the other hand, it's anything but readable: there are numerous entities in the file, all connected using UUIDs and arranged in a non-trivial way. Furthermore, the format is not documented and therefore all 3rd-party tools are reverse-engineering it by definition.\r\nThere are several drawbacks to this method:\r\n1. Being textual, it is overly verbose and hard to read or parse.\r\n2. Being machine-generated, it changes in unexpected ways which is hard for VCS tools to diff and merge.\r\n3. On large teams, the project complexity causes the file to be extremely large and hard to maintain. Splitting code into subprojects only spreads the problem around.\r\n4. Using any sort of 3rd-party tools is difficult due to the format's complexity.\r\n5. Managing more than one target makes it extremely easy to do the wrong thing and fail to manage your code properly.\r\n6. Small modifications can cause Xcode to perform large rebuilds, unnecessarily.\r\n\r\nNumerous 3rd-party tools were made to deal with PBX's drawbacks:\r\nXcodeproj, written in Ruby, was made by the CocoaPods project. It is used by the package manager itself as well as in many independent projects, such as Xcake, which generates project files from scratch by using a small file and a special DSL format.\r\nAdditionally, there are projects such as XcodeGen for generation and Xcproj for project manipulation. xUnique is a Python script that tries to make the structure more deterministic to aid with VCS diffs and merges.\r\nLarge corporations have invested numerous human-years into developing alternative build systems that are meant to completely obviate Xcode - Buck by Facebook and Bazel by Google. These have required numerous human-years of development and emphasize the need for a better first-party solution.\r\n\r\nNewer tools from Apple, such as the Swift Package Manager, do not use PBX but rather a filesystem-based methodology together with a package manifest file. This is also the case for many other package management systems and build toolchains, such as RubyGems, various JS build systems, Buck and Bazel. \r\nIn fact, the newly announced SwiftPM integration with Xcode adds the packages as external targets and does not generate any PBX files for them. This proves, among other things, that Apple view PBX as a legacy model of project management and that modern tools are more than capable of being a replacment.\r\n\r\nIt's certain that more work is needed as the PBX stores a lot of information. However, it's been proven more than once that large projects can be easily described by the filesystem with the addition relatively small build manifest files.\r\n\r\nIn conclusion, Xcode should stop using the ancient PBX format as the source-of-truth for its build system and move to a modern, filesystem-and-manifest based format."
    email: igormaka@gmail.com
    modified: "2019-08-03T11:38:11.899088Z"
    number: "6912807"
    number_intvalue: 6912807
    originated: 3 aug 2019
    parent_number: '&{NULL_VALUE}'
    product: Xcode
    product_version: 1.0 - 11.0
    reproducible: YES
    resolved: ""
    status: Open
    title: 'PBX must be destroyed, and here''s why:'
