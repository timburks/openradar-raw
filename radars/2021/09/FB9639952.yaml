apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: FB9639952
    labels:
        datastore_id: "5029416321155072"
data:
    classification: Incorrect behavior
    created: "2021-09-20T13:09:11.960765Z"
    description: "Please describe the issue:\r\n\r\nThe iOS / tvOS project I am working on could always be successfully archived on our continuous integration / delivery servers running Xcode 12.x, both for internal nightly / beta distribution as well as for TestFlight and App Store Connect. These servers have run all versions of Xcode 12.x and now run 12.5. After our servers were updated to Xcode 13 RC, though, archiving of our application started to fail almost all the time.\r\n\r\nBy looking at the compilation logs we discovered that this archiving problem occurs when compiling one of our SPM source packages A, which itself uses a binary SPM package B as transitive dependency. The line on which compilation fails is a line in the source code of A where the `B.framework` is imported, with the error message \"Module 'B' not found\", indicating that Xcode failed to locate B.framework. I first suspected `B.XCFramework` might not be available from the local SPM cache for some reason but after verification everything looked normal.\r\n\r\nTo investigate this issue further I started from a simple project (Xcode iOS app template), just adding A as SPM dependency (and thus transitively B). To my surprise this simple project could successfully be archived, and reliably. I then started adding other SPM dependencies from GitHub to this simple project until I found that, when a sufficiently large number of dependencies have been added (~6 additional packages in my case), archiving starts to fail.\r\n\r\nThe difference can be seen in the compilation logs. When everything works fine (Xcode 12.5 or small number of SPM dependencies), the `ProcessXCFramework` operation is performed early in the compilation cycle for each involved SPM binary package, making the binary available to compile packages depending on it. This is what ensures that B.framework is available when the A package is compiled. When too many SPM dependencies are added to the project, though, the `ProcessXCFramework` step does not appear in the log anymore for some obscure reason, which is why compilation of the A package fails.\r\n\r\nWe also learned a few things during our investigations:\r\n\r\n- When using Build & run the problem does not seem to happen (this is why we discovered it on our CI servers first, though archiving on a development Mac suffers from the same issues).\r\n- When enabling \"Manual order\" instead of \"Dependency order\" in the application scheme build settings, the problem disappears entirely. If toggling the setting back to \"Dependency order\" the problem appears again. I therefore suspect that some kind of racing condition in build parallelization could explain this issue.\r\n- Similar issues have been reported on the Swift forums (e.g. https://forums.swift.org/t/use-xcodebuild-swift-package-with-binarytarget-logic-flaw/41579) and might be related.\r\n\r\nThank you very much for investigating this issue.\r\n\r\n\r\n\r\nPlease list the steps you took to reproduce the issue:\r\n\r\nI joined a sample project to this issue with which your can reproduce the issue. Since we might be facing a race condition here are our hardware specifications:\r\n - MacBook Pro (15-inch, 2016), 2.7 GHz Quad-Core Intel Core i7.\r\n - Mac Mini, 3.0GHz Intel Core i5 6-Core (we have 3 of them for our CI).\r\n\r\nPlease follow the steps below to reproduce the issue:\r\n\r\n1. Open the attached zip file which contains a sample project with Xcode 13 RC.\r\n2. This project itself is a blank app with almost no code, but a few dependencies:\r\n    - SRG Analytics is an SPM package we offer, which uses other binary packages (comScore, TCCore, TCSDK) as dependencies. What the code does is irrelevant, these packages simply play the role of A and B from the discussion above, respectively. You can check the SRG Analytics associated Package.swift to see how the binary packages are referenced (the package manifest is also attached to this issue; these packages are publicly available as well on GitHub).\r\n    - A mixture of other 3rd party dependencies pulled with SPM. \r\n3. Provide a code signing team and an app id so that code signing is setup properly for archiving.\r\n4. Archive the project with Xcode 13 RC. Archiving fails with the \"Module 'xxx' not found\" error (xxx is either comScore, TCCore or TCSDK, one of our binary dependencies).\r\n\r\nIf you perform the same steps with Xcode 12.5 archiving is successful in all cases.\r\n\r\nUsing Xcode 13 RC you can also verify the following observations and maybe gain some additional insights:\r\n\r\n- Building and running the project in the simulator or on a device works fine.\r\n- If you enable \"Manual order\" in the application scheme build settings the project archives fine.\r\n- If you restore \"Dependency order\" in the scheme build settings and remove a few SPM dependencies (keeping e.g. only SRG Analytics and swift-collections), the project archives fine.\r\n\r\nI also attached two compilation logs to this issue:\r\n\r\n- `Archive_failure.txt`: Obtained with the sample project setup. You can verify that `ProcessXCFramework` is nowhere to be found in the log.\r\n- `Archive_success.txt`: Obtained with the sample project by enabling \"Manual order\" in the scheme build settings, which makes archiving successful. `ProcessXCFramework` can be found at the top of the log.\r\n\r\n\r\n\r\nWhat did you expect to happen?\r\n\r\nArchiving a project having any number of dependencies (source and binary packages, some of them possibly with transitive dependencies) should work, as it was the case with Xcode 12.5.\r\n\r\n\r\n\r\nWhat actually happened?\r\n\r\nArchiving a project having several dependencies and binary transitive dependencies fails in Xcode 13 RC. As the number of packages is increased packages referencing binary packages will fail to compile correctly."
    email: defagos@gmail.com
    modified: "2021-12-09T12:23:19.511426Z"
    number: FB9639952
    number_intvalue: 9639952
    originated: Sep 20, 2021
    parent_number: '&{NULL_VALUE}'
    product: Xcode
    product_version: "13"
    reproducible: Always
    resolved: Fixed
    status: Closed
    title: 'Xcode 13 regression: Archiving of projects referencing binary packages fails with increasing number of packages'
