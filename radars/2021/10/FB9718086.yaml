apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: FB9718086
    labels:
        datastore_id: "4998741127856128"
data:
    classification: Incorrect/Unexpected Behavior
    created: "2021-10-21T22:36:03.544298Z"
    description: "Certain views in UIKit required a double layout pass in order to size correctly. The most common of these views is a multiline UILabel which needs a first layout pass to determine its max available width, and then a second layout pass in order to determine its height given that width. To make this work with AutoLayout, UILabel uses special flags which give it a double layout pass.\r\n\r\nWe are looking to wrap UILabel using `UIViewRepresentable` in order to continue using special views with a double layout pass requirement in SwiftUI. We are using a generalized wrapper for UIKit views we wish to expose to SwiftU. We have to use a GeometryReader in order to make a double layout pass and then are required to measure the UIView twice, once in each layout pass. We'd like to avoid this extra code complexity and the negative performance impact of these measurements and layout passes when possible.\r\n\r\nCould SwiftUI provide a more effective method for supporting UIKit views that require a double layout pass? It seems like SwiftUI could use its knowledge of the available size provided to a view in order to set the preferredMaxLayoutWidth of the UILabel on the first layout pass.\r\n\r\nAfter some Googling it appears that other developers are encountering this limitation."
    email: bryn.bodayle@gmail.com
    modified: "2023-06-06T22:09:46.766011Z"
    number: FB9718086
    number_intvalue: 9718086
    originated: 10/21/21
    parent_number: '&{NULL_VALUE}'
    product: SwiftUI Framework
    product_version: iOS 15
    reproducible: Always
    resolved: ""
    status: Closed
    title: Insufficient API to Efficiently Support Wrapping UIKit Views with Double Layout Pass
