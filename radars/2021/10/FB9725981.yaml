apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: FB9725981
    labels:
        datastore_id: "4940296521515008"
data:
    classification: Incorrect/Unexpected Behavior
    created: "2021-10-27T20:37:25.776013Z"
    description: "Starting in macOS 12 (“Monterey”), when you attempt to dlopen a dylib by absolute path, if that path does not exist, dlopen attempts a “fallback” by trying to load the dylib from other locations, such as the dyld shared cache. This is contrary to the POSIX spec for dlopen, which is clear on the behavior:\r\n\r\nhttps://pubs.opengroup.org/onlinepubs/9699919799/functions/dlopen.html\r\n\r\n> The file argument is used to construct a pathname to the executable object file.\r\n> If file contains a <slash> character, the file argument is used as the pathname\r\n> for the file. Otherwise, file is used in an implementation-defined manner to yield\r\n> a pathname.\r\n\r\nmacOS does make some specific extensions to this logic for paths that look like framework paths. These exceptions are not relevant to this bug or discussion.\r\n\r\nI discovered this problem when attempting to build the Net::SSLeay Perl module for MacPorts. See https://github.com/macports/macports-ports/pull/12704 and https://trac.macports.org/ticket/63415. That module’s Makefile.PL contained logic that caused it to attempt to locate a suitable libcrypto by attempting to dlopen /opt/local/libcrypto.dylib before attempting /opt/local/lib/libcrypto.dylib. MacPorts OpenSSL does have its libcrypto.dylib available at the latter path, but there’s nothing at the former. As of macOS 12, dyld handling of the missing dylib has changed, and libcrypot.dylib is loaded from /usr/lib/libcrypto.dylib (that path is physically absent on disk, but the dylib is loaded from the dyld shared cache). libcrypto.dylib is “poisoned” to prevent being loaded by non-Apple executables, and has a load-time initializer that calls abort().\r\n\r\nTo see this in action, with MacPorts installed in /opt/local (the default), and MacPorts perl5.28 installed (sudo port install perl5.28):\r\n\r\nmark@sweet16 zsh% curl --remote-name --silent https://www.cpan.org/modules/by-module/Net/Net-SSLeay-1.90.tar.gz\r\nmark@sweet16 zsh% tar -zxf Net-SSLeay-1.90.tar.gz \r\nmark@sweet16 zsh% cd Net-SSLeay-1.90 \r\nmark@sweet16 zsh% /opt/local/bin/perl5.28 Makefile.PL\r\nDo you want to run external tests?\r\nThese tests *will* *fail* if you do not have network connectivity. [n] \r\n*** Found OpenSSL-1.1.1l installed in /opt/local\r\n*** Be sure to use the same compiler and options to compile your OpenSSL, perl,\r\n    and Net::SSLeay. Mixing and matching compilers is not supported.\r\nChecking if your kit is complete...\r\nLooks good\r\nWARNING: /opt/local/bin/perl5.28 is loading libcrypto in an unsafe way\r\nzsh: abort      /opt/local/bin/perl5.28 Makefile.PL\r\n\r\nPresumably, you do not see this problem with the same Perl module using the Apple-shipped Perl, because the Apple-shipped interpreter is signed by Apple and is not forbidden to load libcrypto.dylib. For example (using Python this time), Apple code can load /usr/lib/libcrypto.dylib with just a stern warning but without a hard abort by default:\r\n\r\nmark@sweet16 zsh% /usr/bin/python2\r\n[…]\r\n>>> import ctypes\r\n>>> ctypes.cdll.LoadLibrary('/usr/lib/libcrypto.dylib')\r\nWARNING: Executing a script that is loading libcrypto in an unsafe way. This will fail in a future version of macOS. Set the LIBRESSL_REDIRECT_STUB_ABORT=1 in the environment to force this into an error.\r\n<CDLL '/usr/lib/libcrypto.dylib', handle fff1407e9340 at 1051e8050>\r\n>>>\r\n\r\nwhile non-Apple code cannot:\r\n\r\nmark@sweet16 zsh% /opt/local/bin/python3\r\n[…]\r\n>>> import ctypes\r\n>>> ctypes.cdll.LoadLibrary('/usr/lib/libcrypto.dylib')\r\nWARNING: /opt/local/Library/Frameworks/Python.framework/Versions/3.9/Resources/Python.app/Contents/MacOS/Python is loading libcrypto in an unsafe way\r\nzsh: abort      /opt/local/bin/python3\r\n\r\nWith a test program, I can easily demonstrate the problem:\r\n\r\nmark@sweet16 zsh% clang -Wall -Werror t_dlopen.c -o t_dlopen\r\n\r\n# OK to load my libcrypto.dylib when it’s present.\r\nmark@sweet16 zsh% ./t_dlopen /opt/local/lib/libcrypto.dylib\r\n\r\n# Control: forbidden to load Apple libcrypto.dylib by absolute path.\r\nmark@sweet16 zsh% ./t_dlopen /usr/lib/libcrypto.dylib\r\nWARNING: /Users/mark/t_dlopen is loading libcrypto in an unsafe way\r\nzsh: abort      ./t_dlopen /usr/lib/libcrypto.dylib\r\n\r\n# dlopen should have failed (ENOENT), but instead it loaded Apple libcrypto.dylib\r\n# which aborts.\r\nmark@sweet16 zsh% ./t_dlopen /opt/local/libcrypto.dylib\r\nWARNING: /Users/mark/t_dlopen is loading libcrypto in an unsafe way\r\nzsh: abort      ./t_dlopen /opt/local/libcrypto.dylib\r\n\r\n# Same:\r\nmark@sweet16 zsh% rm -f /tmp/libcrypto.dylib\r\nmark@sweet16 zsh% ./t_dlopen /tmp/libcrypto.dylib      \r\nWARNING: /Users/mark/t_dlopen is loading libcrypto in an unsafe way\r\nzsh: abort      ./t_dlopen /tmp/libcrypto.dylib\r\n\r\n# Same. This time, instead of being missing, the file exists but is not a dylib.\r\n# dlopen should have failed, but instead it loaded Apple libcrypto.dylib which\r\n# aborts.\r\nmark@sweet16 zsh% touch /tmp/libcrypto.dylib\r\nmark@sweet16 zsh% ./t_dlopen /tmp/libcrypto.dylib\r\nWARNING: /Users/mark/t_dlopen is loading libcrypto in an unsafe way\r\nzsh: abort      ./t_dlopen /tmp/libcrypto.dylib\r\n\r\n# When the file is a dylib, dlopen succeeds.\r\nmark@sweet16 zsh% cp /opt/local/lib/libz.dylib /tmp/libcrypto.dylib\r\n\r\n# When the file can’t be opened, dlopen should have failed (EPERM), but instead it\r\n# loads Apple libcrypto which aborts.\r\nmark@sweet16 zsh% chmod 0 /tmp/libcrypto.dylib \r\nmark@sweet16 zsh% ./t_dlopen /tmp/libcrypto.dylib\r\nWARNING: /Users/mark/t_dlopen is loading libcrypto in an unsafe way\r\nzsh: abort      ./t_dlopen /tmp/libcrypto.dylib\r\n\r\n# When it’s a directory instead of a file, dlopen should have failed (EISDIR), but\r\n# instead it loads Apple libcrypto which aborts.\r\nmark@sweet16 zsh% rm -f /tmp/libcrypto.dylib\r\nmark@sweet16 zsh% mkdir /tmp/libcrypto.dylib\r\nmark@sweet16 zsh% ./t_dlopen /tmp/libcrypto.dylib\r\nWARNING: /Users/mark/t_dlopen is loading libcrypto in an unsafe way\r\nzsh: abort      ./t_dlopen /tmp/libcrypto.dylib\r\n\r\nI experience the above on:\r\n\r\nmark@sweet16 zsh% sw_vers\r\nProductName:\tmacOS\r\nProductVersion:\t12.0.1\r\nBuildVersion:\t21A559\r\n\r\nOn macOS 11.6 and earlier, I do not see the above problems. dlopen behaves according to my expectations."
    email: mark@chromium.org
    modified: "2021-10-27T20:37:25.776167Z"
    number: FB9725981
    number_intvalue: 9725981
    originated: "2021-10-27"
    parent_number: '&{NULL_VALUE}'
    product: macOS/‌Something else not on this list
    product_version: 12.0.1 21A559
    reproducible: Always
    resolved: ""
    status: Open
    title: '[Chrome] dlopen, when given an absolute path, loads unintended dylibs'
