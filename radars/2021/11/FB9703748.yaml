apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: FB9703748
    labels:
        datastore_id: "5041527457841152"
data:
    classification: Incorrect/Unexpected Behavior
    created: "2021-11-13T12:46:10.273259Z"
    description: "On a  \r\n1. MacBook Pro (15-inch, 2018) i7 room heater :-)\r\n2. macOS Monterey 12.0 Beta 12 (21A5552a)\r\n3. Xcode 3.0 beta 5 (13A5212g)\r\n\r\n\r\nI’m finding that any previously set focusValues are not being restored when focus is moved away from, and then back to the original window (and focused field)\r\n\r\n1. Compile and run attached example app and OtherView starts off correctly showing “No focusedScientist”\r\n2. Highlight the contents of the  ContentView TextField and OtherView correctly shows the name of the scientist as focused, e.g. “Charpentier”\r\n3. Click onto any other app, e.g. Finder, Xcode and OtherView correctly shows “No focusedScientist”\r\n4. Finally click back onto example app and observe that the ContentView TextField showing the scientist’s name remains highlighted, but the OtherView TextField is now incorrectly showing “No focusedScientist” despite this.\r\n\r\nCode \r\n\r\nimport SwiftUI\r\n\r\n@main\r\nstruct macosFocusedValueFun: App {\r\n    var body: some Scene {\r\n        WindowGroup {\r\n            ContentView()\r\n        }\r\n        .commands {\r\n            ScientistsCommands()\r\n        }\r\n    }\r\n}\r\n\r\nstruct ScientistsCommands: Commands {\r\n    @FocusedValue(\\.scientist) var focusedScientist: String?\r\n\r\n    var body: some Commands {\r\n        print(\"\\t Building the CommandMenu, focusedText = \\(String(describing: focusedScientist))\\n\")\r\n\r\n        return CommandMenu(\"Scientists\") {\r\n            if let fs = focusedScientist {\r\n                Button(\"Action using selection = \\\"\\(fs)\\\"\") { /* Do something with the selection */ }\r\n            } else {\r\n                Button(\"Action with no selection\") { /* Do something different if no selection */ }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nstruct ContentView: View {\r\n    @State var scientist: String = \"\"\r\n    var body: some View {\r\n        Form {\r\n            OtherView()\r\n\r\n            TextField(\"ContentView\", text: $scientist, prompt: Text(\"Enter text here\"))\r\n                .focusedValue(\\.scientist, scientist)\r\n\r\n                .onAppear {\r\n                    /// Add some data so that when there are multiple windows it's a bit easier to distiguish between them\r\n                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {\r\n                        scientist = [\r\n                            \"Curie\", \"Bell Burnell\", \"Meitner\", \"Hodgkin\", \"Franklin\", \"Herschel\",\r\n                            \"Charpentier\", \"Doudna\",\r\n                        ]\r\n                        .randomElement() ?? \"\"\r\n                    }\r\n                }\r\n        }\r\n        .frame(width: 300, height: 200)\r\n    }\r\n}\r\n\r\nstruct OtherView: View {\r\n    @FocusedValue(\\.scientist) var focusedScientist: String?\r\n    var body: some View {\r\n        TextField(\"OtherView\", text: .constant(focusedScientist ?? \"No focusedScientist\"), prompt: Text(\"Enter text in ContentView\"))\r\n    }\r\n}\r\n\r\nstruct MyKey: FocusedValueKey {\r\n    typealias Value = String\r\n}\r\n\r\nextension FocusedValues {\r\n    var scientist: String? {\r\n        get { self[MyKey.self] }\r\n        set {\r\n            guard self[MyKey.self] != newValue else {\r\n                /// Never gets fired ...\r\n                print(\"guard: not setting newValue = \\(String(describing: newValue)) == existing\")\r\n                return\r\n            }\r\n            /// Even with only a single window this gets called at least twice each time a new focuseText value is set. Which, together with the guard never firing,\r\n            /// implies that focusedText is being kept on a per Window instance basis, i.e. with just one window mainWindow and keyWindow\r\n            print(\"=============================================================\") /// Delimit blocks of action triggered by updates\r\n            print(\"Setting newValue = \\(String(describing: newValue))\")\r\n            self[MyKey.self] = newValue\r\n        }\r\n    }\r\n}"
    email: jonathan.hume@gmail.com
    modified: "2022-09-15T11:08:39.680204Z"
    number: FB9703748
    number_intvalue: 9703748
    originated: 14/11/2021
    parent_number: '&{NULL_VALUE}'
    product: SwiftUI Framework
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Closed
    title: switftUI's focusedValue is not being set on return of focus to an app's Windows
