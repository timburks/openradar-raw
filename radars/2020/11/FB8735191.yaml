apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: FB8735191
    labels:
        datastore_id: "5024962809167872"
data:
    classification: Application Crash
    created: "2020-11-24T00:55:10.878215Z"
    description: "As of macOS 11.0db6 20A5364e, all arm64 code must be signed. Starting with Xcode 12.0b4 12A8179i, ld64 adds an ad-hoc “linker-signed” code signature by default when linking arm64 code. More information at https://developer.apple.com/documentation/macos-release-notes/macos-big-sur-11-universal-apps-beta-release-notes#Code-Signing.\r\n\r\nSome operations, like strip, modify executables such that the signature becomes invalid. In the past, on x86_64, such operations were normally done prior to signing, and since signatures were not universally required system-wide, this posed no problem. Now, these operations will invalidate even linker-signed code, causing it to be rejected by the system with SIGKILL in xnu/bsd/kern/kern_cs.c cs_invalid_page.\r\n\r\nThis situation is release-noted at https://developer.apple.com/documentation/xcode-release-notes/xcode-12_2-beta-release-notes#Apple-Clang-Compiler, which recommends running codesign --sign after running tools such as strip.\r\n\r\nIf an attempt to execute the code to be re-signed is made before it is re-signed, while its signature is invalid, code signing subsequently fails.\r\n\r\nTo demonstrate, I will build a simple no-op program (attached), strip it (invalidating its linker-signed code signature), attempt to execute it (fails, as designed), and then attempt to sign it.\r\n\r\nmark@arm-and-hammer zsh% cat t_noop.c\r\nint main(int argc, char* argv[]) { return 0; }\r\nmark@arm-and-hammer zsh% clang -Wall -Werror t_noop.c -o t_noop\r\nmark@arm-and-hammer zsh% ./t_noop\r\nmark@arm-and-hammer zsh% strip t_noop\r\n/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/strip: warning: changes being made to the file will invalidate the code signature in: /Users/mark/t_noop\r\nmark@arm-and-hammer zsh% ./t_noop\r\nzsh: killed     ./t_noop\r\nmark@arm-and-hammer zsh% codesign --sign=- t_noop\r\nt_noop: the codesign_allocate helper tool cannot be found or used\r\nmark@arm-and-hammer zsh% codesign --verify --verbose t_noop\r\nt_noop: invalid signature (code or signature have been modified)\r\nIn architecture: arm64\r\nmark@arm-and-hammer zsh% ./t_noop\r\nzsh: killed     ./t_noop\r\n\r\nIf no attempt to execute t_noop is made in between the “strip” and “codesign --sign”, re-signing completes successfully.\r\n\r\nThe message “the codesign_allocate helper tool cannot be found or used” comes from codesign, indicating errSecCSHelperFailed, is being shown when codesign_allocate does not complete successfully but is instead killed by SIGKILL. This appears in the system log:\r\n\r\n2020-09-23 20:34:18.105692-0400 0x7070     Default     0x0                  709\r\n   0    ReportCrash: Parsing corpse data for pid 1843\r\n2020-09-23 20:34:18.105787-0400 0x7070     Default     0x0                  709\r\n   0    ReportCrash: Parsing corpse data for process codesign_allocat [pid 1843]\r\n2020-09-23 20:34:18.105228-0400 0x7085     Default     0x0                  0\r\n   0    kernel: CODE SIGNING: cs_invalid_page(0x10262c000): p=1843[codesign_allocat] final status 0x23004200, denying page sending SIGKILL\r\n2020-09-23 20:34:18.105274-0400 0x7085     Default     0x0                  0\r\n   0    kernel: CODE SIGNING: process 1843[codesign_allocat]: rejecting invalid page at address 0x10262c000 from offset 0x0 in file \"…/t_noop\" (cs_mtime:1600907652.371077488 == mtime:1600907652.371077488) (signed:1 validated:1 tainted:1 nx:0 wpmapped:0 dirty:0 depth:0)\r\n[…]\r\n2020-09-23 20:34:18.722958-0400 0x7070     Default     0x0                  709\r\n   0    ReportCrash: (CrashReporterSupport) Saved crash report for codesign_allocate[1843] version 0.3 to codesign_allocate_2020-09-23-203418_arm-and-hammer.crash\r\n\r\n/Library/Logs/DiagnosticReports/codesign_allocate_2020-09-23-203418_arm-and-hammer.crash shows, excerpted (the full version is attached):\r\n\r\nProcess:               codesign_allocate [1843]\r\nPath:                  /Applications/Xcode-beta.app/Contents/Developer/Toolchain\r\ns/XcodeDefault.xctoolchain/usr/bin/codesign_allocate\r\nIdentifier:            codesign_allocate\r\nVersion:               0.3\r\nCode Type:             ARM-64 (Native)\r\nParent Process:        codesign [1842]\r\n[…]\r\nException Type:        EXC_BAD_ACCESS (Code Signature Invalid)\r\nException Codes:       0x0000000000000032, 0x000000010262c000\r\nException Note:        EXC_CORPSE_NOTIFY\r\n\r\nTermination Reason:    Namespace CODESIGNING, Code 0x2\r\n[…]\r\nVM Regions Near 0x10262c000:\r\n    MALLOC metadata               102628000-10262c000        [   16K] r--/rwx SM=PRV  \r\n--> mapped file                   10262c000-102634000        [   32K] rw-/rwx SM=COW  Object_id=f2c581cf\r\n    __TEXT                        102794000-102810000        [  496K] r-x/r-x SM=COW  /usr/lib/dyld\r\n\r\nThread 0 Crashed:: Dispatch queue: com.apple.main-thread\r\n0   codesign_allocate                   0x00000001025ab7a8 0x1025a0000 + 47016\r\n1   codesign_allocate                   0x00000001025ab790 0x1025a0000 + 46992\r\n2   codesign_allocate                   0x00000001025a9b84 0x1025a0000 + 39812\r\n3   codesign_allocate                   0x00000001025a7f24 0x1025a0000 + 32548\r\n4   codesign_allocate                   0x00000001025a3818 0x1025a0000 + 14360\r\n5   libdyld.dylib                       0x0000000182641418 start + 4\r\n[…]\r\nBinary Images:\r\n       0x1025a0000 -        0x1025c3fff +codesign_allocate (0.3) <D627D9D9-DE31-3721-B195-9FB789BFF85C> /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/codesign_allocate\r\n\r\nThis is happening in codesign_allocate after it has called mmap to map in the executable to be re-signed, upon first access to a page that the system has already decided is invalid for code signing purposes.\r\n\r\nAny program that attempts to access an executable with a code signature broken in this way will be affected. I am attaching a test program, t_mmap, that innocuously opens a file as data, memory-maps it, and attempts to read from it via that mapping.\r\n\r\nmark@arm-and-hammer zsh% clang -Wall -Werror t_mmap.c -o t_mmap\r\nmark@arm-and-hammer zsh% clang -Wall -Werror t_noop.c -o t_noop\r\nmark@arm-and-hammer zsh% ./t_mmap t_noop\r\nmark@arm-and-hammer zsh% strip t_noop\r\n/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/strip: warning: changes being made to the file will invalidate the code signature in: /Users/mark/t_noop\r\nmark@arm-and-hammer zsh% ./t_noop\r\nzsh: killed     ./t_noop\r\nmark@arm-and-hammer zsh% ./t_mmap t_noop\r\nzsh: killed     ./t_mmap t_noop\r\n\r\nThis access should never have been forbidden. Code signing “kill” semantics are being applied inappropriately to “code” that is not actually being treated as code but as data.\r\n\r\nThe treatment as code is inconsistent, as it requires that the system have (recently?) treated the file with the broken code signature as code and registered the problem via cs_invalid_page. If no attempt to execute the page in question had been made, the attempt to access it via memory mapping will succeed, as expected.\r\n\r\nI have reproduced this on macOS 11.0db8 20A5374i on arm64. I have also reproduced it on macOS 10.15.6 19G2021 on x86_64, but only when the program calling mmap has “kill” semantics enabled, requested with codesign --sign --options=kill. (“runtime” includes “kill” semantics and works as well; “hard” also causes the program to crash, but with SIGBUS instead of SIGKILL, making it potentially recoverable via user-space fault handler, but regardless, it’s inappropriate to deny access when it is not being treated as code.) The “codesign” test case, which fails on arm64, does not fail on x86_64 because codesign_allocate has none of these code signing flags:\r\n\r\nmark@sweet16 zsh% codesign --display --verbose --arch=x86_64 $(xcrun --find codesign_allocate) 2>&1 | grep flags=\r\nCodeDirectory v=20200 size=1481 flags=0x0(none) hashes=41+2 location=embedded\r\n\r\nOn arm64, the code signature flags are irrelevant for these purposes, as the system always enforces “kill” semantics.\r\n\r\nWorkaround: the code signature is attached to the vnode, so force a new vnode such as by, making a copy of the file.\r\n\r\nmark@arm-and-hammer zsh% codesign --sign=- t_noop\r\nt_noop: the codesign_allocate helper tool cannot be found or used\r\nmark@arm-and-hammer zsh% cp t_noop t_noop.new\r\nmark@arm-and-hammer zsh% mv t_noop.new t_noop\r\nmark@arm-and-hammer zsh% codesign --sign=- t_noop\r\nmark@arm-and-hammer zsh% codesign --verify --verbose t_noop\r\nt_noop: valid on disk\r\nt_noop: satisfies its Designated Requirement\r\nmark@arm-and-hammer zsh% ./t_noop\r\n\r\nOr, in my case, I delegated responsibility for the “strip” to ld64 with -s:\r\n\r\nmark@arm-and-hammer zsh% clang -Wall -Werror t_noop.c -o t_noop -Wl,-s\r\nld: warning: option -s is obsolete and being ignored\r\nmark@arm-and-hammer zsh% codesign --verify --verbose t_noop\r\nt_noop: valid on disk\r\nt_noop: satisfies its Designated Requirement\r\nmark@arm-and-hammer zsh% ./t_noop\r\n\r\n(ld64 claims that -s is obsolete and ignored, but it’s just not true.)\r\n\r\nIn this test, the OS (including xnu and the codesign tool) is 11.0db8 20A5374i, and Xcode (including clang, ld64, and codesign_allocate) is 12.2b1 12B5018i."
    email: mark@chromium.org
    modified: "2020-11-24T00:55:10.87841Z"
    number: FB8735191
    number_intvalue: 8735191
    originated: "2020-09-23"
    parent_number: '&{NULL_VALUE}'
    product: Xcode
    product_version: 12.2b1 12B5018i
    reproducible: Always
    resolved: ""
    status: Potential fix identified - in Xcode 12.2
    title: Using codesign to re-sign stripped executable fails, codesign_allocate is killed upon calling mmap to map in executable to be signed
