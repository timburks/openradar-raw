apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: FB8892330
    labels:
        datastore_id: "4938893979811840"
data:
    classification: ""
    created: "2020-11-13T13:05:19.83415Z"
    description: "As a developer when using iOS 14.2 if I have two views A and B, where view A holds an array of data and presents view B using a NavigationLink inside a List passing in an item from the data array.\r\n\r\nWhen the user selects an item in the list. View B is displayed as expected, showing data from the data item passed to it via view A.\r\n\r\nIf any change is performed to the data array in view A, view B does not render an update.\r\nIn iOS 14.1 View B does render an update, however in iOS 14.2 view B does not render an update. \r\nEven if I use Xcode 12.2 RC (full version shown below) with iOS 14.1 simulator View B does render an update, but with 14.2 it does not render an update, but with breakpoints you can see the view model being updated.\r\n\r\nI cannot see any reason for this change in the Release Notes of Xcode 12.2 RC (beta 4 (12B5044c), is this intentional or is there a bug in SwiftUI?\r\n\r\nBelow is the code for the example above.\r\n\r\nimport SwiftUI\r\n\r\nstruct NumberHolder: Identifiable {\r\n    let id = UUID()\r\n    let value:Int\r\n}\r\n\r\nstruct Playground: View {\r\n    @State var numbers:[NumberHolder] = [\r\n        NumberHolder(value:1),\r\n        NumberHolder(value:2),\r\n        NumberHolder(value:3),\r\n        NumberHolder(value:4),\r\n    ]\r\n    var body: some View {\r\n        NavigationView {\r\n            List(numbers.indices) { index in\r\n                let number = numbers[index]\r\n                NavigationLink(destination: VStack {\r\n                    Text(\"Number: \\(number.value)\")\r\n                    Button(\"Increment\") {\r\n                        numbers[index] = NumberHolder(value: number.value + 1)\r\n                    }\r\n                } ) {\r\n                    Text(\"Number: \\(number.value)\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nstruct Playground_Previews: PreviewProvider {\r\n    static var previews: some View {\r\n        Playground()\r\n    }\r\n}\r\n\r\nTaken from https://stackoverflow.com/q/64611300/1132463. Note I am not the author of that Stack Overflow post\r\n\r\nIn addition …\r\nI have the same behaviour in my own code that uses a NavigationLink inside of a List to present a detail view when you select a “row”, the main difference is the change is triggered by an Observable object’s @Published property being updated, which then kicks off the redraw for the whole view hierarchy (I can see this using breakpoints) as the main view is subscribing to it using @EnvironmentObject. \r\nWhen debugging I can see the view with the List updating with the updated model, and the detail view (that’s presented) update with the updated model (using breakpoints in the body property) but just like the previous example the view itself does not update. Also I’m sure I’ve observed view B being called first before view A, and also multiple times, but I might put that down to where I had my breakpoint in the body property, it’s called quite a bit when you have it one line below the body var declaration line. Anyway when an engineer looks into this in the framework implementation I’m sure they will find the issue.\r\n\r\n/// I added the below one day later\r\n\r\nI’ve since progressed in this somewhat.\r\nOn iOS 14.2 if I add a ForEach inside of the list, then add the NavigationLink, then the behaviour is as expected with the detail view updating.\r\n\r\nHowever on WatchOS 7.1 the same does not work, and the detail view is not updated, however the code works fine in WatchOS 7.0\r\n\r\nThe code adjustment that I made (adding the ForEach is)\r\n\r\nstruct NumberHolder: Identifiable {\r\n    let id = UUID()\r\n    let value:Int\r\n}\r\n\r\nstruct Playground: View {\r\n    @State var numbers:[NumberHolder] = [\r\n        NumberHolder(value:1),\r\n        NumberHolder(value:2),\r\n        NumberHolder(value:3),\r\n        NumberHolder(value:4),\r\n    ]\r\n    var body: some View {\r\n        NavigationView {\r\n            List {\r\n                ForEach(numbers.indices) { index in\r\n                    let number = numbers[index]\r\n                    NavigationLink(destination: VStack {\r\n                        Text(\"Number: \\(number.value)\")\r\n                        Button(\"Increment\") {\r\n                            numbers[index] = NumberHolder(value: number.value + 1)\r\n                        }\r\n                    } ) {\r\n                        Text(\"Number: \\(number.value)\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nSo in a nutshell adding ForEach inside the list works with iOS 14.2, but not with WatchOS 7.1"
    email: dessmith@gmail.com
    modified: "2022-11-04T14:29:40.163526Z"
    number: FB8892330
    number_intvalue: 8892330
    originated: 11/11/2020
    parent_number: '&{NULL_VALUE}'
    product: SwiftUI Framework
    product_version: "14.2"
    reproducible: Yes
    resolved: 27/07/2021
    status: Resolved
    title: SwiftUI views presented via NavigationLink inside a List no longer renders an update in iOS 14.2
