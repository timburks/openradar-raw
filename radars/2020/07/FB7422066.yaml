apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: FB7422066
    labels:
        datastore_id: "5004117755822080"
data:
    classification: ""
    created: "2020-07-14T13:56:48.004386Z"
    description: "NOTE: This was fixed in Xcode 12\r\n\r\nWhen access control is specified (with biometrics), iOS13 Simulator fails to read data from the Keychain.\r\nPlease see steps to reproduce and the example project (attached).\r\n\r\nThis is failing in Xcode 11.1 and Xcode 11.2 (that was just released).\r\n\r\nIt was working for me with Xcode 11.2 beta, but now it's broken again.\r\n\r\n====================================================\r\nPlease list the steps you took to reproduce the issue:\r\n====================================================\r\n\r\n- Open the example project.\r\n- Compile for iOS13 Simulator.\r\n- Run the app.\r\n- Observe \"Query2 status: -25300\" printed on the Console\r\n\r\n- Compile for iOS12 Simulator.\r\n- Run the app.\r\n- Observe \"Query2 status: 0 printed on the Console\r\n\r\nFor the relevant Keychain query, see the function testKeychain() in AppDelegate.swift\r\n\r\n====================================================\r\nWhat did you expect to happen?\r\n====================================================\r\nI expect the same keychain query to behave similarly on iOS12 and iOS13 simulators.\r\n\r\n====================================================\r\nWhat actually happened?\r\n====================================================\r\niOS13 Simulator reports that the keychain value was NOT found.\r\n\r\n=====================================================\r\n\r\n    // If run on iOS12 Simulator, status2 will be 0\r\n    // If run on iOS13 Simulator, status2 will be -25300\r\n    func testKeychain() {\r\n        let tag = \"com.flockoffiles.testkeychain.value\"\r\n        let savedData = \"testString\".data(using: .utf8)!\r\n        var aclError: Unmanaged<CFError>?\r\n        \r\n        let emptyAccessControl = SecAccessControlCreateWithFlags(kCFAllocatorDefault,\r\n                                                                 kSecAttrAccessibleWhenUnlockedThisDeviceOnly,\r\n                                                                 SecAccessControlCreateFlags(),\r\n                                                                 //SecAccessControlCreateFlags.biometryCurrentSet,\r\n            &aclError)!\r\n        \r\n        print(emptyAccessControl)\r\n        \r\n        let accessControl =\r\n            SecAccessControlCreateWithFlags(kCFAllocatorDefault,\r\n                                            kSecAttrAccessibleWhenUnlockedThisDeviceOnly,\r\n                                            SecAccessControlCreateFlags.biometryCurrentSet,\r\n                                            &aclError)!\r\n        \r\n        print(\"ACL error: \\(aclError)\")\r\n        \r\n        let query: [String : Any] = [kSecClass as String: kSecClassGenericPassword,\r\n                                     kSecAttrAccount as String: tag,\r\n                                     kSecAttrService as String: tag,\r\n                                     // kSecAttrAccessControl as String: accessControl,\r\n                                     kSecValueData as String: savedData]\r\n        \r\n        var status = SecItemAdd(query as CFDictionary, nil)\r\n        print(\"Query status: \\(status)\")\r\n        if status == errSecDuplicateItem {\r\n            let updateQuery: [String: Any] = [kSecValueData as String: savedData]\r\n            status = SecItemUpdate(query as CFDictionary, updateQuery as CFDictionary)\r\n            print(\"Update status: \\(status)\")\r\n        }\r\n        \r\n        let query2: [String : Any] = [kSecClass as String: kSecClassGenericPassword,\r\n                                      kSecAttrAccount as String: tag,\r\n                                      kSecAttrService as String: tag,\r\n                                      kSecReturnData as String: kCFBooleanFalse!,\r\n                                      kSecUseAuthenticationUI as String: kSecUseAuthenticationUIFail]\r\n        \r\n        var result: CFTypeRef?\r\n        let status2 = SecItemCopyMatching(query2 as CFDictionary, &result)\r\n        \r\n        // If run on iOS12 Simulator, status2 will be 0\r\n        // If run on iOS13 Simulator, status2 will be -25300\r\n        print(\"Query2 status: \\(status2)\")\r\n        \r\n        let query3: [String : Any] = [kSecClass as String: kSecClassGenericPassword,\r\n                                      kSecAttrAccount as String: tag,\r\n                                      kSecAttrService as String: tag,\r\n                                      kSecReturnData as String: kCFBooleanFalse!,\r\n                                      kSecUseAuthenticationUI as String: kSecUseAuthenticationUIFail]\r\n\r\n        let status3 = SecItemDelete(query3 as CFDictionary)\r\n        print(\"Query3 status: \\(status3)\")\r\n        \r\n    }"
    email: serieuxchat@gmail.com
    modified: "2020-12-23T14:58:02.80236Z"
    number: FB7422066
    number_intvalue: 7422066
    originated: "2019-11-01"
    parent_number: '&{NULL_VALUE}'
    product: iOS Simulator
    product_version: "13"
    reproducible: Always
    resolved: ""
    status: Closed
    title: Failure to read the Keychain on iOS 13 Simulator
