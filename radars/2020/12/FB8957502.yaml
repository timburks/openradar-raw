apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: FB8957502
    labels:
        datastore_id: "4984843016339456"
data:
    classification: Bug
    created: "2020-12-30T22:17:50.938545Z"
    description: "macOS prefers use decomposed unicode characters when handling file names and paths. HFS+, for instance, always decomposed names before storing them on disk, making it easy to look up names later, because even if the looked-up name was precomposed, the lookup function would decompose the searched name first and then browse the directory and look for identical (case-insensitive) occurances.\r\n\r\nIn short file names on HFS+ are preserving case but do not preserve normalization.\r\n\r\nWith APFS, this has changed, IIRC: It does also preserve the unicode composition. This makes lookups more complicated for the FS code, but, well, it now works. So far, so good.\r\n\r\nProblem is that I have run into some issues with SMB and NFS mounts: These may also be shared with Linux system, which prefer precomposed file names.\r\n\r\nSo, if a user on a Linux system creates a folder that contains an Umlaut such as \"ü\", it'll end up precomposed on the (ext4) file system.\r\n\r\nNow, I can nicely access files in such a folder from macOS, as long as I only use POSIX functions (which includes the shells such as bash and zsh).\r\n\r\nHowever, when I use NSURL operations, some work and others give me a -260 error. For instance, getting NSURLCanonicalPathKey fails, even in macOS 11.1. Other higher-level functions fail as well, such as trying to open the item with [NSWorkspace openURLs:...]. The NSURL's path property does still hold the original precomposed name, and if I get the path and pass it to a POSIX function, it works. And some of the more basic getResource accessors work as well. Just not the more complex ones.\r\n\r\nI suspect that the code makes calls to fileSystemRepresentation and related functions that normalize (i.e. decomposed) the path before processing it further - but passing this decomposed path to the SMB or NFS server will cause the \"file not found\" error because these servers are doing normalization-sensitive lookups.\r\n\r\nYou can also see the effects in Finder: If you mount a Linux share that contains folder and files with precomposed \"ü\" in their names, either via SMB or NFS, the Finder will fail at several operations, such as Open, Quick Look, Rename, but will succeed in showing basic attributes such as size and dates. Even Get Info works, curiously, even when I invoke it through AppleEvents from my app (Find Any File), curiously!\r\n\r\nSo, to reproduce this, create a dir and a file inside the dir, both using precomposed chars, and see if you can access them via SMB and NFS.\r\n\r\nHere's a simple script to create files with both precomposed and decomposed \"ü\" chars:\r\n\r\n# decomposed ü (u+¨):\r\nue_decomp=$'u\\xCC\\x88'\r\n# precomposed ü:\r\nue_precomp=$'\\xC3\\xBC'\r\n# create two files with the different compositions\r\necho \"${ue_decomp} (decomposed)\" > dec_${ue_decomp}\r\necho \"${ue_precomp} (precomposed)\" > pre_${ue_precomp}\r\n\r\nI hope I gave you enough information to understand the issue. If not, tell me what you tried and I'll see how to give you a better method.\r\n\r\n\r\n--- added an hour later ---\r\n\r\nActually, what I wrote above about what works and what I tested with a NFS mount of a share on a Synology NAS.\r\n\r\nIf I mount the same share via SMB, it's even worse: I cannot see files inside a folder with a _de_composed name (I can see the folder, though). This suggests that SMB (no idea whether it's macOS's SMB client or the SMB server) does convert any name into precomposed representation, assuming all names must be precomposed on the server side.\r\n\r\nSo, for now, please test this with NFS, where at least no side (NFS client and server) seems to mess with the pass and keeps them in their original normalization when passing paths in both directions.\r\n\r\nI wonder, however, if you (FS devs at Apple) decided that what SMB does is the correct way, assuming that remove file systems should always use precomposed chars. If that's true, then you may want to make NFS behave the same way (which would then lead to the same issues that I find with SMB, where I cannot access folder contents whose path contains decomposed chars on the server side), but at least then it's consistent behavior. Currently, NFS and SMB do not behave consistently (SMB tries to be normalization-_in_sensitive while NFS is normalization-sensitive, just like on iOS).\r\n\r\n\r\n--- added a bit later ---\r\n\r\nGood news, everyone! After thinking about the differences of NFS vs. SMB I came up with a simple demonstration that can also happen in the real world. No need for bash scripts!\r\n\r\nSimply do this:\r\n\r\n1. Set up a server with NFS and SMB hosting. I am using a Synology NAS.\r\n2. Mount the same share both with NFS and SMB protocols.\r\n3. Open the SMB volume and create a folder named \"smb_ü\" (this creates a precomposed name on the server). Inside it, place a text file. Verify that you can open the text file.\r\n4. Open the NFS volume and create a folder named \"nfs_ü\" (this creates a decomposed name on the server). Inside it, place a text file. Verify that you can open the text file.\r\n5. Open nfs_ü folder on the SMB share. This does not even show the text file inside. That's because NFS created a decomposed folder name and SMB can't browse those. This may be an issue with the SMB client or server, but I assume you want it to behave that way, assuming all files on a SMB server should be precomposed by default. Only that your NFS client does not play along. So you may want to make NFS behave the same way, i.e. precompose paths when creating files on the server side.\r\n6. Open the smb_ü folder on the NFS share. You'll see the file inside, but double clicking doesn't work. That's the bug I mentioned above about the NSURL ops incorrectly normalizing the path in some cases, thereby failing to access the precomposed path from the server.\r\n\r\n\r\n--- Response by Apple ---\r\n\r\nThis a known NFS issue with precomposed and decomposed.\r\nAs mentioned, Linux systems preform precomposed file names (NFC), while macOS/iOS userspace frameworks all default decomposed (NFD).\r\nSo no matter what is provided to them (NFC or NFD) any pathname that comes in from an Apple framework will always be in NFD and the FS has to deal with.\r\nYou should mount your NFS share using “nfc” parameter to instruct the client to use precomposed instead of the default decomposed.\r\nWe were able to open both precomposed/decomposed files and folders while mounting with “nfc” enabled.\r\nPlease let us know if it helps to resolve the issue.\r\n\r\nmount_nfs manual page :  \r\n   nfc     Convert name strings to Unicode Normalization Form C (NFC) when sending them to the NFS server.  This option may be used to improve interoperability with NFS clients and servers that typically use names in the NFC form."
    email: tempelmann@gmail.com
    modified: "2021-01-18T18:12:38.201255Z"
    number: FB8957502
    number_intvalue: 8957502
    originated: 30 Dec 2020
    parent_number: '&{NULL_VALUE}'
    product: macOS
    product_version: "11.1"
    reproducible: Always
    resolved: ""
    status: Open
    title: NSURL incorrectly handles file paths with precomposed chars from NFS and SMB volumes
