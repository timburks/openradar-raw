apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "21329977"
    labels:
        datastore_id: "6732267485396992"
data:
    classification: Serious Bug
    created: "2015-06-10T22:47:45.01691Z"
    description: "Summary:\r\nThe following crashes the Swift compiler:\r\n\r\nstruct AnotherType {\r\n    init() {\r\n         let crash = OffendingType.staticMember // Crash\r\n    }\r\n}\r\n\r\n// Defined in a framework\r\npublic struct OffendingType {\r\n    public static let staticMember = OffendingType()\r\n}\r\n\r\n\r\nAn example project & crash log are attached to reproduce the issue.\r\nStack trace:\r\n\r\nAssertion failed: (GetSetInfo.getInt().hasValue()), function getSetterAccessibility, file /Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-700.0.38.1/src/swift/include/swift/AST/Decl.h, line 4044.\r\n0  swift                    0x000000010670be0b llvm::sys::PrintStackTrace(__sFILE*) + 43\r\n1  swift                    0x000000010670c54b SignalHandler(int) + 379\r\n2  libsystem_platform.dylib 0x00007fff97ff8eaa _sigtramp + 26\r\n3  libsystem_platform.dylib 0x00007ffeaa881278 _sigtramp + 310936552\r\n4  libsystem_c.dylib        0x00007fff97a9a85f abort + 129\r\n5  libsystem_c.dylib        0x00007fff97a61ea8 basename + 0\r\n6  swift                    0x0000000104ec7390 void filterForDiscriminator<swift::ValueDecl*>(llvm::SmallVectorImpl<swift::ValueDecl*>&, swift::DebuggerClient*) + 0\r\n7  swift                    0x0000000104d8dc14 swift::TypeChecker::getUnopenedTypeOfReference(swift::ValueDecl*, swift::Type, swift::DeclContext*, swift::DeclRefExpr const*, bool) + 180\r\n8  swift                    0x0000000104cf0249 swift::constraints::ConstraintSystem::getTypeOfMemberReference(swift::Type, swift::ValueDecl*, bool, bool, swift::constraints::ConstraintLocatorBuilder, swift::DeclRefExpr const*, swift::constraints::DependentTypeOpener*) + 857\r\n9  swift                    0x0000000104cf1810 swift::constraints::ConstraintSystem::resolveOverload(swift::constraints::ConstraintLocator*, swift::Type, swift::constraints::OverloadChoice) + 800\r\n10 swift                    0x0000000104d45e5f swift::constraints::ConstraintSystem::simplifyConstraint(swift::constraints::Constraint const&) + 1023\r\n11 swift                    0x0000000104cee2fc swift::constraints::ConstraintSystem::addConstraint(swift::constraints::Constraint*, bool, bool) + 28\r\n12 swift                    0x0000000104cf148b swift::constraints::ConstraintSystem::addOverloadSet(swift::Type, llvm::ArrayRef<swift::constraints::OverloadChoice>, swift::constraints::ConstraintLocator*, swift::constraints::OverloadChoice*) + 395\r\n13 swift                    0x0000000104d43ce7 swift::constraints::ConstraintSystem::simplifyMemberConstraint(swift::constraints::Constraint const&) + 7527\r\n14 swift                    0x0000000104d45aac swift::constraints::ConstraintSystem::simplifyConstraint(swift::constraints::Constraint const&) + 76\r\n15 swift                    0x0000000104cee2fc swift::constraints::ConstraintSystem::addConstraint(swift::constraints::Constraint*, bool, bool) + 28\r\n16 swift                    0x0000000104d27922 swift::ASTVisitor<(anonymous namespace)::ConstraintGenerator, swift::Type, void, void, void, void, void>::visit(swift::Expr*) + 4690\r\n...\r\n\r\nSteps to Reproduce:\r\n...\r\n17 swift                    0x0000000104d2b43b (anonymous namespace)::ConstraintWalker::walkToExprPost(swift::Expr*) + 75\r\n18 swift                    0x0000000104e3faec swift::Expr::walk(swift::ASTWalker&) + 76\r\n19 swift                    0x0000000104d261e9 swift::constraints::ConstraintSystem::generateConstraints(swift::Expr*) + 201\r\n20 swift                    0x0000000104d7c4fb swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::Type, bool, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&) + 203\r\n21 swift                    0x0000000104d81dc3 swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::Type, bool, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*) + 243\r\n22 swift                    0x0000000104d828bb swift::TypeChecker::typeCheckBinding(swift::Pattern*&, swift::Expr*&, swift::DeclContext*) + 107\r\n23 swift                    0x0000000104d82a54 swift::TypeChecker::typeCheckPatternBinding(swift::PatternBindingDecl*, unsigned int) + 244\r\n24 swift                    0x0000000104d9dbed validatePatternBindingDecl(swift::TypeChecker&, swift::PatternBindingDecl*, unsigned int) + 861\r\n25 swift                    0x0000000104d9a5fe (anonymous namespace)::DeclChecker::visit(swift::Decl*) + 462\r\n26 swift                    0x0000000104d9a418 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) + 152\r\n27 swift                    0x0000000104de3a64 swift::ASTVisitor<(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void>::visit(swift::Stmt*) + 420\r\n28 swift                    0x0000000104de2d89 (anonymous namespace)::StmtChecker::typeCheckBody(swift::BraceStmt*&) + 25\r\n29 swift                    0x0000000104de22ef swift::TypeChecker::typeCheckConstructorBodyUntil(swift::ConstructorDecl*, swift::SourceLoc) + 879\r\n30 swift                    0x0000000104de1c55 swift::TypeChecker::typeCheckAbstractFunctionBodyUntil(swift::AbstractFunctionDecl*, swift::SourceLoc) + 37\r\n31 swift                    0x0000000104de298a swift::TypeChecker::typeCheckAbstractFunctionBody(swift::AbstractFunctionDecl*) + 138\r\n32 swift                    0x0000000104d69a18 typeCheckFunctionsAndExternalDecls(swift::TypeChecker&) + 200\r\n33 swift                    0x0000000104d6a73c swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int) + 1772\r\n34 swift                    0x0000000104b7d565 swift::CompilerInstance::performSema() + 4133\r\n35 swift                    0x00000001047235b0 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&) + 736\r\n36 swift                    0x00000001047230b3 frontend_main(llvm::ArrayRef<char const*>, char const*, void*) + 2515\r\n37 swift                    0x000000010471f28f main + 1983\r\n\r\nExpected Results:\r\nThe attached project should compiler successfully\r\n\r\nActual Results:\r\nThe Swift compiler crashes\r\n\r\nVersion:\r\nXcode 7.0 (7A120f)\r\nApple Swift version 2.0 (swiftlang-700.0.38.1 clang-700.0.53)"
    email: janoschhildebrand@gmail.com
    modified: "2015-06-28T13:32:04.22219Z"
    number: "21329977"
    number_intvalue: 21329977
    originated: 11-Jun-2015
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 7.0 (7A120f)
    reproducible: Always
    resolved: Duplicate of 20193168
    status: Closed
    title: 'Xcode 7.0 (7A120f): [Swift] Using a static property of a type defined in a framework in an initializer crashes the compiler'
