apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "21371831"
    labels:
        datastore_id: "5668756541931520"
data:
    classification: Enhancement
    created: "2015-06-13T13:22:22.04848Z"
    description: |-
        Here’s a common scenario:
        - you do some fallible operation (that might return nil). For example, you take an untyped JSON dictionary, take elements from it, cast types, etc.
        - If it’s .Some, you want to continue with some further operations, or perhaps just return the value
        - if it’s nil, you want to be more specific and throw an error to report what caused the issue.

        Right now, this requires something like:

        guard let x = … else { throw Error }

        But it would often be more convenient to turn the nil into an error inline, just like you can coalesce nils into concrete values using ??.

        Here’s a nice option:

        let x = try something_that_can_be_nil ?! Error

        Proof of concept: https://twitter.com/radexp/status/608755467377078274
        An example: https://gist.github.com/rnapier/dbffbf54274a880a6ac7
    email: radexpl@gmail.com
    modified: "2015-06-13T13:22:22.04879Z"
    number: "21371831"
    number_intvalue: 21371831
    originated: 13-Jun-2015 03:22 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 7 beta 1 (7A120f)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift 2: an easier way to extract values from Optionals by turning nils into thrown errors'
