apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "21349835"
    labels:
        datastore_id: "5633508550639616"
data:
    classification: Feature (New)
    created: "2015-06-11T23:42:14.46816Z"
    description: "The trajectory of SFSafariViewController is really top notch and we have a strong desire at Twitter to move our Web View code from a custom controller wrapping WKWebView.   The web view is one of the most heavily traffic’d components in our application and if we get the requirements we need from a SFSafariViewController, there would be nothing stopping us from converting over (with the exception of still supporting iOS 7 and 8 of course).\r\n\r\nOur team has enumerated all the code we have in our WebViewController and effectively 90% of the work we do is to reach parity with Safari, and is immediately taken care of by SFSafariViewController.  For that remaining 10%, we do have other work we do today that we would like to have built into SFSafariViewController.\r\n\r\nCritical:\r\n  - Observable loading behavior\r\n     - Did the user wait for the complete load, did they navigate as things were loading, did they close as things were loading?\r\n  - Observable requests and their timings\r\n     - Optimally, a data structure with the W3C NavigationTiming would be the best\r\n     - https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/Overview.html\r\n     - Spoke with Engineer on CFNetwork team about this being exposed with NSURLSession as well and he was in favor\r\n\r\nHigh Priority:\r\n  - Ability to warm the SFSafariViewController before actually presenting it with a URL, URL request, HTML data or file on disk\r\n    - Currently, are investing heavily into warming the shared URL cache for high priority Tweets so that if the user hits that Tweet we will open UIWebView (sadly not WKWebView) with that pre-cached web page.  If we could just warm an SFSafariViewController with the desired link, this would eliminate an enormous amount of effort on our end.\r\n\r\nLower Priority:\r\n   - Observable data usage broken down by the navigation timing\r\n     - Knowing our users’ data costs are critical because in many countries as bytes directly translate into monetary cost\r\n\r\nThe last place where we do a lot of work is w.r.t. handling specific URLs and URL schemes that should all (I would assume) work with the new seamless link support added to iOS 9.\r\n\r\nThanks for everything!\r\nNolan O’Brien,\r\nTech Lead - Twitter Dynamic App\r\n\r\n\r\n[[[[[[[[[[[[[[[[[UPDATE 06/29/2015]]]]]]]]]]]]]]]]]]]]]\r\n\r\nClarification of what we would like to observe regarding SFSafariViewController. It appears that I may have been overly simplistic in my description which leaves room to misinterpret the intent of what we want to observe in the web page loading. I'll try to clarify that here:\r\n\r\n- We really just care about the initial page load: subsequent navigations don't really matter. We really want to measure how often users are getting to the destination they are wanting to go to and measure what the bottlenecks are so that we can work to improve the experience.\r\n- When getting the \"completion status\", we are looking to measure whether the user got to their destination or if they abandoned the attempt and to collect information as to why that would have failed. We'll use this metric to gauge which links/sites are performing poorly for users (but not tied to any specific user).\r\n    - Complete: full page loaded (Green)\r\n    - Navigate: page didn't fully load, but the user did choose to interact with the page (Yellow)\r\n    - Cancel: user gave up waiting for the page to load (Red)\r\n- When getting the request timing info, we only care about requests related to the initial load of the page.\r\n    - The timing of each resource request including redirects, latencies and data used\r\n    - The ordering of each resource request\r\n    - Potentially the latency for loading the javascript for execution on the page (often a culprit of slowdown)\r\n    - Data consumed by each resource request\r\n    - We really don't care about the specific URLs loaded, mostly the types of resources\r\n        - Was it the core HTML? Was it a redirect? Was it javascript? Was it CSS? Was it a large PNG or a small JPG?\r\n        - If the URLs are provided, we would just categorize. If the URLs are not provided, but just the category of the resource, great!\r\n\r\nThe W3C NavigationTiming I brought up is just a well know standard that would provide this info usefully, it's not necessary though.\r\n\r\nBy having this kind of info, we will have greater insight into where we are failing users. We can determine how links load and what the issues that need to be resolved are.\r\n\r\nWith WKWebView/UIWebView we've been able to observe the HTTP redirects (and to an extent Meta-Data refreshes and javascript redirects) to observe that some of the slowest loading web pages have upwards of 12 redirects before finally loading the true URL (this takes multiple dozens of seconds in developing countries). We are already measuring the other timings for resource loads to in order to see if what we can do to improve user perceived latencies. Maintaining these measurements (or even improving them) will provide us the means to positively impact the user experience.\r\n\r\nIn no way do we track user behavior/navigation or even tie the link loaded by the WebView to any user...it's completely anonymized. So anything that would appear to risk user privacy should be considered off the table and a safe/anonymous alternative would be preferred."
    email: nobrien@twitter.com
    modified: "2015-07-02T21:04:39.93009Z"
    number: "21349835"
    number_intvalue: 21349835
    originated: 11-Jun-2015 04:42 PM
    parent_number: '&{NULL_VALUE}'
    product: iOS SDK
    product_version: "9.0"
    reproducible: Always
    resolved: ""
    status: Open
    title: Feature requests for SFSafariViewController from Twitter, Inc
