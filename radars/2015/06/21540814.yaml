apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "21540814"
    labels:
        datastore_id: "6126662601146368"
data:
    classification: Enhancement
    created: "2015-06-25T06:34:32.80753Z"
    description: "It’s nice that you can now use elaborations such as “if case” in Swift 2, but why are these so closely tied to specific statements? \n\nIt seems from my outsider’s perspective that case has two simultaneous functions: to determine whether a pattern matches a given value, and to bind variables and constants for an ensuing scope. But often, it would be helpful to access the first of these functions without the second.\n\nA case in point: a protocol engine has a state machine defined as an enum. In the Connected state, the associated value identifies the peer. Currently, to implement a simple isConnected property, I believe you have to write something like:\n\n    var isConnected: Bool {\n        if case .Connected(_) = state {\n            return true\n        } else {\n            return false\n        }\n    }\n\nBut really, you just want to know whether the state matches the .Connected(_) template; why can’t you just write:\n\n    var isConnected: Bool {\n        return case .Connected(_) = state\n    }"
    email: garth@garthsnyder.com
    modified: "2015-06-25T06:34:32.80779Z"
    number: "21540814"
    number_intvalue: 21540814
    originated: 24-Jun-2015 11:34 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Swift 2
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift: "case" should be set free!'
