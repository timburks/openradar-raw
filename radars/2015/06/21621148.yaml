apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "21621148"
    labels:
        datastore_id: "4625046203006976"
data:
    classification: Enhancement
    created: "2015-06-30T22:44:44.23856Z"
    description: "The Swift 2.0 documentation format is a confusing mixture of Markdown and magically parsed strings that creates a challenging landscape to even know what to expect Xcode to be parsing as special tags.\n\nTake this example:\n\n  /// A magical function that does something with `x` and `y`.\n  ///\n  /// The behavior is outlined as:\n  ///   - if `x` is magical, do something cool\n  ///   - if `y` is magical, do something even cooler\n  ///\n  /// - parameters:\n  ///   - x: The first magic number.\n  ///   - y: The second magic number.\n  ///\n  /// - throws: A `NonMagicalError` if either `x` or `y` is `0`.\n  /// - returns: The magic operation of `f(x, y)`.\n  func f(x: Int, y: Int) throws -> Int { ... }\n\nFirst, it seems like a hack that we are using list items to denote potential matches for Xcode parseable items. This is made further odd if the description of the method actually uses lists as well. Also, the behavior of unparsed Xcode tags showing up in the method description is also unexpected, especially when they are towards the end of the list (e.g. throws above).\n\n  /// A magical function that does something with `x` and `y`.\n  ///\n  /// The behavior is outlined as:\n  ///   - if `x` is magical, do something cool\n  ///   - if `y` is magical, do something even cooler\n  ///\n  /// - parameters:\n\nThe use of Markdown is great, but it seems like it would be better if the comment block was sectioned and the content was parsed as Markdown.\n\n  /// A magical function that does something with `x` and `y`.\n  ///\n  /// The behavior is outlined as:\n  ///\n  ///   - if `x` is magical, do something cool\n  ///   - if `y` is magical, do something even cooler\n  ///\n  /// [parameters]\n  ///   - x The first magic number.\n  ///   - y The second magic number.\n  ///\n  /// [param] x The fist magic number (inlined)\n  /// [param] y The second magic number (inlined)\n  ///\n  /// [throws]\n  /// A `NonMagicalError` if either `x` or `y` is `0`.\n  ///\n  /// [returns] The magic operation of `f(x, y)`.\n  func f(x: Int, y: Int) throws -> Int { ... }\n\nAlso, this would facilitate better documentation features as well. When in the [parameters] section, typing “-“ could offer the set of undocumented parameter names. \n\nAt the top-level, typing “[“ (or “:”, “|”, whatever…) could offer the completion list of supported, parseable sections applicable to the type."
    email: owensd@gmail.com
    modified: "2015-06-30T22:44:44.2389Z"
    number: "21621148"
    number_intvalue: 21621148
    originated: 30-Jun-2015 03:45 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode-beta (7A121l)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Xcode-beta (7A121l): Swift 2.0 comment documentation is magical and hard to scan/parse'
