apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "21493275"
    labels:
        datastore_id: "5313937583112192"
data:
    classification: ""
    created: "2015-06-22T22:08:10.0766Z"
    description: "There's already a radar 5633354 covering coroutines/actors/async model. Inspired by your enhancement in error handling I decided to write up a concrete proposal on how async semantics can be added to Swift with full backwards compatibility and automatic optional conversion of ObjC APIs. \r\n\r\nFull specification is here:\r\nhttps://gist.github.com/oleganza/7342ed829bddd86f740a\r\n\r\nTL;DR: instead of forcing any specific execution model, or making explicit syntax for handling \"promises\", we introduce a syntactic layer for managing nested blocks. Basically, the Swift compiler would rewrite the clean linear code into spaghetti of multiple blocks like we have to do manually today. The proposal covers interoperability with error handling syntax, `defer`, `guard` and interoperability (both ways) with classic block-based APIs."
    email: Oleganza@gmail.com
    modified: "2015-06-22T22:08:10.07681Z"
    number: "21493275"
    number_intvalue: 21493275
    originated: 23-June-2015
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Open
    title: Concrete proposal for async semantics in Swift
