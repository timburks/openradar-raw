apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "22761995"
    labels:
        datastore_id: "6102475056611328"
data:
    classification: ""
    created: "2015-09-18T20:07:55.40173Z"
    description: "Is this a bug or feature?\r\n\r\nstruct Foo : CustomStringConvertible {\r\n    let text:String\r\n    \r\n    init(text:String) {\r\n        self.text = text\r\n    }\r\n    \r\n    var description:String { return self.text }\r\n}\r\n\r\nextension Foo : NilLiteralConvertible {\r\n    init(nilLiteral: ()) {\r\n        self.init(text:\"null\")\r\n    }\r\n}\r\n\r\nfunc f1() -> Foo? {\r\n    return nil // This returns .None\r\n}\r\n\r\nfunc f2() -> Foo? {\r\n    return true ? nil : Foo(text: \"bar\") // This returns .Some(Foo)\r\n}\r\n\r\nlet one = f1()\r\n\r\nlet two = f2()\r\n\r\nif case .None = one {\r\n    print(\"one is .None\")\r\n}\r\n\r\nif case .None = two { // false\r\n    print(\"two is .None\") \r\n}\r\n\r\nif let two = two {\r\n    print(\"two is \\(two.text)\") // We see this!\r\n}\r\n\r\n// To achieve what you probably intended, use .None instead of nil\r\nfunc f2_() -> Foo? {\r\n    return true ? .None : Foo(text: \"bar\") // This returns .None\r\n}"
    email: bwhiteley@gmail.com
    modified: "2015-09-18T20:07:55.40195Z"
    number: "22761995"
    number_intvalue: 22761995
    originated: "2015-09-18"
    parent_number: '&{NULL_VALUE}'
    product: Swift
    product_version: Swift2
    reproducible: Always
    resolved: ""
    status: Open
    title: Inconsistent behavior with NilLiteralConvertable in Swift
