apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "22820648"
    labels:
        datastore_id: "5569295400566784"
data:
    classification: Feature (New)
    created: "2015-09-23T16:42:27.15642Z"
    description: "Summary:\r\nFrameworks are a nice tool to split code into separate modules with obvious benefits.\r\n\r\nHowever, one potential drawback is reduced optimization potential and in turn performance. In many cases this performance deficit is negligible or does not matter but in many performance sensitive areas it can be crippling, forcing more monolithic codebases.\r\n\r\nTherefore it would be nice if Swift or the surrounding infrastructure included ways to alleviate this problem.\r\n\r\n\r\nA good example could be a Framework containing a generic data structure. Depending on the data structure, proper specialization and inlining can make a huge performance difference between having the data structure code in the same module (and compiling with Whole Module Optimization) vs. in a Framework.\r\n\r\n\r\nThere are many possible ways to deal with this issue, just to list a few:\r\n\r\n* For Frameworks where the source code is available, the compiler could do 'cross-module-optimization', i.e. compile the code from multiple modules at the same time. This would essentially be the same as putting all the same source files in the same module but without needing to actually do that and while maintaining the module abstractions.\r\nAn option would be to introduce an attribute to opt-into this behaviour to reduce the amount of code that is actually compiled in this way which could be applied to performance sensitive types/functions/...\r\nAnother option would be to introduce an alternative way to group code into modules instead of Frameworks that would not be compiled itself but simply aid in the logical grouping of code and always include source code so it can be compiled alongside the final target but independently maintained, tested, etc...\r\n\r\n\r\n* LTO is an option and might bring some performance gains but is unlikely to be as good as proper high-level optimization from the Swift compiler.\r\n\r\n\r\n* An option to include (for example) SIL in Frameworks to allow high level optimization by the compiler when using that Framework.\r\n\r\n\r\n* Not sure how applicable it is, but whatever the standard library is using... When compiling against the standard library, the compiler aggressively inlines & specializes. Since the standard library is essentially part of the compiler it can of course do this in whatever way it chooses so this might not be generalizable. But it certainly seems like its doing more than just applying @transparent to everything ;-)\r\n\r\nSteps to Reproduce:\r\n\r\n\r\nExpected Results:\r\n\r\n\r\nActual Results:\r\n\r\n\r\nVersion:\r\nOS X 10.11 (15A282b)\r\nVersion 7.1 beta (7B60)\r\nApple Swift version 2.0 (swiftlang_PONDEROSA-700.1.100.2 clang-700.1.74)"
    email: janoschhildebrand@gmail.com
    modified: "2015-09-23T16:42:27.15679Z"
    number: "22820648"
    number_intvalue: 22820648
    originated: 23-Sep-2015
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 7.1b1
    reproducible: n/a
    resolved: ""
    status: Open
    title: 'Xcode 7.1b1: [Swift] Options to improve performance when using Swift Frameworks'
