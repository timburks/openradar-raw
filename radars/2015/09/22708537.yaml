apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "22708537"
    labels:
        datastore_id: "6068957668704256"
data:
    classification: ""
    created: "2015-09-15T21:11:40.03939Z"
    description: "Summary:\r\nCasting an NSError that's in a generic function with type parameter `<E: ErrorType>` to an NSError strips the error's UserInfo dictionary.\r\n\r\nSteps to Reproduce:\r\nlet userInfo: [NSObject: AnyObject] = [\"TestKey\": \"TestValue\"]\r\n\r\nlet e = NSError(domain: \"TestDomain\", code: 1, userInfo: userInfo)\r\n\r\nfunc doSomethingGeneric<E: ErrorType>(error: E) -> Void {\r\n    print(error) // ✅ user info present\r\n    print(error as NSError)  // ❌ user info missing ❌\r\n}\r\n\r\ndoSomethingGeneric(e)\r\n\r\nExpected Results:\r\nExpect the NSError to retain its UserInfo dictionary during the cast\r\n\r\nActual Results:\r\nThe NSError loses its UserInfo dictionary. There are many similar cases where casting an ErrorType variable that contains an NSError to an NSError variable _doesn't_ lose the userInfo dictionary. The attached playground has many more examples where this casting works and retains the NSError's UserInfo, as well as the above example and one more that also involves generic functions where the casting loses the UserInfo dictionary.\r\n\r\nVersion:\r\nXcode 7.0 (7A218)\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:\r\n\r\n\r\nAttachments:\r\n'ErrorCastingBug.playground.zip' was successfully uploaded."
    email: raylillywhite@gmail.com
    modified: "2015-10-02T23:49:38.77509Z"
    number: "22708537"
    number_intvalue: 22708537
    originated: 15-Sep-2015 02:09 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 7.0 (7A218)
    reproducible: Always
    resolved: ""
    status: Duplicate of 22188396 (Open)
    title: UserInfo of NSError is discarded during type conversion in a generic function
