apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "19950024"
    labels:
        datastore_id: "5014419985661952"
data:
    classification: ""
    created: "2015-09-16T15:38:14.52194Z"
    description: "Instantiating a view controller with Storyboard.instantiateViewControllerWithIdentifier has multiple problems. It exposes unnecessary implementation details to presenting view controllers, or necessitates boiler plate `createInstance` class methods. Instead, I should be able to load outlets from IB in a view controller's `init` method (in Swift). I should be able to do the same with table/collection cells. \r\n\r\nThis would give us the added benefit of being able to subclass IB-designed view controllers or views to add/alter behavior and use them in different settings.\r\n\r\nCurrently to instantiate a view controller from a storyboard in code, I have to use \r\nStoryboard.instantiateViewControllerWithIdentifier. This means that I cannot provide an init method to pass in dependencies (such as model objects). Furthermore, my dependencies have to be Optional (either implicitly unwrapped or straight up Optional), and I don't have the benefit of having the Swift compiler ensure that my instance properties are set in init. \r\n\r\nInstead, what if this method were available on UIViewController:\r\ninit(storyboard storyboard: UIStoryboard,\r\n      identifier: String)\r\nThis method should behave basically the same as the existing method for nib files:\r\ninit(nibName nibNameOrNil: String?,\r\n      bundle nibBundleOrNil: NSBundle?)\r\n\r\nNow my subclass can look like this: \r\nlet viewModel:MyViewModel // yay for non-Optional let\r\npublic init(viewModel viewModel:MyViewModel) {\r\n     self.viewModel = viewModel // compiler makes sure we do this\r\n     let storyboard = UIStoryboard(name: \"Main\", bundle: NSBundle(forClass: self.dynamicType))\r\n     super.init(storyboard:storyboard, identifier:\"MyViewController\")\r\n}\r\n\r\nOf course, IBOutlets will still need to be Optional (usually implicitly unwrapped) since those are set in ObjC and the swift compiler can't enforce the typical safety. I'll have to trust Apple to get that right. My properties, however, can benefit from the new safety provided by Swift: they can be non-optional constants."
    email: bwhiteley@gmail.com
    modified: "2015-09-16T15:38:14.52217Z"
    number: "19950024"
    number_intvalue: 19950024
    originated: 25-Feb-2015
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 7
    reproducible: ""
    resolved: ""
    status: Open
    title: 'IB: load outlets in Swift `init`'
