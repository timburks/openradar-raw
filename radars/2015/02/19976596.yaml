apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "19976596"
    labels:
        datastore_id: "5790108561178624"
data:
    classification: UI/Usability
    created: "2015-02-26T22:53:18.871358Z"
    description: "Summary:\r\nThe swift standard library supplies a number of convenient methods for modifying standard structs. These methods appear to be largely consistently named where direct verbs mutate structs, and adjectives return new copies with the transformation applied.\r\n\r\nArray has a number of methods which violate this convention.\r\nWhile `sort` and `sorted` adhere to the convention, `filter`, `reverse`, and `join` do not. Methods such as map which return a collection of elements of a different type than the original are obviously exempt from this expectation.\r\n\r\nThis makes working with arrays difficult as the documentation must be frequently consulted to determine if a method mutates the array or not. This is particularly bothersome because the compiler provides no warning that `myArray.reverse()` did not do anything.\r\n\r\nSteps to Reproduce:\r\nWrite code to mutate an array by reversing it.\r\n\r\nExpected Results:\r\nThe code I expect to mutate the array causes a mutation in place.\r\n\r\nActual Results:\r\nThe code silently returned a new array, which was thrown away by the running program.\r\n\r\nRegression:\r\nMany languages Swift has heritage from have good conventions for denoting mutability, such as Ruby/Schemeâ€™s `!` suffix."
    email: wetzeal@gmail.com
    modified: "2016-08-29T18:44:56.49439Z"
    number: "19976596"
    number_intvalue: 19976596
    originated: 26-Feb-2015 04:53 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode-beta (6D532l)
    reproducible: Always
    resolved: 14-Jun-2016
    status: Closed
    title: 'Swift: Array method names are inconsistent regarding mutation'
