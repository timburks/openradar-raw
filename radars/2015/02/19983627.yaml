apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "19983627"
    labels:
        datastore_id: "5320273498734592"
data:
    classification: Enhancement
    created: "2015-02-27T12:49:14.352838Z"
    description: "Summary:\r\nWhen unit testing code you often want to test whether an optional is not nil and has a specific value. Currently the only option is to use code like the following\r\n// Given an optional a\r\nif let a = a {\r\n\tXCTAssertEqual(a.value, 3, \"Value should be 3\")\r\n} else {\r\n\tXCTFail(\"A should not be nil\")\r\n}\r\n\r\nSteps to Reproduce:\r\nHave a look at the attached sample project\r\n\r\nExpected Results:\r\nThere should be an easy method to test that the object is not nil and performs the test if this is the case. An implementation could look like the following:\r\n\r\nfunc XCTAssertEqual<T: Equatable>(expression1: @autoclosure () -> T?, expression2: @autoclosure () -> T, message: String) {\r\n\tlet evaluated1 = expression1()\r\n\tif let evaluated1 = evaluated1 {\r\n\t\tXCTAssertEqual(evaluated1, expression2, message)\r\n\t} else {\r\n\t\tXCTAssertNotNil(evaluated1, message)\r\n\t}\r\n}\r\n\r\nActual Results:\r\nA method like the one described above has to be created by hand which shows the failure messages at the wrong line of code or the cumbersome if-else construct has to be used\r\n\r\nVersion:\r\nXcode 6.1.1 (6A2008a) and Xcode 6.3 (6D532l)\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:\r\n\r\n\r\nAttachments:"
    email: alex@hoppen-koeln.de
    modified: "2015-03-08T11:13:58.460534Z"
    number: "19983627"
    number_intvalue: 19983627
    originated: 27-Feb-2015 01:47 PM
    parent_number: "17541074"
    product: Developer Tools
    product_version: Xcode 6.1.1 (6A2008a) and Xcode 6.3 (6D532l)
    reproducible: Always
    resolved: ""
    status: Duplicate/17541074
    title: Provide XCTAssertEqual method that takes one optional and one non-optional
