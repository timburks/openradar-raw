apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "19775420"
    labels:
        datastore_id: "4934096346152960"
data:
    classification: Enhancement
    created: "2015-02-10T01:27:48.891306Z"
    description: |-
        Summary:
        About ten years ago, I wrote my first language, Locus. It was _terrible_, but it had this one neat syntactic feature I liked: trailing literal syntax (tho only for unary functions):

        foo [ 1, 2, 3 ] # calls foo, passing in an array

        foo { bar: quux } # calls foo, passing in a dictionary

        I just realized that this would be a pretty neat fit for Swift & its trailing literal syntax, although I suppose it would probably force whitespace as disambiguation from subscripting, which might be undesirable or infeasible. (I.e. subscripting would have to be foo[bar], trailing literal would have to be foo [bar]—note the space).


        Steps to Reproduce:
        N/A

        Expected Results:
        N/A

        Actual Results:
        N/A

        Regression:
        N/A

        Notes:
        You could have foo be a property which returns a variadically-subscriptable struct:

        var foo: Subscriptable<T, U> {
            return Subscriptable { things in
                // do whatever with the things
            }
        }

        struct Subscriptable<T, U> {
            init(_ trampoline: [T] -> U) { … }
            subscript(things: T...) -> U {
                return trampoline(things)
            }
        }

        foo [ "such", "a", "hack" ]
    email: rix.rob@gmail.com
    modified: "2015-02-10T01:27:48.891558Z"
    number: "19775420"
    number_intvalue: 19775420
    originated: 09-Feb-2015 08:27 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode-Beta (6D520o)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift: Trailing literal syntax'
