apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "19771884"
    labels:
        datastore_id: "5811850222501888"
data:
    classification: Enhancement
    created: "2015-02-09T22:25:01.59997Z"
    description: |-
        Summary:
        Swift.String, Swift.Array, and Swift.Set should all conform to a single protocol supporting the following:
        * Enumerating the elements in the collection
        * Removing elements found by enumerating
        * Adding elements (appending in an ordered collection)
        * Testing for the presence of an element

        Currently, String and Array conform to ExtensibleCollectionType, but Set does not.

        Steps to Reproduce:
        1. Download and add my CollectionDictionary type to a project: <https://gist.github.com/brentdax/f8a856ccd9a9fa5ab86f>.
        2. Extend it to support a Value type of Swift.Set in addition to Swift.Array and Swift.String.

        Expected Results:
        Doing so is possible because Swift.Set conforms to either ExtensibleCollectionType or a similar protocol with less stringent “informal” requirements.

        Actual Results:
        Doing so is not possible because Array, String, and Set do not support any common protocols which allow mutation.

        Notes:
        There are certainly semantic and time complexity differences between Swift.Set’s insert() and the other types’ append() methods, but in many use cases, these differences don’t matter. We also need a way to handle these sorts of situations.
    email: brent@architechies.com
    modified: "2015-02-09T22:25:01.600119Z"
    number: "19771884"
    number_intvalue: 19771884
    originated: 09-Feb-2015 02:24 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode6.3-Beta (6D520o)
    reproducible: Always
    resolved: ""
    status: Open
    title: Swift.String, Array, and Set should support a common protocol for mutation
