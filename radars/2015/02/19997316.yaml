apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "19997316"
    labels:
        datastore_id: "5236933953323008"
data:
    classification: Enhancement
    created: "2015-02-28T21:51:35.700402Z"
    description: "Summary:\r\nMany functional languages treat constructors the same as any other function: they take a set of parameters of certain types, and return a single value of the expected type. This allows passing constructors anywhere where the parameter and return types match.\r\n\r\nSwitch treats types and constructors of those types as special non-functional entities. While their calling syntax looks like a function call, they can’t be referenced as functions themselves.\r\n\r\nThis means, for instance, that to convert an `Int?` to a `UInt?`, I must wrap the UInt constructor in a block: `maybeInt.map({ UInt($0)})`. It would be much nicer to more succinctly type `maybeInt.map(UInt)`, or at least, `maybeInt.map(UInt.init)`.\r\n\r\nSteps to Reproduce:\r\nlet i: Int? = 200\r\nlet g = i.map(UInt.init)\r\n\r\nExpected Results:\r\nThe code compiles\r\n\r\nActual Results:\r\n“Initializer cannot be referenced without arguments”\r\n\r\nRegression:\r\nMany of the functional languages (or even not-particularly-functional, like Python) Swift has heritage from allow references initializers as functions."
    email: wetzeal@gmail.com
    modified: "2016-08-29T18:47:09.75875Z"
    number: "19997316"
    number_intvalue: 19997316
    originated: 28-Feb-2015 03:51 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode-beta (6D532l)
    reproducible: Always
    resolved: 24-Jun-2015
    status: Closed
    title: 'Swift: Allow constructors to be referenced as functions'
