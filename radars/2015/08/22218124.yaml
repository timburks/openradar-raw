apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "22218124"
    labels:
        datastore_id: "5045887499763712"
data:
    classification: Other Bug
    created: "2015-08-10T20:51:50.77917Z"
    description: |-
        In the following code, adding the “NSObject” type constraint causes all “is T” checks to return true. This appears to be true of any ObjC type constraint. A type constraint of AnyObject does not cause this problem.

        import UIKit

        let vc1 = UIViewController()

        func istypeGood<T>(check: AnyObject, kindOf: T.Type) -> (Bool) {
            return check is T
        }

        func istypeBad<T: NSObject>(check: AnyObject, kindOf: T.Type) -> (Bool) {
            return check is T
        }


        istypeGood(vc1, kindOf: UIView.self) // false, correct
        istypeGood(vc1, kindOf: UIViewController.self)  // true, correct

        istypeBad(vc1, kindOf: UIView.self) // true, incorrect   <======
        istypeBad(vc1, kindOf: UIViewController.self)  // true, correct
    email: robnapier@gmail.com
    modified: "2015-08-10T20:51:50.77937Z"
    number: "22218124"
    number_intvalue: 22218124
    originated: 10-Aug-2015 04:51 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Swift 7b5
    reproducible: Not Applicable
    resolved: ""
    status: Open
    title: Adding ObjC generic constraint breaks "is"
