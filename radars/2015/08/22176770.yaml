apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "22176770"
    labels:
        datastore_id: "6636231848886272"
data:
    classification: Enhancement
    created: "2015-08-06T20:43:12.33183Z"
    description: |-
        Summary:
        Protocols in swift are awesome. Even more awesome is when we can use them directly as properties, which is currently impossible when the protocol has self/associated type requirements.

        Steps to Reproduce:
        struct TableViewController {
          var items: CollectionType<T>
          // error: cannot specialize non-generic type 'CollectionType'
          // error: protocol 'CollectionType' can only be used as a generic constraint because it has Self or associated type requirements
        }

        Expected Results:
        Should compile.

        Actual Results:
        But totally doesnâ€™t.

        Notes:
        Look at all the boilerplate necessary to generate type-erased wrapped for protocol types: https://realm.io/news/type-erased-wrappers-in-swift/. The compiler totally knows all that info, and could do it for us. Making protocol-oriented programming in Swift even more practical.
    email: segiddins@gmail.com
    modified: "2015-08-06T20:43:12.33211Z"
    number: "22176770"
    number_intvalue: 22176770
    originated: 06-Aug-2015 01:43 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode-7-beta.5 (7A176x)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Xcode-7-beta.5 (7A176x): [Swift] Add automatic type-erasure to protocols'
