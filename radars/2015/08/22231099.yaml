apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "22231099"
    labels:
        datastore_id: "6748523768840192"
data:
    classification: Feature (New)
    created: "2015-08-11T15:09:49.26706Z"
    description: |-
        Given a protocol with an associated type:

        protocol Proto {
        	typealias T

        	let value: T { get }
        	init(value: T)
        }

        If Swift ever allows type-erasure:

        let a: Proto<Int> = …

        I’d like it if we could use Self generically:

        extension Proto<T> {
            func map<U>(transform: T -> U) -> Self<U> {
                return Self.init(transform(self.value))
            }
        }

        Like this, this map function could be defined to return the same type but with a different generic type.
    email: david.w.hart@gmail.com
    modified: "2015-08-11T15:09:49.26726Z"
    number: "22231099"
    number_intvalue: 22231099
    originated: 11-Aug-2015 05:09 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode-beta (7A176x)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Xcode-beta (7A176x): If Swift supports type-erased protocols, allow generic Self constraint'
