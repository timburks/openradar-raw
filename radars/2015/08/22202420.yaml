apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "22202420"
    labels:
        datastore_id: "6631940270587904"
data:
    classification: Crash/Hang/Data Loss
    created: "2015-08-08T14:13:24.83822Z"
    description: "Summary:\nI got myself into an interesting state where a crasher occurs when typechecking a malformed program.\n\n\nSteps to Reproduce:\n1. This (malformed) program:\nstruct S {\n\tinit(_ : E) {}\n}\n\nenum E {\n\tinit() {\n\t\tlet\n\t\tself = .C(S(.A))\n\t}\n\n\tcase A\n\tcase C(S)\n}\n\n\nExpected Results:\nshould not crash swiftc\n\n\nActual Results:\nbut totally does:\nrob@Resonance ~/Desktop> swiftc boom.swift; and ./boom\nboom.swift:8:3: error: keyword 'self' cannot be used as an identifier\n                self = .C(S(.A))\n                ^\nAssertion failed: (Val && \"isa<> used on a null pointer\"), function doit, file /Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-700.0.52.2/src/llvm/include/llvm/Support/Casting.h, line 95.\n0  swift                    0x000000010f801bbb llvm::sys::PrintStackTrace(__sFILE*) + 43\n1  swift                    0x000000010f8022fb SignalHandler(int) + 379\n2  libsystem_platform.dylib 0x00007fff9644deaa _sigtramp + 26\n3  libsystem_platform.dylib 0x00007fff00000000 _sigtramp + 1773871472\n4  libsystem_c.dylib        0x00007fff985183fb abort + 129\n5  libsystem_c.dylib        0x00007fff984dfa44 basename + 0\n6  swift                    0x000000010ddffbd1 (anonymous namespace)::FailureDiagnosis::typeCheckArbitrarySubExprIndependently(swift::Expr*, bool) + 353\n7  swift                    0x000000010ddfe988 (anonymous namespace)::FailureDiagnosis::diagnoseGeneralFailure() + 328\n8  swift                    0x000000010ddfb9c5 swift::ASTVisitor<(anonymous namespace)::FailureDiagnosis, bool, void, void, void, void, void>::visit(swift::Expr*) + 10533\n9  swift                    0x000000010ddf628b swift::constraints::ConstraintSystem::diagnoseFailureForExpr(swift::Expr*) + 923\n10 swift                    0x000000010ddf76e7 swift::constraints::ConstraintSystem::salvage(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::Expr*, bool) + 4343\n11 swift                    0x000000010de5db30 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) + 784\n12 swift                    0x000000010de63502 swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::Type, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*) + 450\n13 swift                    0x000000010ddfda00 (anonymous namespace)::FailureDiagnosis::typeCheckChildIndependently(swift::Expr*, bool) + 384\n14 swift                    0x000000010ddf6202 swift::constraints::ConstraintSystem::diagnoseFailureForExpr(swift::Expr*) + 786\n15 swift                    0x000000010ddf76e7 swift::constraints::ConstraintSystem::salvage(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::Expr*, bool) + 4343\n16 swift                    0x000000010de5db30 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) + 784\n17 swift                    0x000000010de63502 swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::Type, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*) + 450\n18 swift                    0x000000010de64223 swift::TypeChecker::typeCheckBinding(swift::Pattern*&, swift::Expr*&, swift::DeclContext*) + 99\n19 swift                    0x000000010de643c4 swift::TypeChecker::typeCheckPatternBinding(swift::PatternBindingDecl*, unsigned int) + 244\n20 swift                    0x000000010de8018b validatePatternBindingDecl(swift::TypeChecker&, swift::PatternBindingDecl*, unsigned int) + 875\n21 swift                    0x000000010de7c95e (anonymous namespace)::DeclChecker::visit(swift::Decl*) + 558\n22 swift                    0x000000010de7c718 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) + 152\n23 swift                    0x000000010dec73d4 swift::ASTVisitor<(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void>::visit(swift::Stmt*) + 420\n24 swift                    0x000000010dec6789 (anonymous namespace)::StmtChecker::typeCheckBody(swift::BraceStmt*&) + 25\n25 swift                    0x000000010dec5cef swift::TypeChecker::typeCheckConstructorBodyUntil(swift::ConstructorDecl*, swift::SourceLoc) + 879\n26 swift                    0x000000010dec5655 swift::TypeChecker::typeCheckAbstractFunctionBodyUntil(swift::AbstractFunctionDecl*, swift::SourceLoc) + 37\n27 swift                    0x000000010dec638a swift::TypeChecker::typeCheckAbstractFunctionBody(swift::AbstractFunctionDecl*) + 138\n28 swift                    0x000000010de4b67c typeCheckFunctionsAndExternalDecls(swift::TypeChecker&) + 220\n29 swift                    0x000000010de4c4a9 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int) + 1913\n30 swift                    0x000000010dc52c28 swift::CompilerInstance::performSema() + 4152\n31 swift                    0x000000010d7c250c performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&) + 748\n32 swift                    0x000000010d7c1fc8 frontend_main(llvm::ArrayRef<char const*>, char const*, void*) + 2728\n33 swift                    0x000000010d7be02f main + 2015\n34 libdyld.dylib            0x00007fff94b775ad start + 1\nStack dump:\n0.\tProgram arguments: /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift -frontend -c -primary-file boom.swift -target x86_64-apple-darwin15.0.0 -enable-objc-interop -sdk /Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk -color-diagnostics -module-name boom -o /var/folders/9y/f7n4rvx901nctm_5d16c1wm40000gn/T/boom-9dfc39.o \n1.\tWhile type-checking 'init' at boom.swift:6:2\n2.\tWhile type-checking declaration 0x7ffec3006348 at boom.swift:7:3\n3.\tWhile type-checking expression at [boom.swift:8:10 - line:8:18] RangeText=\".C(S(.A))\"\n4.\tWhile type-checking expression at [boom.swift:8:10 - line:8:18] RangeText=\".C(S(.A))\"\n<unknown>:0: error: unable to execute command: Abort trap: 6\n<unknown>:0: error: swift frontend command failed due to signal (use -v to see invocation)\nrob@Resonance ~/Desktop> swiftc boom.swift; and ./boom\nboom.swift:8:3: error: keyword 'self' cannot be used as an identifier\n                self = .C(S(.A))\n                ^\nAssertion failed: (Val && \"isa<> used on a null pointer\"), function doit, file /Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-700.0.52.2/src/llvm/include/llvm/Support/Casting.h, line 95.\n0  swift                    0x0000000111538bbb llvm::sys::PrintStackTrace(__sFILE*) + 43\n1  swift                    0x00000001115392fb SignalHandler(int) + 379\n2  libsystem_platform.dylib 0x00007fff9644deaa _sigtramp + 26\n3  libsystem_platform.dylib 0x00007fff00000000 _sigtramp + 1773871472\n4  libsystem_c.dylib        0x00007fff985183fb abort + 129\n5  libsystem_c.dylib        0x00007fff984dfa44 basename + 0\n6  swift                    0x000000010fb36bd1 (anonymous namespace)::FailureDiagnosis::typeCheckArbitrarySubExprIndependently(swift::Expr*, bool) + 353\n7  swift                    0x000000010fb35988 (anonymous namespace)::FailureDiagnosis::diagnoseGeneralFailure() + 328\n8  swift                    0x000000010fb329c5 swift::ASTVisitor<(anonymous namespace)::FailureDiagnosis, bool, void, void, void, void, void>::visit(swift::Expr*) + 10533\n9  swift                    0x000000010fb2d28b swift::constraints::ConstraintSystem::diagnoseFailureForExpr(swift::Expr*) + 923\n10 swift                    0x000000010fb2e6e7 swift::constraints::ConstraintSystem::salvage(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::Expr*, bool) + 4343\n11 swift                    0x000000010fb94b30 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) + 784\n12 swift                    0x000000010fb9a502 swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::Type, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*) + 450\n13 swift                    0x000000010fb34a00 (anonymous namespace)::FailureDiagnosis::typeCheckChildIndependently(swift::Expr*, bool) + 384\n14 swift                    0x000000010fb2d202 swift::constraints::ConstraintSystem::diagnoseFailureForExpr(swift::Expr*) + 786\n15 swift                    0x000000010fb2e6e7 swift::constraints::ConstraintSystem::salvage(llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::Expr*, bool) + 4343\n16 swift                    0x000000010fb94b30 swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>) + 784\n17 swift                    0x000000010fb9a502 swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::Type, swift::OptionSet<swift::TypeCheckExprFlags, unsigned int>, swift::ExprTypeCheckListener*) + 450\n18 swift                    0x000000010fb9b223 swift::TypeChecker::typeCheckBinding(swift::Pattern*&, swift::Expr*&, swift::DeclContext*) + 99\n19 swift                    0x000000010fb9b3c4 swift::TypeChecker::typeCheckPatternBinding(swift::PatternBindingDecl*, unsigned int) + 244\n20 swift                    0x000000010fbb718b validatePatternBindingDecl(swift::TypeChecker&, swift::PatternBindingDecl*, unsigned int) + 875\n21 swift                    0x000000010fbb395e (anonymous namespace)::DeclChecker::visit(swift::Decl*) + 558\n22 swift                    0x000000010fbb3718 swift::TypeChecker::typeCheckDecl(swift::Decl*, bool) + 152\n23 swift                    0x000000010fbfe3d4 swift::ASTVisitor<(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void>::visit(swift::Stmt*) + 420\n24 swift                    0x000000010fbfd789 (anonymous namespace)::StmtChecker::typeCheckBody(swift::BraceStmt*&) + 25\n25 swift                    0x000000010fbfccef swift::TypeChecker::typeCheckConstructorBodyUntil(swift::ConstructorDecl*, swift::SourceLoc) + 879\n26 swift                    0x000000010fbfc655 swift::TypeChecker::typeCheckAbstractFunctionBodyUntil(swift::AbstractFunctionDecl*, swift::SourceLoc) + 37\n27 swift                    0x000000010fbfd38a swift::TypeChecker::typeCheckAbstractFunctionBody(swift::AbstractFunctionDecl*) + 138\n28 swift                    0x000000010fb8267c typeCheckFunctionsAndExternalDecls(swift::TypeChecker&) + 220\n29 swift                    0x000000010fb834a9 swift::performTypeChecking(swift::SourceFile&, swift::TopLevelContext&, swift::OptionSet<swift::TypeCheckingFlags, unsigned int>, unsigned int) + 1913\n30 swift                    0x000000010f989c28 swift::CompilerInstance::performSema() + 4152\n31 swift                    0x000000010f4f950c performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&) + 748\n32 swift                    0x000000010f4f8fc8 frontend_main(llvm::ArrayRef<char const*>, char const*, void*) + 2728\n33 swift                    0x000000010f4f502f main + 2015\n34 libdyld.dylib            0x00007fff94b775ad start + 1\nStack dump:\n0.\tProgram arguments: /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift -frontend -c -primary-file boom.swift -target x86_64-apple-darwin15.0.0 -enable-objc-interop -sdk /Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk -color-diagnostics -module-name boom -o /var/folders/9y/f7n4rvx901nctm_5d16c1wm40000gn/T/boom-8b478e.o \n1.\tWhile type-checking 'init' at boom.swift:6:2\n2.\tWhile type-checking declaration 0x7fbc1287bd48 at boom.swift:7:3\n3.\tWhile type-checking expression at [boom.swift:8:10 - line:8:18] RangeText=\".C(S(.A))\"\n4.\tWhile type-checking expression at [boom.swift:8:10 - line:8:18] RangeText=\".C(S(.A))\"\n\n\nRegression:\nIt doesn’t crash if you comment out the let line, or if you don’t recur through another type (S), or if you fully qualify the argument to S.init as E.A instead of .A.\n\nNotes:\nN/A"
    email: rix.rob@gmail.com
    modified: "2015-08-08T14:13:24.83847Z"
    number: "22202420"
    number_intvalue: 22202420
    originated: 08-Aug-2015 10:13 AM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode-beta (7A176x)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift 2.0b5: swiftc crash typechecking malformed enum initialization'
