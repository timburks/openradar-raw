apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "22471737"
    labels:
        datastore_id: "5125927436550144"
data:
    classification: Other Bug
    created: "2015-08-28T08:41:35.46736Z"
    description: |-
        Summary:
        I’d like Swift to allow me to explicitly specialize generic functions, allowing me to write functions which use the generic type only in their return value.

        Steps to Reproduce:
        I have two example, one small which demonstrates the problem but is a bit non-sensical:

        extension Int {
        	func cast<T>() -> T { return self as! T }
        }

        let value = 5
        let casted = 5.cast<Double>()

        And one more complex that demonstrates what I’m actually trying to achieve in a project:

        class ObjectBundle<T: NSObject> {
        	var objects: [String:T] = [:]
        	
        	func add(object: T) {
        		self.objects[NSStringFromClass(object.dynamicType)] = object
        	}
        	
        	func get<U: NSObject>() -> U? {
        		return self.objects[NSStringFromClass(U.self)]
        	}
        }

        class MyBaseClass: NSObject {
        	var myBaseProp: Int = 0
        }
        class MyClass: MyBaseClass {
        	var myProp: Int = 0
        }

        var bundle = ObjectBundle<MyBaseClass>()
        bundle.add(MyBaseClass())
        bundle.add(MyClass())
        let obj = bundle.get<MyClass>()
    email: david.w.hart@gmail.com
    modified: "2015-08-28T08:41:35.4677Z"
    number: "22471737"
    number_intvalue: 22471737
    originated: 28-Aug-2015 10:41 AM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode-beta (7A192o)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Xcode-beta (7A192o): In Swift, allow explicit specialization of generic functions'
