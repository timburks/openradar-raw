apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "22328935"
    labels:
        datastore_id: "4546718884429824"
data:
    classification: ""
    created: "2015-08-18T18:45:33.7012Z"
    description: "One of the nice features of C's assert function is that it stringifies the argument and prints it as part of the assertion failure. So you can do:\r\n\r\nassert(x > 0)\r\n\r\nAnd when it fires, it will tell you not only that an assertion failed, but that it was \"x > 0\" that failed.\r\n\r\nIt would be great if Swift's assert, precondition, and similar functions could do the same. And of course it would be especially great if the feature were available as a general language feature, so we could stringify our own function's arguments if needed.\r\n\r\nFor an implementation, I'd suggest extending the current system where some function default values get treated specially. For example you can get the name of the calling function by specifying `= __FUNCTION__` as the default value of an argument. I'd suggest something like `= #argname` to make the default value be the stringified value of whatever was passed in as argname. A simple assertion function would then look like:\r\n\r\n    func assert(@autoclosure condition: () -> Bool, conditionString: String = #condition) {\r\n        if !condition {\r\n            print(\"Assertion \\(conditionString) failed!\")\r\n        }\r\n    }"
    email: michael.ash@gmail.com
    modified: "2015-08-18T18:45:33.70144Z"
    number: "22328935"
    number_intvalue: 22328935
    originated: "2015-08-15"
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Open
    title: Make it possible to stringify Swift arguments
