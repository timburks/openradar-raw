apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "21671142"
    labels:
        datastore_id: "5311492572315648"
data:
    classification: Enhancement
    created: "2015-07-03T18:18:10.39598Z"
    description: |-
        Summary:
        LazySequence’s map and filter methods return LazySequence<MapSequenceView<S, U>> and LazySequence<FilterSequenceView<S>> respectively.

        However, if you were to try to implement one of those outside of the standard library, you’d have to type them as LazySequence<MapSequenceView<LazySequence<S>, U>> and LazySequence<FilterSequenceView<LazySequence<S>>> respectively. The types in stdlib are pretty scary, but these are much, much worse.

        This is because LazySequence doesn’t expose its underlying sequence in a public property, requiring third party extensions of it to pass the receiving LazySequence, rather than its underlying sequence, to the extending type.


        Steps to Reproduce:
        N/A

        Expected Results:
        N/A

        Actual Results:
        N/A

        Regression:
        N/A

        Notes:
        One could argue that ideal type erasure would come from returning AnySequence. Which is true enough, I suppose, but the standard library doesn’t do that with any of the type-erased protocols, with the sole exception of the reflection stuff. That leads a cautious individual to do as the standard library does, and have needlessly horrible return types in their interface as a result.
    email: rix.rob@gmail.com
    modified: "2015-07-03T18:18:10.39635Z"
    number: "21671142"
    number_intvalue: 21671142
    originated: 03-Jul-2015 02:18 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode-beta (7A121l)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift 2b2: Publish LazySequence’s base sequence to enable better type erasure'
