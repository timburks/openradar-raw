apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "21926975"
    labels:
        datastore_id: "6589641553608704"
data:
    classification: Enhancement
    created: "2015-07-21T20:42:44.201Z"
    description: |-
        Summary:
        Indirect enums are neat. Indirect structs would be valuable for cases where the recursion is via another enum which itself is non-recursive, like Optional. For example one could write List like so:

        indirect struct List<T> {
        	let uncons: (T, List)?
        }

        or like so:

        struct List<T> {
        	indirect let uncons: (T, List)?
        }

        As a more practical example of this, I often use a struct as the fixpoint of a non-recursive enum:

        enum Expression<A> {
        	case Var(Int)
        	case App(A, A)
        	case Abs(Int, A)
        }

        struct Term {
        	// what I want to write:
        	// indirect let expression: Expression<Term>

        	// what I have to write:
        	let expression: Box<Expression<Term>>

        	// or:
        	let expression: () -> Expression<Term>
        }


        Steps to Reproduce:
        N/A

        Expected Results:
        N/A

        Actual Results:
        N/A

        Regression:
        N/A

        Notes:
        N/A
    email: rix.rob@gmail.com
    modified: "2015-07-21T20:42:44.2012Z"
    number: "21926975"
    number_intvalue: 21926975
    originated: 21-Jul-2015 04:42 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode-beta (7A165t)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift 2b4: Indirect structs/properties'
