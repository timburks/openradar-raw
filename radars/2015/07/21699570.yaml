apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "21699570"
    labels:
        datastore_id: "6152351706513408"
data:
    classification: ""
    created: "2015-07-07T07:18:30.36797Z"
    description: "Summary:\r\nHaving defined a C struct in BridgingHeader.h with the following structure:\r\nstruct info_type {\r\n    int priority;\r\n};\r\n\r\nAnd then attempting to modify the memory pointed by an unsafe pointer like this:\r\nclass ViewController: UIViewController {\r\n    func viewDidLoad() {\r\n        var info = info_type()\r\n        info.priority = 2    \r\n        processInfo(&info)\r\n    }\r\n\r\n    func processInfo(infoRef: UnsafePointer<info_type>) {\r\n        info.memory.priority = 1\r\n    }\r\n}\r\n\r\nwill cause the Xcode parser to fail.\r\n\r\nSteps to Reproduce:\r\n1. Create a new Swift project\r\n2. Add a bridging header file\r\n3. Add the following code to the bridging header:\r\nstruct info_type {\r\n    int priority;\r\n};\r\n4. Replace the ViewController class with the following:\r\nclass ViewController: UIViewController {\r\n    override func viewDidLoad() {\r\n        var info = info_type()\r\n        info.priority = 2    \r\n        processInfo(&info)\r\n    }\r\n\r\n    func processInfo(infoRef: UnsafePointer<info_type>) {\r\n        info.memory.priority = 1\r\n    }\r\n}\r\n\r\nExpected Results:\r\nXcode should notify the user that the memory for the struct pointed by infoRef cannot be modified because it's an UnsafePointer and that an UnsafeMutablePointer should be used.\r\n\r\nActual Results:\r\nXcode shows a problem (red exclamation mark) in the issues tab and stops parsing the code in the project. The problem is the following:\r\n\r\nAssertion failed: (GetSetInfo.getInt().hasValue()), function getSetterAccessibility, file /Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-700.0.42.3/src/swift/include/swift/AST/Decl.h, line 4070.\r\n0  swift                    0x0000000110340b9b llvm::sys::PrintStackTrace(__sFILE*) + 43\r\n1  swift                    0x00000001103412db SignalHandler(int) + 379\r\n2  libsystem_platform.dylib 0x00007fff8eaacf1a _sigtramp + 26\r\n3  libsystem_platform.dylib 0x00007fff518bbbec _sigtramp + 3269520620\r\n4  libsystem_c.dylib        0x00007fff8ef73b53 abort + 129\r\n5  libsystem_c.dylib        0x00007fff8ef3bc39 basename + 0\r\n6  swift                    0x000000010eafb1a0 void filterForDiscriminator<swift::ValueDecl*>(llvm::SmallVectorImpl<swift::ValueDecl*>&, swift::DebuggerClient*) + 0\r\n7  swift                    0x000000010e950e0c diagnoseSubElementFailure(swift::Expr*, swift::SourceLoc, swift::constraints::ConstraintSystem&, swift::Diag<llvm::StringRef>, swift::Diag<swift::Type>) + 668\r\n8  swift                    0x000000010e9b6908 swift::constraints::ConstraintSystem::computeAssignDestType(swift::Expr*, swift::SourceLoc) + 968\r\n9  swift                    0x000000010e95ab65 swift::ASTVisitor<(anonymous namespace)::ConstraintGenerator, swift::Type, void, void, void, void, void>::visit(swift::Expr*) + 9317\r\n10 swift                    0x000000010e95d58b (anonymous namespace)::ConstraintWalker::walkToExprPost(swift::Expr*) + 75\r\n11 swift                    0x000000010ea72f1c swift::Expr::walk(swift::ASTWalker&) + 76\r\n12 swift                    0x000000010e958219 swift::constraints::ConstraintSystem::generateConstraints(swift::Expr*) + 201\r\n13 swift                    0x000000010e9afdbb swift::TypeChecker::solveForExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::Type, bool, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&, llvm::SmallVectorImpl<swift::constraints::Solution>&) + 203\r\n14 swift                    0x000000010e9b56f3 swift::TypeChecker::typeCheckExpression(swift::Expr*&, swift::DeclContext*, swift::Type, swift::Type, bool, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*) + 243\r\n15 swift                    0x000000010ea16cbb swift::ASTVisitor<(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void>::visit(swift::Stmt*) + 491\r\n16 swift                    0x000000010ea15fd9 (anonymous namespace)::StmtChecker::typeCheckBody(swift::BraceStmt*&) + 25\r\n17 swift                    0x000000010ea1509f swift::TypeChecker::typeCheckFunctionBodyUntil(swift::FuncDecl*, swift::SourceLoc) + 415\r\n18 swift                    0x000000010ea14eb1 swift::TypeChecker::typeCheckAbstractFunctionBodyUntil(swift::AbstractFunctionDecl*, swift::SourceLoc) + 49\r\n[...]"
    email: alin.claudiu.radut@gmail.com
    modified: "2015-07-14T11:27:18.65156Z"
    number: "21699570"
    number_intvalue: 21699570
    originated: 2015/07/07
    parent_number: '&{NULL_VALUE}'
    product: Xcode
    product_version: 7.0 beta (7A121l)
    reproducible: Always
    resolved: ""
    status: Duplicate of 21559246 (Open)
    title: 'Attempting to set a value to a struct property which is referenced by an UnsafePointer causes Xcode to fail with Abort trap: 6'
