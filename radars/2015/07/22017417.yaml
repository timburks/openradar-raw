apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "22017417"
    labels:
        datastore_id: "4648279929257984"
data:
    classification: Other Bug
    created: "2015-07-27T21:07:04.21529Z"
    description: "Please take a look at this code, which produces the error shown:\n\nfunc test(x: AnyObject) {  \n    print(\"Test OK\")  \n}  \n  \nstruct Wrapper<T: AnyObject> {  \n    init (_ aValue: T) {  \n        print(\"Wrapper OK\")  \n    }  \n}  \n  \nprotocol Foo: class {}  \nclass Bar: Foo {}  \n  \nlet p: Foo = Bar()  \n  \np is AnyObject     // -> true  \ntest(p)            // Fine  \nlet d = Wrapper(p) // Cannot invoke initializer for type 'Wrapper<T>' with an argument list of type '(Foo)'\n\nI’m not 100% sure that this is an error, but the result does seem inconsistent. If a Foo is a valid argument for the test() function, I would have expected it to be a valid argument for Wrapper.init().\n\nHere, the compiler seems to want the Foo protocol to be marked as @objc in order to make Foo-conformant objects be legitimate arguments to Wrapper.init(). \n\nJust because it has some superficial similarity, let me note that this is probably NOT the “protocols don’t conform to themselves” issue that has been coming up a lot in the context of Swift 2. A Foo-conformant object is in fact AnyObject-conformant, as shown above."
    email: garth@garthsnyder.com
    modified: "2015-07-27T21:07:04.21552Z"
    number: "22017417"
    number_intvalue: 22017417
    originated: 27-Jul-2015 02:06 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 7 beta 4
    reproducible: Always
    resolved: ""
    status: Open
    title: Possible misbehavior of Swift generics when type is constrained to AnyObject
