apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "21676609"
    labels:
        datastore_id: "4949812940111872"
data:
    classification: Enhancement
    created: "2015-07-05T13:59:11.0573Z"
    description: "Summary:\r\nIn general, Swift can infer the types of parameters in closures when the function type is known. However, when the parameters are inout, it is necessary to explicitly specify those types.\r\n\r\nSwift should be able to infer the types of these parameters.\r\n\r\nSteps to Reproduce:\r\nEnter this into a playground:\r\n\r\n    let mySwap: (inout Int, inout Int) -> () = { a, b in\r\n        (a, b) = (b, a)\r\n    }\r\n    \r\n    var x = 1\r\n    var y = 2\r\n\r\n    mySwap(&x, &y)\r\n\r\n    print(\"x = \\(x), y = \\(y)\")\r\n\r\nExpected Results:\r\nSwift should be able to infer that the types of a and b in the closure are \"inout Int\".\r\n\r\nActual Results:\r\nCompiler reports: error: '(_, _) -> ()' is not convertible to '(inout Int, inout Int) -> ()'\r\n    (a, b) = (b, a)\r\n\r\nTo get it to compile, one must provide full explicit type annotations for the closure arguments, like this:\r\n\r\n    let mySwap: (inout Int, inout Int) -> () = { (inout a: Int, inout b: Int) in\r\n        (a, b) = (b, a)\r\n    }\r\n\r\n\r\nVersion:\r\nXcode Version 7.0 beta (7A121l)"
    email: kristopherdjohnson@gmail.com
    modified: "2015-07-30T19:13:11.2346Z"
    number: "21676609"
    number_intvalue: 21676609
    originated: 05-Jul-2015 09:56 AM
    parent_number: "15998821"
    product: Developer Tools
    product_version: Xcode Version 7.0 beta (7A121l)
    reproducible: Always
    resolved: ""
    status: Duplicate/15998821
    title: Swift should be able to infer inout types in closures
