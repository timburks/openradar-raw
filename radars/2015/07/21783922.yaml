apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "21783922"
    labels:
        datastore_id: "5011498770366464"
data:
    classification: Enhancement
    created: "2015-07-12T01:58:55.32339Z"
    description: |-
        Summary:
        If somebody wants to implement StringLiteralConvertible, it may not be obvious to them why they’d want to implement UnicodeScalarLiteralConvertible. (In fact, they probably wouldn’t want to.) That much more so ExtendedGraphemeClusterLiteralConvertible, which is a hell of a symbol to confront someone with when they just want to be able to specify some Identifier instance as a string literal in their source.

        Fortunately this can be resolved using protocol extensions. We can write this:

        extension StringLiteralConvertible where StringLiteralType == String {
        	public init(unicodeScalarLiteral: String) {
        		self.init(stringLiteral: unicodeScalarLiteral)
        	}

        	public init(extendedGraphemeClusterLiteral: String) {
        		self.init(stringLiteral: extendedGraphemeClusterLiteral)
        	}
        }

        This works nicely, and I propose adding it to the stdlib so as to avoid the emotional drain/mental scarring of ExtendedGraphemeClusterLiteralConvertibleManagerConverterFactoryObjectControllerType.

        Steps to Reproduce:
        N/A

        Expected Results:
        N/A

        Actual Results:
        N/A

        Regression:
        N/A

        Notes:
        N/A
    email: rix.rob@gmail.com
    modified: "2015-07-12T01:58:55.32358Z"
    number: "21783922"
    number_intvalue: 21783922
    originated: 11-Jul-2015 09:58 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode-beta (7A152u)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift 2b3: Proposed extension to make StringLiteralConvertible less of a pain to implement'
