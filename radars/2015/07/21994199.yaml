apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "21994199"
    labels:
        datastore_id: "6324610664497152"
data:
    classification: Feature (New)
    created: "2015-07-25T03:04:55.85388Z"
    description: |-
        Summary:
        When serializing a String to some other output stream, it can be necessary to get an NSData object representing its encoded bytes. Currently the only way to do this is to call dataUsingEncoding, which returns nil. This is frustrating when using the UTF-8 encoding, since any valid string can be encoded into UTF-8, but the compiler has no static knowledge of that. This means that the code either has to contain a forced unwrapped optional, a fallback to a dummy value, or a guard statement with a fatal error. All of those seem like code smells. It seems like a better alternative would be to get the NSData object from the Stringâ€™s UTF-8 view, which has static knowledge that it can be converted into a byte stream safely.

        One option for making this work would be to add a method to UTF8View for getting the data, but another way that could pay more dividends is adding an initializer to NSData to initialize it from a collection of UInt8 objects. This would also allow creating NSData objects from byte arrays without having to go through the UnsafePointer iniitalizer.

        Steps to Reproduce:

        Expected Results:

        Actual Results:

        Regression:

        Notes:
    email: john@brownleemail.com
    modified: "2015-07-25T03:04:55.85408Z"
    number: "21994199"
    number_intvalue: 21994199
    originated: 24-Jul-2015 11:04 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode-beta (7A165t)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Xcode-beta (7A165t): Allow Getting NSData from a UTF8View on a Swift String'
