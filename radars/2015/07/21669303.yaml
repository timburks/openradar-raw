apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "21669303"
    labels:
        datastore_id: "4891292567863296"
data:
    classification: Other Bug
    created: "2015-07-03T13:04:51.96965Z"
    description: "Summary:\r\nWhen using \"catch as NSError\" in a regular function then the catch clause is considered exhaustive.\r\nWhen using \"catch as NSError\" in a closure then the closure is inferred as \"throws\" because the catch is NOT considered exhaustive.\r\n\r\nThis results in the following compilation error when calling or passing the closure: \"call can throw, but it is not marked with 'try' and the error is not handled\"\r\n\r\nSteps to Reproduce:\r\n1. Copy attached example code into a Playground\r\n2. You'll get the error \"call can throw, but it is not marked with 'try' and the error is not handled\"\r\n\r\nExpected Results:\r\n\"catch as NSError\" should be considered exhaustive and the closure not be marked as \"throws\".\r\n\r\nActual Results:\r\nThe closure is erroneously inferred as \"throws\"\r\n\r\n\r\nAttached file:\r\n\r\nimport Foundation\r\n\r\nfunc funcWhichThrows() throws {}\r\n\r\nfunc testWithClosure() {\r\n\t{ () -> Void in\r\n\t\tdo {\r\n\t\t\ttry funcWhichThrows()\r\n\t\t}\r\n\t\tcatch _ as NSError {\r\n\t\t\t// catch all as NSError\r\n\t\t}\r\n\t}()\r\n}\r\n\r\nfunc testWithoutClosure() {\r\n\tdo {\r\n\t\ttry funcWhichThrows()\r\n\t}\r\n\tcatch _ as NSError {\r\n\t\t// catch all as NSError\r\n\t}\r\n}"
    email: fluidsonic@gmail.com
    modified: "2015-07-03T13:08:59.13188Z"
    number: "21669303"
    number_intvalue: 21669303
    originated: "2015-07-03"
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 7 Beta 2
    reproducible: Always
    resolved: ""
    status: Open
    title: Closure erroneously inferred as "throws" when catching as NSError
