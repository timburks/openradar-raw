apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "19901364"
    labels:
        datastore_id: "4615498490707968"
data:
    classification: ""
    created: "2015-07-23T08:33:53.25707Z"
    description: "Summary:\r\nIf you declare a function with the _noreturn_ attribute then the compiler truncates the calling function after the call instruction. As the function never returns the caller does not need to perform any stack cleanup, return instruction, etc.\r\n\r\nIf you put a function inside a C++ std::function object then it generates a stub function to invoke your function.\r\n\r\nThat stub function is a template and so is instantiated based on param/return types: every function with the same signature uses the same stub. If your function is _noreturn_ then that stub gets truncated after the call instruction.\r\n\r\nHowever clang does not take that attribute into account when reusing the instantiation for different functions.\r\n\r\nSo if you put a _noreturn_ function inside a std::function then any other std::function with a matching signature will be invoked by a caller that assumes they are also _noreturn_.\r\n\r\nAs these functions are not _noreturn_ they will actually return, jumping back to whatever happened to be after the truncated stub function.\r\n\r\nSteps to Reproduce:\r\nAttached example contains a test.cpp which demonstrates the problem.\r\n\r\nVersion:\r\nXcode 6.1.1 (6A2008a)\r\nMac OS X 10.9.5 (13F34)\r\n$ clang -v\r\nApple LLVM version 6.0 (clang-600.0.56) (based on LLVM 3.5svn)\r\nTarget: x86_64-apple-darwin13.4.0\r\nThread model: posix\r\n\r\nConfiguration:\r\nSeen in Xcode 5.1.1 and Xcode 6.1.1, for either C+98 (std::tr1) and C+11 (std)."
    email: dairgrant@gmail.com
    modified: "2015-07-23T08:33:53.25729Z"
    number: "19901364"
    number_intvalue: 19901364
    originated: 09/Jun/15
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 6.1.1
    reproducible: Always
    resolved: ""
    status: Open
    title: clang generates bad code for std::function and __noreturn__
