apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "21675110"
    labels:
        datastore_id: "5043238578683904"
data:
    classification: Feature (New)
    created: "2015-07-04T20:59:19.4262Z"
    description: |-
        Summary:
        There is currently only one way to create a regular expression in Swift, with an initializer that can throw an exception. This means that there is no way to create an exception and store it in a local variable without making the variable optional or putting all the relevant work in a do/catch block. This is particularly frustrating when creating a regular expression from a string literal. The developer may have static knowledge that the regular expression, but there is no way to convince the compiler of this, and the developer has to work around this absence of compiler-time information.

        This could be addressed through a first-class language construct for regular expressions. Another option would be a mechanism for creating a special regular expression to serve as a fallback for type-safety, which the developer knows cannot be invoked due to the static knowledge about the validity of the literal expression.

        Steps to Reproduce:

        Expected Results:

        Actual Results:

        Regression:

        Notes:
    email: john@brownleemail.com
    modified: "2015-07-04T20:59:19.42644Z"
    number: "21675110"
    number_intvalue: 21675110
    originated: 04-Jul-2015 04:59 PM
    parent_number: '&{NULL_VALUE}'
    product: OS X SDK
    product_version: Xcode-beta (7A121l)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Xcode-beta (7A121l): Allow Creating Regular Expressions in Swift Without a Possible Exception'
