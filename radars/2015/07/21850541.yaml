apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "21850541"
    labels:
        datastore_id: "4603435806621696"
data:
    classification: Enhancement
    created: "2015-07-16T07:13:53.1017Z"
    description: "A protocol (this isn’t really limited to protocols though) really needs a way to separate the API for the consumers of the protocol and the implementors of the protocol.\n\nTake this example:\n\n    protocol KeyValueCodable : _KeyValueCodable {\n        mutating func setValue<T>(value: T, forKey: String) throws\n        func getValue<T>(forKey: String) throws -> T\n    }\n     \n    protocol _KeyValueCodable {\n        static var _codables: [KVCTypeInfo] { get }\n        var _kvcstore: Dictionary<String, Any> { get set }\n    }\n    \n    extension KeyValueCodable {\n        mutating func setValue<T>(value: T, forKey: String) {\n            // default implementation goes here...\n        }\n        \n        func getValue<T>(forKey: String) -> T {\n            // default implementation goes here...\n        }\n    }\n\nEverything prefixed with “_” is “private to consumers, public to implementors”. \n\nAs the protocol author, I absolutely do **not** want this to be possible:\n\n    var kvc = SomeKVCType()\n    kvc._kvcstore[\"haha\"] = \"this shouldn’t happen…\"\n\nHowever, I need those exposed to create default implementations. \n\nThis bug is probably a duplicate of many others describing how the access modifiers we have today really are not sufficient. This is an area that C++ came closer to being correct on."
    email: owensd@gmail.com
    modified: "2015-07-16T07:13:53.10197Z"
    number: "21850541"
    number_intvalue: 21850541
    originated: 16-Jul-2015 12:13 AM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode-beta (7A152u)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Xcode-beta (7A152u): Protocol "inheritence" needs better access controls'
