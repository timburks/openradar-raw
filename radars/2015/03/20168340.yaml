apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "20168340"
    labels:
        datastore_id: "5529046490284032"
data:
    classification: UI/Usability
    created: "2015-03-16T01:51:30.764365Z"
    description: |-
        Summary:
        When you == two ImplicitlyUnwrappedOptionals, Swift unwraps them and uses their type’s equality operator. It should instead treat them like regular Optional types, comparing them in a nil-safe way.

        Steps to Reproduce:
        1. Write code like this in a Playground:

            let x: Int! = 1, y: Int! = nil
            x == y

        Expected Results:
        “false” in the timeline.

        Actual Results:
        EXC_BAD_INSTRUCTION because Swift tried to unwrap x and y to pass them to ==(Int, Int) -> Bool.

        Notes:
        While this isn’t *wrong* per se, it can be a nasty surprise. Providing something like the existing ==<T: Equatable>(Optional<T>, Optional<T>) -> Bool overload for IUOs, on the other hand, would yield safer behavior without changing any code that doesn’t currently crash.
    email: brent@architechies.com
    modified: "2015-03-16T01:51:30.764559Z"
    number: "20168340"
    number_intvalue: 20168340
    originated: 15-Mar-2015 06:51 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode-beta (6D543q)
    reproducible: Always
    resolved: ""
    status: Open
    title: Testing the equality of two ImplicitlyUnwrappedOptionals should not unwrap them
