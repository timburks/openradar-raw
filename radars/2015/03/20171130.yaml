apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "20171130"
    labels:
        datastore_id: "5233071703982080"
data:
    classification: ""
    created: "2015-03-16T10:55:48.98234Z"
    description: "This is a duplicate of rdar://17264362\r\n\r\nYou cannot currently extend a built-in or standard library generic type with any properties or methods that require the type's generic parameters.\r\n\r\nIn other words, create a framework project in Swift and add this to a swift file:\r\n\r\nextension Dictionary {\r\n    func OK() { }\r\n    func NotOK(a:KeyType) {\r\n    }\r\n}\r\n\r\nNow in one of your unit tests, try this (after importing your framework project):\r\n\r\nlet dict = [\"abc\": 5, \"xyz\": 3]\r\ndict.OK()\r\ndict.NotOK(\"\") //oops, linker error\r\n\r\nYou can use the extension method OK just fine, but as soon as you try to use NotOK, the linker will barf with an Undefined symbols for architecture error. That's because your unit tests are actually a separate product (aka binary). My theory is this is due to name mangling where the framework generates a different name than the unit test binary. I also strongly suspect this would happen for any type of dynamic library involving Swift generic classes but I haven't confirmed that."
    email: thephatmann@gmail.com
    modified: "2015-04-01T17:19:52.001831Z"
    number: "20171130"
    number_intvalue: 20171130
    originated: 16-Mar-2015 04:54 AM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 6.2
    reproducible: Always
    resolved: ""
    status: Duplicate of 16974298
    title: Generic extensions in libraries currently broken
