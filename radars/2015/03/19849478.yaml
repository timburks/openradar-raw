apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "19849478"
    labels:
        datastore_id: "6342119232897024"
data:
    classification: Bug
    created: "2015-03-07T06:19:36.346703Z"
    description: "I have a Result<T> type that supports monadic flow control methods.  The methods are overloaded in two versions:\r\n\r\n* One overload takes a function that returns the monadic type: () -> Result<()>\r\n\r\n* Other overload takes a function that returns Void: () -> ()\r\n\r\nIn Swift 1.1, this code compiled and ran correctly.  In Swift 1.2 it fails to compile.  The error message reports an ambiguous overload.\r\n\r\nSteps to Reproduce:\r\n1. Create Swift project in Xcode.\r\n2. Implement Result<T> type and monadic flow control methods in Swift.\r\n3. Implement test of Result<T> type and monadic flow control.\r\n\r\nExpected Results:\r\nXcode compiles the Swift code and tests succeed. \r\n\r\nActual Results:\r\nXcode 6.3b1 fails to compile the attached file.\r\n\r\nThe error message in Xcode 6.3b1:\r\n\r\n/Users/jay/Coding/Swift/TrySwift/TryThenWhile/TryThenWhile.swift:137:19: error: ambiguous use of 'thenWhile'\r\n        let rs4 = Result(s1)\r\n                  ^\r\n/Users/jay/Coding/Swift/TrySwift/TryThenWhile/TryThenWhile.swift:80:17: note: found this candidate\r\n    public func thenWhile(@autoclosure test:  () -> Bool, body: () -> Result<()>) -> Result<()> {\r\n                ^\r\n/Users/jay/Coding/Swift/TrySwift/TryThenWhile/TryThenWhile.swift:98:17: note: found this candidate\r\n    public func thenWhile(@autoclosure test:  () -> Bool, body: () -> ()) -> Result<()> {\r\n                ^\r\n/Users/jay/Coding/Swift/TrySwift/TryThenWhile/TryThenWhile.swift:156:15: error: enum case pattern cannot match values of the non-enum type '<<error type>>'\r\n        case .Success(let res): XCTAssertEqual(res.unbox, 10, \"Test 4 should have succeeded\")\r\n              ^\r\n/Users/jay/Coding/Swift/TrySwift/TryThenWhile/TryThenWhile.swift:157:15: error: enum case pattern cannot match values of the non-enum type '<<error type>>'\r\n        case .Failure(_): XCTFail(\"Test 4 failed\")"
    email: jlieske@gmail.com
    modified: "2015-03-07T06:19:36.346837Z"
    number: "19849478"
    number_intvalue: 19849478
    originated: 16-Feb-2015 12:01 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode Version 6.3 beta 2 (6D520o)
    reproducible: Always
    resolved: ""
    status: Duplicate
    title: Swift 1.2 canâ€™t resolve overload methods based on function return
