apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "20211532"
    labels:
        datastore_id: "5905502521262080"
data:
    classification: Enhancement
    created: "2015-03-18T20:46:56.226151Z"
    description: "This is a duplicate of rdar://20211159\r\n\r\nSummary:\r\nThis bit someone trying to use key-value coding to get the average of a given number out of an array of items with an NSUInteger property.\r\n\r\nThe NSNumber which came out of the @avg.value KVC method was of value 588.33333333333333333333333333333333333. The person then tried to access this value by calling both average.integerValue and average.unsignedIntegerValue.\r\n\r\nOn this person's computer, which was running Mavericks, the average integer would be 588. On my computer, running Yosemite, the average would be zero. After quite a bit of futzing about, we discovered that NSDecimalNumbers created from a string respond differently to being converted to an integer depending on the length. \r\n\r\nSteps to Reproduce:\r\nSee attached playground. \r\n\r\nExpected Results:\r\nThe integerValue and unsignedIntegerValues would be the same across platforms and regardless of the method of creation for the NSDecimalNumber. \r\n\r\nActual Results:\r\n(see “summary”)\r\n\r\nRegression:\r\nThis is occurring on 10.10.2, \r\n\r\nNotes:\r\nPlease see attached playground for some examples of how this winds up working."
    email: isaac.greenspan@vokalinteractive.com
    modified: "2015-03-25T16:03:23.184761Z"
    number: "20211532"
    number_intvalue: 20211532
    originated: 18-Mar-2015 03:46 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: 10.10.2 / Xcode 6.2
    reproducible: Always
    resolved: ""
    status: Closed (dup of rdar://19812966)
    title: Calling integerValue and unsignedIntegerValue on NSDecimalNumbers created from strings (including those using KVC) yields inconsistent results.
