apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17662243"
    labels:
        datastore_id: "4516376953749504"
data:
    classification: Feature Request
    created: "2015-03-23T11:07:29.802621Z"
    description: "Summary:\r\nEnum cases can have associated values which can currently be accessed using a switch statement on the enum value and retrieving the appropriate values in each case.\r\n\r\nIn most cases this is great as the logic for handling the associated values might differ depending on the actual enum case anyway.\r\n\r\nHowever, sometimes it might be useful to (read: easier to read & write) a general solution handling all cases equally. This is currently not possible as one cannot retrieve the associated values from an enum without switching over its cases.\r\n\r\nA simple use case might be printing the associated values:\r\n\r\nenum Foo {\r\n    case Empty\r\n    case Text(String)\r\n    case Signed(Int)\r\n    case Combination(String, Int)\r\n    // ...\r\n}\r\n\r\nextension Foo : Printable {\r\n    var description : String {\r\n        // Example syntax\r\n        return self.associatedValues.description\r\n\r\n        // If enums provided more reflection features\r\n        // return \".\\(self.caseName)(\\(self.associatedValues))\"\r\n    }\r\n}\r\n\r\n\r\nIn this example, 'associatedValues' might return an array that would be:\r\n* empty if in the .Empty case\r\n* contain a String in the .Text case\r\n* contain an Int in the .Signed case\r\n* contain a String followed by an Int in the .Combined case\r\n* etc...\r\n\r\nObviously the compiler might even infer the type of the array to the first common type of all possible values.\r\n\r\nAn alternative that fits better with the current enum syntax might be to return a n-ary tuple instead of an array, however that would require much more powerful tuples than are currently present (tuples of unknown size, features to get tuples size, members, member types, etc..) and would offer little benefit over the array version (I think).\r\n\r\n\r\nThe obvious downsides to this feature would be that it could (and probably would) be easily abused and result in uglier and unsafer code when used for more complex examples instead of the switch syntax. Another downside is of course increased language complexity.\r\n\r\nWhat I am trying to say is, it might be nice to have but I am not sure if it would be worth the hassle :-) So I certainly won't mind if you decide this is not worth it.\r\n\r\nHowever I would of course be delighted if you managed to come up with an even better solution :D\r\n\r\nSteps to Reproduce:\r\n\r\n\r\nExpected Results:\r\n\r\n\r\nActual Results:\r\n\r\n\r\nVersion:\r\nXcode 6 - Beta 3 (6A254o)\r\nSwift version 1.0 (swift-600.0.38.7)\r\nOS X 10.10 (14A283o)"
    email: janoschhildebrand@gmail.com
    modified: "2015-03-23T11:11:18.371311Z"
    number: "17662243"
    number_intvalue: 17662243
    originated: 14-Jul-2014
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 6.0 (6A279r)
    reproducible: NA
    resolved: ""
    status: Open
    title: 'Xcode Version 6.0 (6A279r): [Swift] Retrieve associated values from enum as n-ary tuple or array'
