apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17851675"
    labels:
        datastore_id: "6403392310083584"
data:
    classification: Enhancement
    created: "2015-03-23T11:27:14.609161Z"
    description: "Summary:\r\nThe following Swift code does not compile:\r\n\r\nlet flag: Bool = true\r\nswitch flag {\r\ncase true:\r\n    println(\"True\")\r\ncase false:\r\n    println(\"False\")\r\n}\r\n\r\nThe compiler complains that this switch statement is not exhaustive but this is obviously (hopefully) not true. An example is attached as a playground.\r\n\r\nThe underlying problem seems to be that the compiler can't easily check for exhaustiveness with structs (which Bool is). So either the compiler needs to become smarter (at least in this case) or Bool should be an enum.\r\nUsing an enum seems nicer to me in concept and you already solved the literal issue with 'nil' (literal for .None) but there might of course be other problems I am missing.\r\n\r\nThe obvious workaround for now is to add a dummy default clause but a nicer solution would be appreciated.\r\n\r\nSteps to Reproduce:\r\n1. Open the attached playground\r\n2. Remove the default clause to see the compiler error\r\n\r\nExpected Results:\r\nThe compiler should realise that 'true' and 'false' are the exhaustive list of possible cases for a boolean.\r\n\r\nActual Results:\r\nThe compiler does not currently do so.\r\n\r\nVersion:\r\nXcode Version 6.0 (6A267n)\r\nSwift version 1.0 (swift-600.0.41.2.2)\r\nOS X 10.10 (14A298i)"
    email: janoschhildebrand@gmail.com
    modified: "2015-08-26T12:45:44.11732Z"
    number: "17851675"
    number_intvalue: 17851675
    originated: 30-Jul-2014
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 6.0 (6A267n)
    reproducible: Always
    resolved: 8-Jun-2015
    status: Duplicate of 16514545 (Closed)
    title: 'Xcode 6.0 (6A267n): Switch over Swift boolean is not exhaustive'
