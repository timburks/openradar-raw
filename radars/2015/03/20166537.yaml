apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "20166537"
    labels:
        datastore_id: "5322252404916224"
data:
    classification: Crash
    created: "2015-03-15T14:44:17.166228Z"
    description: "Summary:\r\nIt looks like child window management tries to be smart with respect to the first responder of the parent window possibly being inside of the child window. Upon removal of the child window, NSWindow does a search to see if the parent window's first responder is within the child window that's about to be removed, and if so, it fixes that up. That's awesome. Except it doesn't seem to quite work right in all cases, and can lead to crashes.\r\n\r\nI'm sorry, but I don't have a sample project that can demonstrate this. I tried, but unfortunately I couldn't get the conditions just right. But I have copious logs that should pretty clearly show the problem. As well as steps to cause it to happen with our shipping app so that you can see it in person.\r\n\r\nI have a parent window, a child window, and a popover. Parent -> Child -> Popover. The child window displays many popovers, but only ever 1 at a time. As you move your mouse around it'll destroy and recreate popovers as needed.\r\n\r\nWhen calling -[NSPopover close], the window it's attached to receives -[NSWindow removeChildWindow:] with the popover as the argument. Before this call, the NSWindow's firstResponder is a view that's within the popover. After the call, the NSWindow's firstResponder is STILL a view that's within the popover, but now the window has no more strong references to the popover. The app itself has no more strong references to the popover either. This means the popover and its views will get deallocated next time the autorelease pool drains. The next time something references the window's firstResponder and sends it a message, a crash will happen.\r\n\r\nSteps to Reproduce:\r\n- Have Parent -> Child -> Popover window relationship\r\n- Have Child window's firstResponder be a view within Popover\r\n- Close the popover\r\n\r\nExpected Results:\r\n- Child window's firstResponder to get reset to Child window's initialFirstResponder (or anything within Child Window's contentView)\r\n\r\n\r\nActual Results:\r\n- Parent window's firstResponder gets reset to Parent window's initialFirstResponder\r\n- Child window's firstResponder is not modified, and remains a pointer to a view within the popover that's likely to get deallocated soon.\r\n\r\n\r\nVersion:\r\n10.10.2 14C109\r\n\r\nNotes:\r\nSince I can't yet reproduce this with a sample app, I've tried to get as much log info as possible to help shed light. Attached is a log file. To get these logs I have the following in our NSWindow subclass of which Parent and Child window inherit:\r\n\r\n- (BOOL)makeFirstResponder:(NSResponder *)aResponder {\r\n\tBOOL result = [super makeFirstResponder:aResponder];\r\n\tNSLog(@\"%s self=%@ responder=%@ result=%@\", __PRETTY_FUNCTION__, self, aResponder, result?@\"YES\":@\"NO\");\r\n\tNSLog(@\"call stack : %@\", [NSThread callStackSymbols]);\r\n\treturn result;\r\n}\r\n\r\n- (void)removeChildWindow:(NSWindow *)childWin {\r\n\tNSLog(@\"%s self=%@ childWin=%@\", __PRETTY_FUNCTION__, self, childWin);\r\n\tNSLog(@\"first responder = %@\", [self firstResponder]);\r\n\tNSLog(@\"first responder window = %@\", [[self firstResponder] respondsToSelector:@selector(window)] ? [(NSView *)[self firstResponder] window] : @\"not a view\");\r\n\tNSLog(@\"child windows before: %@\", [self childWindows]);\r\n\t[super removeChildWindow:childWin];\r\n\tNSLog(@\"child windows after: %@\", [self childWindows]);\r\n\tif ([[self firstResponder] respondsToSelector:@selector(window)] && [(NSView *)[self firstResponder] window] == childWin) {\r\n\t\tNSLog(@\"Invalid First Responder %@. Expect a crash.\", [self firstResponder]);\r\n//\t\t[self makeFirstResponder:self.initialFirstResponder];\r\n\t}\r\n}\r\n\r\nIf you look at the log, which is quite long (goes to show how rare it can be, hence the difficulty with the sample project)... look near the end. Search for \"Expect a crash\". You'll see:\r\n\r\nInvalid First Responder <NSButton: 0x60800034ac90>. Expect a crash.\r\n\r\nThen the last line of the log:\r\n*** -[NSButton isKindOfClass:]: message sent to deallocated instance 0x60800034ac90\r\n\r\nIt goes to show that I'm able to correctly identify when this crash is about to happen. The workaround is to fix up the firstResponder myself (the commented line above). So here's what's interesting... if you look up above the \"Expect a crash\" line, this is where the fun begins:\r\n2015-03-14 16:27:13.133 2BUA8C4S2C.com.agilebits.onepassword-osx-helper[35776:45860647] -[OPHelperWindow removeChildWindow:] self=<OPHelperWindow: 0x100f8a4c0> childWin=<_NSPopoverWindow: 0x10ad23080>\r\n\r\nWe see the OPHelperWindow at 0x100f8a4c0 getting removeChildWindow with the popover. You can see that its first responder is currently the button that gets us in trouble later, and that its child windows list is just the popover. Everything looks fine at this point.\r\n\r\nBut now look just below, at 2015-03-14 16:27:13.133. Who's getting the -makeFirstResponder: message? It's not our OPHelperWindow at 0x100f8a4c0, instead it's an OPHelperWindow at 0x100dbe110. That's the Parent window in the Parent -> Child -> Popover relationship. You can clearly see in its callstack that Parent window is getting its firstResponder modified as a result of the -removeChildWindow call on the Child. Three -makeFirstResponder: calls are made during this process. None of which are done on the child window, our OPHelperWindow at 0x100f8a4c0. So yeah, clearly its firstResponder will stay the same and become invalid.\r\n\r\nIf you look at the other invocations of -removeChildWindow: in the logs, you should notice that the calls to -makeFirstResponder go to the window we expect. So it's often doing the right thing. But then sometimes, for whatever reason, it's not, then things go sideways.\r\n\r\n\r\nSteps to reproduce in a live app:\r\n- Download 1Password 5.1 : https://cache.agilebits.com/dist/1P/mac4/1Password-5.1.zip\r\n- Launch, create a new empty vault.\r\n- Download the attached agilekeychain, which will get sample data (easier to reproduce with lots of ). Its password is 'top1000'\r\n- Go into Sync, select Primary vault, sync via Folder, and point it to the agilekeychain. You'll be prompted for the password. Enter top1000\r\n- Now click on 1Password mini's icon in the system menu bar\r\n- Mouse over to Logins, which will expand a list of logins which should take up the entire vertical height of your display\r\n- Mouse over one of the logins. Notice that a popover displays. So now you see the Parent -> Child -> Popover window relationship\r\n- Move the mouse cursor down, and you'll notice the popover gets destroyed and another popover gets created. So far things are working great.\r\n- Now two-finger scroll slowly. As the login items are scrolling by, the popovers will get destroyed and created still. Again, things are working as expected, mostly.\r\n- Keep doing this, but slowly move your cursor down towards the bottom of the screen\r\n- Once the cursor ends up leaving the Child window's frame from the bottom, I almost always get a crash.\r\n\r\n\r\nLog file : http://cl.ly/text/3i2r3s0D2P2p"
    email: rick@agilebits.com
    modified: "2015-03-15T14:44:17.166454Z"
    number: "20166537"
    number_intvalue: 20166537
    originated: "2015-03-15"
    parent_number: '&{NULL_VALUE}'
    product: OS X
    product_version: 10.10.2
    reproducible: Always
    resolved: ""
    status: Open
    title: -[NSWindow removeChildWindow:] can set firstResponder of wrong window
