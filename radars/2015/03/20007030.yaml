apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "20007030"
    labels:
        datastore_id: "5215265843314688"
data:
    classification: Security
    created: "2015-03-02T18:15:46.034076Z"
    description: "This is a duplicate of rdar://19590215\r\n\r\nSwift’s optionals are a great idea. They eliminate a whole class of common programming errors. But the `if let` syntax can be a bit verbose at times. This is a proposal to add a simpler, clearer, shorthand syntax for optional unwrapping (to *complement* the existing syntax, not replace it).\r\n\r\nHere is the basic `if let` syntax for using an optional:\r\n\r\nif let anotherName = perfectlyGoodName\r\n{\r\n  // use 'anotherName'\r\n}\r\n\r\nThe first problem to notice is that you have to name the unwrapped variable. Naming things is hard, so when you already have a perfectly good name for the variable, who wants to come up with another one?\r\n\r\nThe solution is simple, and already supported: reuse the same name, shadowing the original:\r\n\r\nif let perfectlyGoodName = perfectlyGoodName\r\n{\r\n  // use 'perfectlyGoodName'\r\n}\r\n\r\nIf this is to become convention, and it looks like it will, then it makes sense to have a shorthand syntax to avoid the redundant repetition. Here’s my first proposal:\r\n\r\nif let perfectlyGoodName\r\n{\r\n  // use 'perfectlyGoodName'\r\n}\r\n\r\nIt’s reminiscent of the way null checks are done in many languages, including Objective-C, so it feels natural and looks cleaner.\r\n\r\nBut there is another problem with `if let`:\r\n\r\nif let a = a\r\n{\r\n  if let b = b\r\n  {\r\n    if let c = c\r\n    {\r\n      // do something which requires a, b, and c to be non-optional\r\n    }\r\n  }\r\n}\r\n\r\nWhen you have multiple optionals that need unwrapping together, you can quickly find yourself navigating a deep hierarchy of nested `if let` blocks. It’s ugly, verbose, and obfuscates the intent of the code.\r\n\r\nMy second proposal is a shorthand syntax for safely unwrapping multiple optionals simultaneously:\r\n\r\nif let a = a, b = b, c = c\r\n{\r\n  // do something which requires a, b, and c to be non-optional\r\n}\r\n\r\nThe `if let` block is entered only if *all* of the optionals a, b, and c are non-nil. This avoids the multiple nested blocks and makes the code easier to read, and clearer in intent.\r\n\r\nAnd, of course, it works even better with the shorthand name shadowing from above:\r\n\r\nif let a, b, c\r\n{\r\n  // do something which requires a, b, and c to be non-optional\r\n}"
    email: rmaloney27@gmail.com
    modified: "2020-07-27T20:22:04.287845Z"
    number: "20007030"
    number_intvalue: 20007030
    originated: 02-Mar-2015 10:15 AM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: Always
    resolved: ""
    status: Closed
    title: Proposal for shorthand "if let" syntax in Swift
