apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "20135489"
    labels:
        datastore_id: "5781410178662400"
data:
    classification: Other Bug
    created: "2015-03-12T12:25:55.31195Z"
    description: "Fixed in Swift 2 beta 1.\r\n\r\nSummary:\r\nEnums can have associated values and associated values can have labels like tuples have labels. However, those labels do little to catch silly programmer errors in switch statements where enums are most commonly used.\r\n\r\nIn particular, if the enum happens to have multiple associated values of the same type with labels, the Swift compiler happily accepts those labels in any order in a \"case let\" statement.\r\n\r\nIt would be better if doing so would be an error.\r\n\r\nIt would be A LOT better if permuting the order of labelled associated values would be allowed but the compiler swizzled the values to their correct counterparts in a \"case let\".\r\n\r\nSteps to Reproduce:\r\nRun the code:\r\n\r\n```\r\nenum MyEnum {\r\n    case Case(one: String, two: String)\r\n}\r\n\r\nswitch MyEnum.Case(one: \"expected\", two: \"unexpected\") {\r\n    case let .Case(two: _, one: x):\r\n        println(x) // prints \"unexpected\"\r\n}\r\n```\r\n\r\nExpected Results:\r\nI would expect either:\r\n\r\n1. A compiler error stating that the labels are in wrong order\r\n\r\nOR, better yet:\r\n\r\n2. The code to run and print \"expected\". I just happened to grab the associated values in another order!\r\n\r\nActual Results:\r\nThe code prints the word \"unexpected\". Which I very likely an error.\r\n\r\nVersion:\r\nHappens in both:\r\n- Xcode 6.2 (6C131e)\r\n- Xcode 6.3 beta 2 (6D532l)"
    email: pyry.jahkola@gmail.com
    modified: "2015-06-16T14:59:56.42267Z"
    number: "20135489"
    number_intvalue: 20135489
    originated: "2015-03-12"
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: Always
    resolved: "2015-06-16"
    status: Closed
    title: Enum case labels are ignored in "case let" statements
