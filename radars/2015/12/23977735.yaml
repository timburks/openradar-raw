apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "23977735"
    labels:
        datastore_id: "5003558684459008"
data:
    classification: ""
    created: "2015-12-22T20:14:50.63248Z"
    description: "sample project: https://www.dropbox.com/s/axgswutjuoddr0m/Rdar.zip?dl=0\r\n\r\nSummary:\r\nOnce MTKView was created it stays in memory forever. I’d faced with this problem in real project, but for sake of simplicity I’ve created two test projects to focus on the problem. They're in attachments.\r\n      MTKViewReleaseProblem_XIB_version project consists of RootViewController which is responsible for presenting ViewController. ViewController has an MetalView weak outlet reference from corresponding xib. MetalView is a subclass of MTKView which does nothing except logging of its creation and destruction. But actually destruction log doesn't appear. This project shows the problem when we use MTKView in conjunction with xibs.\r\n     MTKViewReleaseProblem_non_XIB project consists of ViewController which is responsible for presenting MetalViewController. MetalViewController has an MetalView instance as property that is initialized in viewWillAppear.MetalView is a subclass of MTKView which does nothing except logging of its creation and destruction. But actually destruction log don't appear. This project shows the problem when we create MTKView programmatically(from code).\r\n     Both projects show deallocation issue of MTKView instances, which are not even initialized with any data.\r\n\r\nSteps to Reproduce:\r\nCase 1:\r\n     0. Launch MTKViewReleaseProblem_XIB_version project from XCode.\r\n     1. Tap “Present” button to show ViewController from RootViewController.\r\n     2. See \"MetalView initWithCoder” in console window(‘cause MetalView has this log statement)\r\n     3. Tap “Dismiss” button to dismiss ViewController and deallocate it.\r\n     4. See \"ViewController dealloc” message which ViewController has in its dealloc method.\r\n\r\n\r\nCase 2:\r\n     0. Open MTKViewReleaseProblem_XIB_version in XCode.\r\n     1. Launch with profiler.\r\n     2. Choose ‘Allocations’ template.\r\n     3. Enter ‘MetalView’ in ‘Instrument detail field’ to find MetalView instances.\r\n     4. On device tap “Present” button to show ViewController from RootViewController.\r\n     5. On device tap “Dismiss” button to dismiss ViewController and deallocate it.\r\n     6. Repeat steps 4-5 several times.\r\nCase 3:\r\n     0. Launch MTKViewReleaseProblem_non_XIB project from XCode.\r\n     1. Tap “Present” button to show MetalViewController from ViewController.\r\n     2. See \"MetalView initWithFrame:device:” in console window(‘cause MetalView has this log statement)\r\n      3. Tap “Dismiss” button to dismiss MetalViewController and deallocate it.\r\n     4. See \" dealloc MetalViewController” message which ViewController has in its dealloc method.\r\nCase 4:\r\n     0.  Open MTKViewReleaseProblem_non_XIB in XCode.\r\n     1. Launch with profiler.\r\n     2. Choose ‘Allocations’ template.\r\n     3. Enter ‘MetalView’ in ‘Instrument detail field’ to find MetalView instances.\r\n     4. On device tap “Present” button to show MetalViewController from ViewController.\r\n     5. On device tap “Dismiss” button to dismiss MetalViewController and deallocate it.\r\n     6. Repeat steps 4-5 several times.\r\n\r\nExpected Results:\r\nCase 1:\r\n     MetalView's dealloc message in console window.\r\nCase 2:\r\n     In Details->Statistics pane there are no records in ‘Presistent’ column for MetalView.\r\nCase 3:\r\n     MetalView's dealloc message in console window.\r\nCase 4:\r\n     In Details->Statistics pane there are no records in ‘Presistent’ column for MetalView.\r\n\r\nActual Results:\r\nCase 1:\r\n     Despite of ViewController’s dealloc message there isn’t corresponding MetalView's dealloc message. But it should be.\r\nCase 2:\r\n          In Details->Statistics pane there are several ‘Persistent’ instances of MetalView(actually how many times steps 4-5 were performed). In Details->AllocationList pane we can see instances of MetalView and 'Responsible Caller’ for them - [UIClassSwapper initWithCoder:] what wasn't actually created by me.\r\nCase 3:\r\n          No MetalView’s dealloc message\r\nCase 4:\r\n     In Details->Statistics pane there are several ‘Persistent’ instances of MetalView(actually how many times steps 4-5 were performed). In Details->AllocationList pane we can see instances of MetalView and 'Responsible Caller’ for them - [MetalViewController viewWillAppear:] what is quite strange if we’ll look at implementation.\r\n\r\nVersion:\r\n iOS 9.1[13B143] and iOS 9.0.2[13A452]\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:\r\niPhone 6 plus"
    email: berkutvlad@gmail.com
    modified: "2015-12-22T20:14:50.63283Z"
    number: "23977735"
    number_intvalue: 23977735
    originated: 21-Dec-2015 11:39 PM
    parent_number: '&{NULL_VALUE}'
    product: iOS SDK
    product_version: 9.x
    reproducible: Always
    resolved: ""
    status: Open
    title: 'MetalKit: MTKView stays in memory when it supposed to be released.'
