apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "23919603"
    labels:
        datastore_id: "6622168112693248"
data:
    classification: Serious Bug
    created: "2015-12-16T14:26:28.98113Z"
    description: "Summary:\r\nThere’s an ambiguity case in Swift’s generic constraint syntax that happens when specifying more than one generic types, the first one needing to be constrained using `where`.\r\n\r\nLong story short, the compiler interprets the second generic type as part of the `where` statement.\r\n\r\nSteps to Reproduce:\r\n```\r\nprotocol Protocol1 { }\r\nprotocol Protocol2 { }\r\n\r\nclass Class { }\r\n\r\nclass GenericClass<A: Class where A: Protocol1, B: Protocol2> {\r\n\r\n}\r\n```\r\n\r\nExpected Results:\r\nSwift interprets GenericClass<A, B>.\r\n\r\nActual Results:\r\nSwift interprets GenericClass<A>, and throws an error because B is implicitly part of the `where` statement (which it shouldn’t).\r\n\r\nError: “Use of undeclared type B”"
    email: d@vidroman.me
    modified: "2015-12-16T14:33:03.47082Z"
    number: "23919603"
    number_intvalue: 23919603
    originated: 16-Dec-2015 03:27 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Swift 2.1.1
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift: syntax ambiguity in generic constraints'
