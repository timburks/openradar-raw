apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "19426183"
    labels:
        datastore_id: "4526293764800512"
data:
    classification: Other bug
    created: "2015-01-09T16:08:47.964671Z"
    description: "Summary:\r\nA factory method that should create an instance of a generic type creates the wrong instance. It seems related to which type constraint that is set since setting the constraint to \"NSObject\" instead of \"Vehicle\" makes the correct instance type.\r\n\r\nSteps to Reproduce:\r\nInsert this sample code in Playground:\r\n\r\n\r\nimport Foundation\r\n\r\nclass Vehicle {\r\n    func getType() -> String {\r\n        return \"vehicle\"\r\n    }\r\n}\r\n\r\nclass Bicycle: Vehicle{\r\n    override func getType() -> String {\r\n        return \"bicycle\"\r\n    }\r\n}\r\n\r\nfunc construct<T : Vehicle>() -> T { //NB: Change constraint to NSObject (and let vehicle subclass NSObject), and it all works\r\n    return T()\r\n}\r\n\r\nlet a : Bicycle = construct()\r\nprintln (\"\\(a.getType())\")   //Expected \"Bicycle\". Got \"Vehicle\"\r\n\r\nExpected Results:\r\nI expected a Bicycle object to be created since that is the generic type (can be verified by printing out the type in the \"construct\" function\r\n\r\nActual Results:\r\nA Vehicle object was created"
    email: johanvase@gmail.com
    modified: "2023-11-30T15:17:26.677224Z"
    number: "19426183"
    number_intvalue: 19426183
    originated: 09-01-2015
    parent_number: '&{NULL_VALUE}'
    product: iOS
    product_version: Xcode 6.1.1
    reproducible: Always
    resolved: Yes
    status: Closed
    title: 'Swift: Generic factory method creates wrong instance type'
