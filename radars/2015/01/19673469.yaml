apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "19673469"
    labels:
        datastore_id: "6398978694316032"
data:
    classification: Security
    created: "2015-01-31T03:23:14.513322Z"
    description: |-
        Summary:
        Some combination of factors that I can’t reduce is causing a really awful bug where a non-nil value is branched on as though nil, unless I print it first.

        Don’t ask me.


        Steps to Reproduce:
        1. Check out this repo, and all of its submodules, at the branch on this pull request: https://github.com/antitypical/Tesseract.framework/pull/22
        2. Open Tesseract.xcworkspace
        3. Run the tests (⌘U)
        4. Note that two tests fail in EnvironmentTests.swift

        NB: They shouldn’t—the value _is not nil_ (as can be verified in the debugger).

        5. In EnvironmentTests.swift, uncomment the println(e) line.
        6. Run the tests (⌘U)
        7. Note that the tests pass (!!!)


        Expected Results:
        I expected the tests to pass in the first place, as the value is not nil.


        Actual Results:
        Amazingly, commenting out and uncommenting the println causes the tests to fail and pass respectively. I can only assume the compiler is generating bad code somewhere in there—possibly something to do with the @autoclosures in assertNotNil (see Assertions.swift), but I dunno.


        Regression:
        N/A


        Notes:
        N/A
    email: rix.rob@gmail.com
    modified: "2015-01-31T03:23:14.513528Z"
    number: "19673469"
    number_intvalue: 19673469
    originated: 30-Jan-2015 10:22 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 6.1.1 (6A2008a)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift: Printing an optional value causes a test to pass that otherwise (erroneously) fails'
