apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "19519590"
    labels:
        datastore_id: "5756819074973696"
data:
    classification: ""
    created: "2015-01-19T18:46:34.960117Z"
    description: "Summary:\r\nThe following code causes the compiler to segfault:\r\n\r\nprotocol SourceTargetTransformable {\r\n    typealias Source\r\n    typealias Target\r\n    typealias Transformer = Source -> Target\r\n}\r\n\r\n\r\nstruct PiecewiseTransformedGeneratorOf<\r\n                                        Source,\r\n                                        Target,\r\n                                        SourceGenerator: GeneratorType,\r\n                                        TransformerGenerator: GeneratorType,\r\n                                        Transformable: SourceTargetTransformable\r\n                                      where\r\n                                        Transformable.Source == Source,\r\n                                        Transformable.Target == Target,\r\n                                        SourceGenerator.Element == Source,\r\n                                        TransformerGenerator.Element == Transformable.Transformer\r\n                                      >\r\n       : GeneratorType {\r\n    typealias Element = Target\r\n    \r\n    var sourceGenerator: SourceGenerator\r\n    var transformerGenerator: TransformerGenerator\r\n    \r\n    mutating func next() -> Element? {\r\n        let source: Transformable.Source? = sourceGenerator.next()\r\n        if let source: Transformable.Source = source {\r\n            let transformer: Transformable.Transformer? = transformerGenerator.next()\r\n            if let transformer: Transformable.Transformer = transformer {\r\n                let tfunc: (Source -> Target)? = transformer as? (Source -> Target)\r\n                if let tfunc = tfunc {\r\n                    return tfunc(source)\r\n                }\r\n            }\r\n        }\r\n        return nil\r\n    }\r\n}\r\n\r\nstruct PiecewiseTransformedSequenceOf<\r\n        SourceSequence: SequenceType,\r\n        TransformerSequence: SequenceType,\r\n        Transformable: SourceTargetTransformable\r\n    where\r\n        SourceSequence.Generator.Element == Transformable.Source,\r\n        TransformerSequence.Generator.Element == Transformable.Transformer\r\n        >: SequenceType {\r\n    \r\n    typealias Source = SourceSequence.Generator.Element\r\n    typealias Target = Transformable.Target\r\n    typealias Generator = PiecewiseTransformedGeneratorOf<Source, Target, SourceSequence.Generator, TransformerSequence.Generator, Transformable>\r\n    \r\n \r\n    let inputs: SourceSequence\r\n    let transformers: TransformerSequence\r\n    \r\n    init(inputs: SourceSequence, transformers: TransformerSequence) {\r\n        self.inputs = inputs\r\n        self.transformers = transformers\r\n    }\r\n    \r\n    func generate() -> Generator {\r\n        return PiecewiseTransformedGeneratorOf(sourceGenerator: inputs.generate(), transformerGenerator: transformers.generate())\r\n    }\r\n}\r\n\r\nSteps to Reproduce:\r\n1.  Create a new Command Line project in Xcode\r\n2.  Paste in the following code to main.swift:\r\n\r\nprotocol SourceTargetTransformable {\r\n    typealias Source\r\n    typealias Target\r\n    typealias Transformer = Source -> Target\r\n}\r\n\r\n\r\nstruct PiecewiseTransformedGeneratorOf<\r\n                                        Source,\r\n                                        Target,\r\n                                        SourceGenerator: GeneratorType,\r\n                                        TransformerGenerator: GeneratorType,\r\n                                        Transformable: SourceTargetTransformable\r\n                                      where\r\n                                        Transformable.Source == Source,\r\n                                        Transformable.Target == Target,\r\n                                        SourceGenerator.Element == Source,\r\n                                        TransformerGenerator.Element == Transformable.Transformer\r\n                                      >\r\n       : GeneratorType {\r\n    typealias Element = Target\r\n    \r\n    var sourceGenerator: SourceGenerator\r\n    var transformerGenerator: TransformerGenerator\r\n    \r\n    mutating func next() -> Element? {\r\n        let source: Transformable.Source? = sourceGenerator.next()\r\n        if let source: Transformable.Source = source {\r\n            let transformer: Transformable.Transformer? = transformerGenerator.next()\r\n            if let transformer: Transformable.Transformer = transformer {\r\n                let tfunc: (Source -> Target)? = transformer as? (Source -> Target)\r\n                if let tfunc = tfunc {\r\n                    return tfunc(source)\r\n                }\r\n            }\r\n        }\r\n        return nil\r\n    }\r\n}\r\n\r\nstruct PiecewiseTransformedSequenceOf<\r\n        SourceSequence: SequenceType,\r\n        TransformerSequence: SequenceType,\r\n        Transformable: SourceTargetTransformable\r\n    where\r\n        SourceSequence.Generator.Element == Transformable.Source,\r\n        TransformerSequence.Generator.Element == Transformable.Transformer\r\n        >: SequenceType {\r\n    \r\n    typealias Source = SourceSequence.Generator.Element\r\n    typealias Target = Transformable.Target\r\n    typealias Generator = PiecewiseTransformedGeneratorOf<Source, Target, SourceSequence.Generator, TransformerSequence.Generator, Transformable>\r\n    \r\n \r\n    let inputs: SourceSequence\r\n    let transformers: TransformerSequence\r\n    \r\n    init(inputs: SourceSequence, transformers: TransformerSequence) {\r\n        self.inputs = inputs\r\n        self.transformers = transformers\r\n    }\r\n    \r\n    func generate() -> Generator {\r\n        return PiecewiseTransformedGeneratorOf(sourceGenerator: inputs.generate(), transformerGenerator: transformers.generate())\r\n    }\r\n}\r\n\r\n3.  Build.\r\n4.  Notice that the compiler segfaults.\r\n\r\nExpected Results:\r\nThe compiler doesn't segfault.\r\n\r\nActual Results:\r\nThe compiler does in fact segfault.\r\n\r\nVersion:\r\nXcode 6A1052d and Xcode 6C86e\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:\r\nCode consistently causes segfault.\r\n\r\nAttachments:"
    email: nathaniel.chandler@gmail.com
    modified: "2015-08-25T14:34:56.12465Z"
    number: "19519590"
    number_intvalue: 19519590
    originated: 01/19/2015
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 6A1052d and Xcode 6C86e
    reproducible: Always
    resolved: 07/21/2015
    status: Closed
    title: Generic Constraints Can SegFault the Compiler
