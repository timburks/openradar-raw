apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "23516367"
    labels:
        datastore_id: "6061254107987968"
data:
    classification: Enhancement
    created: "2015-11-12T15:15:59.46707Z"
    description: "SetAlgebraType, especially when used as OptionSetType, is excessively verbose when creating a union of values. This is an very common operation, and basically the whole point of OptionSetType.\n\nFor example, UIBezierPath(roundedRect:byRoundingCorners:cornerRadii), currently has to be written as:\n\nlet path = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 100, height: 100),\n    byRoundingCorners: UIRectCorner.TopLeft.union(.TopRight).union(.BottomRight),\n    cornerRadii: CGSize(width: 5, height: 5))\n\nThis buries what’s going on, and can’t even type-infer UIRectCorner.\n\nWith an operator, this is much easier to read, matches ObjC practice, and gives us type-inference back:\n\npublic func |<T: SetAlgebraType>(lhs: T, rhs: T) -> T {\n    return lhs.union(rhs)\n}\n\nlet path = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 100, height: 100),\n    byRoundingCorners: .TopLeft | .TopRight | .BottomRight,\n    cornerRadii: CGSize(width: 5, height: 5))\n\n\nFor completeness: \n\n@warn_unused_result\npublic func |=<T : SetAlgebraType>(inout lhs: T, rhs: T) {\n    lhs.unionInPlace(rhs)\n}"
    email: robnapier@gmail.com
    modified: "2015-11-12T15:15:59.46739Z"
    number: "23516367"
    number_intvalue: 23516367
    originated: 12-Nov-2015 10:15 AM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 7.2 beta (&c46t)
    reproducible: Not Applicable
    resolved: ""
    status: Open
    title: SetAlgebraType.union should have an operator
