apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "23616744"
    labels:
        datastore_id: "6080130355036160"
data:
    classification: Feature (New)
    created: "2015-11-19T20:18:54.13292Z"
    description: "Summary:\nHaving a protocol P and a protocol T, it would be useful to express that any type P also conforms to T by providing an extension.\n\nSteps to Reproduce:\n- Compile the following code:\n\nprotocol T {}\nprotocol S {}\n\nextension T: S {}\n\nExpected Results:\n- It compiles.\n\nActual Results:\n- error: extension of protocol 'T' cannot have an inheritance clause\n\nNotes:\n- This would be extra useful in addition to rdar://23616223.\n- A more useful example could be:\n\nprotocol SwiftProtocol {\n\tvar swiftValue: SwiftOnlyType { get }\n}\n\npublic protocol ObjectiveCProtocol {\n\tvar objectiveCValue: ObjectiveCType { get }\n}\n\nextension ObjectiveCProtocol: SwiftProtocol {\n\tvar swiftValue: SwiftOnlyType { \n\t\treturn self.objectiveCValue.bridgedToSwift()\n\t}\n}"
    email: info@nachosoto.com
    modified: "2015-11-19T20:18:54.13326Z"
    number: "23616744"
    number_intvalue: 23616744
    originated: 19-Nov-2015 12:18 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Swift 2.1
    reproducible: Always
    resolved: ""
    status: Open
    title: '[Swift] Ability to make protocol extensions conform to another protocol'
