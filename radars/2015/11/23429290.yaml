apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "23429290"
    labels:
        datastore_id: "6070894967390208"
data:
    classification: Enhancement
    created: "2015-11-06T12:54:43.85928Z"
    description: "Summary:\nIf protocol A has associated type requirements it can not be used in a heterogeneous collection.\n\nprotocol ProtocolA {\n\ttypealias : Element\n}\n\nvar n : [ProtocolA]  // Protocol `ProtocolA` can only be used as a generic constraint because it has Self of associated type requirements\n\nAllow the type requirement to be  resolved  in an inheriting protocol: \n\nprotocol ProtocolB : ProtocolA {\n\tElement = ConcreteType\n}\n\nvar n : [ProtocolB] // okay to use ProtocolB in a heterogeneous collection.\n\n\nI am using the heterogeneous collection as one example, but it allows ProtocolB to be used as a  type (without generics). This would be very useful in many situations.\n\nIf we can provide default implementations for method and property requirements in extensions, why canâ€™t we also provide type reference requirements? \n\nNotes:\nPlease see attached markup."
    email: amber@simpletouchsoftware.com
    modified: "2015-11-06T12:54:43.85948Z"
    number: "23429290"
    number_intvalue: 23429290
    originated: 06-Nov-2015 07:54 AM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Swift 2.1
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift : Resolve parent protocol associated type requirements in inheriting protocols'
