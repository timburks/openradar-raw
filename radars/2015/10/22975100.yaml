apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "22975100"
    labels:
        datastore_id: "6255730126487552"
data:
    classification: ""
    created: "2015-10-05T18:09:29.53248Z"
    description: "Summary:\r\nnetstat does not display tcp connections that are in the TIME_WAIT state.\r\nThis appears to because it uses the net.inet.tcp.pcblist_n sysctl to obtain the table of connections. Using the net.inet.tcp.pcblist sysctl *does* display connections in TIME_WAIT state.\r\n\r\nSo the problem is presumably in netinet/in_pcblist.c's get_pcblist_n() function.\r\n\r\nI've written an alternate tool (pcblist2.c) that uses the net.inet.tcp.pcblist sysctl and correctly shows TIME_WAIT connections. Source attached.\r\n\r\nSteps to Reproduce:\r\n1. Compile pcblist2\r\n2. Open and close a TCP connection, e.g.\r\n  echo foo | nc scripts.mit.edu 80\r\n3. With some haste (TIME_WAIT connections time out in about 30 seconds), run\r\n4. pcblist2\r\n5. netstat -np tcp\r\n\r\nExpected Results:\r\npcblist2 displays the connection in TIME_WAIT:\r\n\r\nRecvQ SendQ Local Address        Foreign Address       srtt (ms)     (state)\r\n    0     0 18.111.17.239.51972  18.181.0.43.80            2 ± 0     TIME_WAIT\r\n\r\nnetstat should do so as well\r\n\r\nActual Results:\r\nnetstat does not display the TIME_WAIT connection.\r\n\r\nVersion:\r\n10.10.5 (14F27)\r\n\r\nNotes:\r\nOther BSD kernels have no problem displaying TIME_WAIT connections\r\n\r\nConfiguration:\r\nThe problem appears to be universal.\r\n\r\nAttachments:\r\n'pcblist2.c' was successfully uploaded.\r\n\r\nCode follows for pcblist2.c:\r\n#include <sys/types.h>\r\n\r\n#include <sys/attr.h>\r\n#include <sys/socket.h>\r\n#include <sys/socketvar.h>\r\n#include <sys/sysctl.h>\r\n\r\n#include <arpa/inet.h>\r\n#include <netinet/in.h>\r\n#include <netinet/tcp.h>\r\n\r\n#include <netinet/in_pcb.h>\r\n#include <netinet/tcp_timer.h>\r\n#include <netinet/tcp_var.h>\r\n\r\n#define TCPSTATES\r\n#include <netinet/tcp_fsm.h>\r\n\r\n#include <stdio.h>\r\n#include <stddef.h>\r\n#include <stdlib.h>\r\n\r\n/* From the private xnu-2782.40.9/bsd/netinet/tcp_var.h lines 622-636: */\r\n/*\r\n * The rtt measured is in milliseconds as the timestamp granularity is \r\n * a millisecond. The smoothed round-trip time and estimated variance\r\n * are stored as fixed point numbers scaled by the values below.\r\n * For convenience, these scales are also used in smoothing the average\r\n * (smoothed = (1/scale)sample + ((scale-1)/scale)smoothed).\r\n * With these scales, srtt has 5 bits to the right of the binary point,\r\n * and thus an \"ALPHA\" of 0.875.  rttvar has 4 bits to the right of the\r\n * binary point, and is smoothed with an ALPHA of 0.75.\r\n */\r\n#define TCP_RTT_SCALE           32      /* multiplier for srtt; 3 bits frac. */\r\n#define TCP_RTT_SHIFT           5       /* shift for srtt; 5 bits frac. */\r\n#define TCP_RTTVAR_SCALE        16      /* multiplier for rttvar; 4 bits */\r\n#define TCP_RTTVAR_SHIFT        4       /* shift for rttvar; 4 bits */\r\n#define TCP_DELTA_SHIFT         2       /* see tcp_input.c */\r\n\r\n\r\nint main () {\r\n  \r\n  int rv;\r\n  size_t len;\r\n  struct xtcpcb *pcblist, *p;\r\n  rv = sysctlbyname(\"net.inet.tcp.pcblist\",\r\n\t\t    NULL, &len, NULL, 0);\r\n  if (rv < 0) {\r\n    perror(\"sysctl\");\r\n  }\r\n  p = pcblist = malloc(len);\r\n  rv = sysctlbyname(\"net.inet.tcp.pcblist\",\r\n\t\t    pcblist, &len, NULL, 0);\r\n  if (rv < 0) {\r\n    perror(\"sysctl\");\r\n  }\r\n\r\n  printf(\"%-5s %-5s %-21s%-21s %-13s %s\\n\",\r\n\t \"RecvQ\", \"SendQ\",\r\n\t \"Local Address\", \"Foreign Address\",\r\n\t \"srtt (ms)\", \"(state)\");\r\n\r\n  char laddr[25], faddr[25];\r\n  \r\n  for (;\r\n       (char*)p < (char*)pcblist+len;\r\n       p = (struct xtcpcb*)((char*)p + p->xt_len)) {\r\n    \r\n    if (p->xt_socket.xso_family == AF_INET &&\r\n\tp->xt_socket.xso_protocol == IPPROTO_TCP) {\r\n\r\n      struct in_addr *lia = &p->xt_inp.inp_laddr;\r\n      struct in_addr *fia = &p->xt_inp.inp_faddr;\r\n\t\r\n#define INADDR_LOCALHOST 0x7f000001\r\n\r\n      int lip = ntohl(lia->s_addr);\r\n\r\n      if (lip == INADDR_LOCALHOST ||\r\n\t  lip == INADDR_ANY\r\n\t  ) { continue; }\r\n\r\n      sprintf(laddr, \"%s.%d\", inet_ntoa(*lia), ntohs(p->xt_inp.inp_lport));\r\n      sprintf(faddr,\"%s.%d\", inet_ntoa(*fia),  ntohs(p->xt_inp.inp_fport));\r\n\r\n      printf(\"%5d%6d %-21s%-22s %4d ± %-5d %s\\n\",\r\n\t     p->xt_socket.so_rcv.sb_cc,\r\n\t     p->xt_socket.so_snd.sb_cc,\r\n\t     laddr, faddr,\r\n\t     (int)((double)p->xt_tp.t_srtt / TCP_RTT_SCALE),\r\n\t     (int)((double)p->xt_tp.t_rttvar / TCP_RTTVAR_SCALE),\r\n\t     tcpstates[p->xt_tp.t_state]);\r\n    }\r\n\r\n  }\r\n\r\n  return 0;\r\n}"
    email: jhawk@mit.edu
    modified: "2015-10-05T18:09:29.53275Z"
    number: "22975100"
    number_intvalue: 22975100
    originated: 5 Oct 2015
    parent_number: '&{NULL_VALUE}'
    product: OS X
    product_version: 10.10.5 (14F27)
    reproducible: Always
    resolved: ""
    status: Open
    title: netstat (pcblist_n sysctl) does not display TIME_WAIT connections
