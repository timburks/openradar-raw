apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "23155201"
    labels:
        datastore_id: "5554433874198528"
data:
    classification: Serious Bug
    created: "2015-10-17T05:07:01.72457Z"
    description: "Summary:\r\nStringInterpolationConvertible can't distinguish string literal segments from \\(...) clauses containing strings. This limits seriously the usefulness of this protocol.\r\n\r\nSteps to Reproduce:\r\n1. Develop a Swift library around SQLite (http://github.com/groue/GRDB.swift).\r\n2. Come across StringInterpolationConvertible.\r\n3. Dream about safe argument injection in SQL queries, as in \"SELECT * FROM table WHERE name = \\(name)\".\r\n4. Drool when you realize that StringInterpolationConvertible could generate the lists of question marks needed by \"SELECT * FROM TABLE WHERE id IN \\(ids)\".\r\n5. (mentally postpone this glossy feature until Swift 2.1, when string literals can be used in interpolated strings)\r\n6. Play with StringInterpolationConvertible, and discover that \"foo\\(string)\" triggers `init<T>(stringInterpolationSegment expr: T)` with two strings. Which one is the SQL query segment, which one is the SQL argument? No one could tell.\r\n\r\nExpected Results:\r\nThe joy of being able to offer a great API for generating SQL queries with safe argument interpolation.\r\n\r\nActual Results:\r\nThe feeling that StringInterpolationConvertible could have been a great protocol, and fell short.\r\n\r\nVersion:\r\nXcode 7.0 (7A218)\r\nOSX 10.10.5 (14F27)"
    email: gwendal.roue@gmail.com
    modified: "2015-10-17T05:07:01.72477Z"
    number: "23155201"
    number_intvalue: 23155201
    originated: 2015/10/17
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 7.0 (7A218)
    reproducible: Always
    resolved: ""
    status: Open
    title: StringInterpolationConvertible can't distinguish string literal segments from \(...) clauses containing strings.
