apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "23113344"
    labels:
        datastore_id: "6154357590458368"
data:
    classification: ""
    created: "2015-10-14T19:58:03.06615Z"
    description: "!!! Resolved in Xcode 8 betas\r\n\r\n\r\nSummary:\r\nWhen enabling address sanitizer in a C++ application, a segfault occurs when calling the \"store\" method of std::atomic. I discovered the problem when debugging my own application and created a simple test case to reproduce it.\r\n\r\nAttached is an Xcode project with a main.cpp file that will produce a segfaulting application when compiled with ASAN enabled. I've been able to reproduce the problem by Build&Running inside Xcode with Address Sanitizer enabled in the scheme as well as by compiling the main.cpp file directly with clang.\r\n\r\nSteps to Reproduce:\r\njeremy@Galactus ~/D/A/ASANAtomicBlowup> clang++ -fsanitize=address -std=c++11 -o AtomicBlowup main.cpp\r\njeremy@Galactus ~/D/A/ASANAtomicBlowup> ./AtomicBlowup \r\n\r\nExpected Results:\r\nTest application should output the following:\r\n\r\nHello, World!\r\n\r\nActual Results:\r\nTest application outputs the following:\r\n\r\nASAN:SIGSEGV\r\n=================================================================\r\n==88426==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x000106d91796 bp 0x7fff58e6f980 sp 0x7fff58e6f740 T0)\r\n    #0 0x106d91795 in register_wakeup_callback(void (*)(void*), void*) (/Users/jeremy/Desktop/ASANAtomicBlowup/ASANAtomicBlowup/./AtomicBlowup+0x100001795)\r\n    #1 0x106d92040 in main (/Users/jeremy/Desktop/ASANAtomicBlowup/ASANAtomicBlowup/./AtomicBlowup+0x100002040)\r\n    #2 0x7fff8e6605c8 in start (/usr/lib/system/libdyld.dylib+0x35c8)\r\n    #3 0x0  (<unknown module>)\r\n\r\nAddressSanitizer can not provide additional info.\r\nSUMMARY: AddressSanitizer: SEGV ??:0 register_wakeup_callback(void (*)(void*), void*)\r\n==88426==ABORTING\r\n\r\n\r\nVersion:\r\nOS X 10.10.5 (14F27)\r\nXcode Version 7.0 (7A218)\r\nApple LLVM version 7.0.0 (clang-700.0.72)\r\n\r\nNotes:\r\nIn my application I worked around the issue by adding \"__attribute__((no_sanitize_address))\" to the definition of functions that use std::atomic.\r\n\r\nConfiguration:\r\nMacBook Pro (Retina, 15-inch, Late 2013). Xcode 7.0.0 installed from developer site download section.\r\n\r\n\r\n\r\n//\r\n//  main.cpp\r\n//  ASANAtomicBlowup\r\n//\r\n//  Created by Jeremy Agostino on 10/14/15.\r\n//  Copyright Â© 2015 JeremyAgost. All rights reserved.\r\n//\r\n\r\n#include <iostream>\r\n#include <atomic>\r\n\r\nusing std::atomic;\r\n\r\nstruct callback_pair\r\n{\r\n\tvoid (*func)(void*);\r\n\tvoid *arg;\r\n};\r\n\r\natomic<callback_pair> wakeup_callback({nullptr, nullptr});\r\n\r\nvoid register_wakeup_callback(void ( * callback)(void* pVoid), void* param)\r\n{\r\n\twakeup_callback.store({callback, param});\r\n}\r\n\r\nvoid unregister_wakeup_callback()\r\n{\r\n\twakeup_callback.store({nullptr, nullptr});\r\n}\r\n\r\nvoid dummy(void *)\r\n{\r\n\tstd::cout << \"Hello, Dummy!\\n\";\r\n}\r\n\r\nint main(int argc, const char * argv[]) {\r\n\r\n\tvoid * fooptr = nullptr;\r\n\tregister_wakeup_callback(dummy, fooptr);\r\n\r\n\tunregister_wakeup_callback();\r\n\r\n\tstd::cout << \"Hello, World!\\n\";\r\n    return 0;\r\n}"
    email: jeremy@groundctl.com
    modified: "2016-06-16T09:05:04.47969Z"
    number: "23113344"
    number_intvalue: 23113344
    originated: 14-Oct-2015 03:56 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 7.0
    reproducible: Always
    resolved: ""
    status: Fixed
    title: Clang AddressSanitizer causes crash when using std::atomic object
