apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "23238038"
    labels:
        datastore_id: "6160783935275008"
data:
    classification: ""
    created: "2015-10-23T18:20:12.10056Z"
    description: "Summary:\r\nRetain loops are by far the number one reason for memory leaks, but a simple feature of Swift could almost completely eliminate them:\r\n\r\nRequire the ownership of `self` to be explicitly specified in a block unless the block is only used for a `@noescape` block.\r\n\r\nDevelopers very rarely mistakenly choose to have `self` strongly retained to create the retain loops. Usually it's because we go back and modify something within a block and we use self without thinking about the capture semantics, or because we forgot to specify while we're writing the code.\r\n\r\nHaving to explicitly type `[strong self]` would probably eliminate more than 90% of retain loops in most applications. I know that's a breaking change, but hopefully the code migrator would be able to handle making that transition easier.\r\n\r\nSteps to Reproduce:\r\n\r\n\r\nExpected Results:\r\n\r\n\r\nActual Results:\r\n\r\n\r\nVersion:\r\nXcode 7.1\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:\r\n\r\n\r\nAttachments:"
    email: raylillywhite@gmail.com
    modified: "2015-10-23T18:20:12.10085Z"
    number: "23238038"
    number_intvalue: 23238038
    originated: 23-Oct-2015 11:16 AM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Open
    title: Retain loops are way too easy with block/closures but could be prevented in Swift
