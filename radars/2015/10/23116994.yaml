apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "23116994"
    labels:
        datastore_id: "6192344831361024"
data:
    classification: UI/Usability
    created: "2015-10-14T22:37:15.116Z"
    description: "Description:\r\nThe -Wstrict-prototypes warning from GCC is not implemented in Clang. In C and Objective-C code, many developers mistakenly use ‘()’ for a function or block parameters expecting it to mean “no arguments” where it actually means “unspecified arguments”. This has been an “obsolescent feature” since C89 and ANSI-C.\r\n\r\nThis leads to type mis-matches, where a block typed ‘void (^)()’ can be passed as a parameter to ‘void (^)(id obj, float f)’ without warning resulting in issues at runtime (unexpected values, EXC_BAD_ACCESS, etc.). There should be a diagnostic when first creating a variable of a function or block type with unspecified arguments.\r\n\r\n\r\nSteps to reproduce:\r\nCompile (with -Weverything) and run:\r\n\r\nint main(int argc, const char *argv[]) {\r\n    void (^block)() = ^(NSInteger arg) {\r\n        printf(“arg = %ld\\n”, arg);\r\n    };\r\n    block(42);\r\n    block(-1);\r\n    return 0;\r\n}\r\n\r\n\r\nExpected Results:\r\nWarning at line 2 (example using GCC’s language; actual wording should be more effective):\r\n  warning: block declaration isn’t a prototype [-Wstrict-prototypes]\r\n\r\n\r\nActual Results:\r\nNo warnings are generated; logged output is:\r\narg = 42\r\narg = 4294967295\r\n\r\n\r\nXcode Version/Build & OS X Version/Build:\r\nXcode 7.0.1 (7A1001)\r\nOS X 10.10.5 (14F27)\r\n\r\n\r\nAdditional Notes:\r\nSee also https://llvm.org/bugs/show_bug.cgi?id=20796"
    email: me@JonathonMah.com
    modified: "2015-10-14T22:37:15.11627Z"
    number: "23116994"
    number_intvalue: 23116994
    originated: 14-Oct-2015 03:33 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 7.0.1 (7A1001)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Clang: strict-prototypes warning ignored, so bad code proliferates'
