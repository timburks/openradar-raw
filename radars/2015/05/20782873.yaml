apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "20782873"
    labels:
        datastore_id: "4945965354057728"
data:
    classification: Enhancement
    created: "2015-05-01T20:09:12.35067Z"
    description: "Summary:\r\nWatchKit apps have the constraint: \"The value of CFBundleVersion in your WatchKit app's Info.plist must match the value in your companion app's Info.plist.\"\r\n\r\nMany developers (including myself) generate the CFBundleVersion at build-time. This is usually achieved with a \"Run Script\" build phase that modifies the Info.plist file in the built app. \r\n\r\nSince we don't have build phases in WatchKit app targets, this isn't achievable. Modifying the Info.plist from another target (such as the WatchKit app extension) invalidates the code signature of the WatchKit app.\r\n\r\nThis forces workarounds such as creating an aggregate target to generate a header file containing the version numbers, then using Info.plist preprocessing to get the version number into CFBundleVersion. I've attached a sample project that implements this workaround to show how involved it is when a simple build phase script would do this in three lines.\r\n\r\nSteps to Reproduce:\r\n1. In Xcode, click a WatchKit app's target in the Project editor. \r\n2. Expect to see a \"Build Phases\" tab.\r\n\r\nExpected Results:\r\nI expect to see a \"Build Phases\" tab.\r\n\r\nActual Results:\r\nNo \"Build Phases\" tab is present. \r\n\r\nNotes:\r\nSince there is a requirement for WatchKit apps to use the same CFBundleVersion as the host app, I'd kind of expect that rule to be dealt with automatically. That would negate the need for these workarounds. \r\n\r\nOpenRadar note: Sample project here: http://cl.ly/2d1H0X3W062e"
    email: inbox@ikennd.ac
    modified: "2015-05-01T20:09:12.35104Z"
    number: "20782873"
    number_intvalue: 20782873
    originated: "2015-05-01"
    parent_number: '&{NULL_VALUE}'
    product: iOS SDK
    product_version: Xcode 6.3.1 (6D1002)
    reproducible: Always
    resolved: ""
    status: Open
    title: WatchKit apps don't have a "Build Phases" section in Xcode, forcing hacky workarounds
