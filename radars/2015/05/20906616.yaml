apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "20906616"
    labels:
        datastore_id: "5002974334025728"
data:
    classification: Enhancement
    created: "2015-05-11T22:35:33.55282Z"
    description: |-
        Summary:
        I thought I’d filed this but maybe not so here goes.

        Given some type P and an enum like so:

        enum E {
        	case C(P)
        }

        E.C should be a first-class function of type P -> E, by which I specifically mean that I should be able to pass it as an argument to map.

        This should also be the case for cases without values, in which case it should introduce two symbols:

        - E.C, a first-class function of type () -> E, as above
        - E.C, a first-class value of type E, as it currently is

        Presumably it should prefer the latter.

        I’d be willing to accept omitting parameterless cases from receiving first class functions, but every time Swift’s implementation special cases something, I die a little inside.


        Steps to Reproduce:
        N/A

        Expected Results:
        N/A

        Actual Results:
        N/A

        Regression:
        N/A

        Notes:
        N/A
    email: rix.rob@gmail.com
    modified: "2015-05-11T22:35:33.55315Z"
    number: "20906616"
    number_intvalue: 20906616
    originated: 11-May-2015 06:35 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode-beta (6E14)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift: enum cases should be callable as functions'
