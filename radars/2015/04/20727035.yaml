apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "20727035"
    labels:
        datastore_id: "6178662038634496"
data:
    classification: Serious Bug
    created: "2015-04-28T14:53:44.97894Z"
    description: |-
        Summary:
        Partially applying a curried function (using concepts from Haskell’s Applicative typeclass) results in a type mismatch when the curried function has named parameters.

        Steps to Reproduce:
        1. Open the attached playground

        Expected Results:
        `baz` should be able to apply `f` on line 34

        Actual Results:
        `f` has a named parameter, causing a type mismatch, and so can’t be applied.

        Notes:
        1. This happens for our custom types, as well as with `Array`. It _doesn’t_ happen with `Optional`, however.
        2. Ignoring the external labels in the curried function causes the error to go away:

        ```
        func curried(_ foo: String)(_ bar: String)(_ baz: String) -> String
        ```
    email: gordon@thoughtbot.com
    modified: "2015-04-28T14:53:44.97909Z"
    number: "20727035"
    number_intvalue: 20727035
    originated: 28-Apr-2015 10:53 AM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Swift 1.2
    reproducible: Always
    resolved: ""
    status: Open
    title: Applicative partial application of curried functions with named parameters causes type mismatch
