apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "20580966"
    labels:
        datastore_id: "4987889872011264"
data:
    classification: Feature (New)
    created: "2015-04-17T00:55:01.09331Z"
    description: |-
        Swift has an awesome feature that calling Class.myMethodName will return a block that takes an instance that returns a block that calls the method on the instance. This makes for some really clean code that avoids using selectors/strings that could be applied to any class.

        It would be nice if this same principal was applied to properties as well. ObjC uses keys and key paths all over the place, but those break as code is refactored without any compiler warning.

        Something that worked similar to the following:

        Conversation.subject // returns a meta object
        Conversation.subject.key // “subject”
        Conversation.subject.getter // (Conversation) -> (() -> (String))
        Conversation.subject.setter // (Conversation) -> ((String) -> ())

        Bonus points for a clean way to replace KVO (that doesn’t crash all the time).

        Conversation.subject.addObserver(aConversation, options: nil) {
        	// do something when it changes
        } // returns an observer meta object that can be used to remove it, i.e. observer.remove()
    email: davbeck@gmail.com
    modified: "2015-04-17T00:55:01.09356Z"
    number: "20580966"
    number_intvalue: 20580966
    originated: 16-Apr-2015 05:54 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Swift 1.2
    reproducible: Always
    resolved: ""
    status: Open
    title: Add introspection to properties
