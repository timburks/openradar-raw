apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "20728777"
    labels:
        datastore_id: "6174512294920192"
data:
    classification: Enhancement
    created: "2015-04-28T16:59:42.72188Z"
    description: "ECMAScript 6 adds a feature called template strings that behave similarly to StringInterpolationConvertible, but with a lot more flexibility. They use ticks (`) instead of quotes and when used without any modifiers, behave essentially exactly like StringInterpolationConvertible does in Swift. However, when you tag the string, it calls the function named the same as the tag. The function takes 2 arrays. The first being the string literal parts of the template, and the second being all the variables. The function can then combine the arguments in any way it sees fit. For instance, it could return an SQL statement, replacing the variables with question marks and keeping a reference to the arguments to pass to SQLite.\n\nMore info here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings\n\nStringInterpolationConvertible however forces you to convert every part of the template to the given class/struct. Further, it does not distinguish between string literal components and the mixed in variables. This makes it difficult, if not impossible, to do anything with StringInterpolationConvertible besides create strings. With a more flexible implementation, things like NSPredicate could replace â€¦WithFormat: methods with template literals.\n\nPossible solutions:\n\nprotocol StringInterpolationConvertible {\n    init<T>(stringInterpolation strings: [String], variables: [T])\n}\n\nprotocol StringInterpolationConvertible {\n    enum StringInterpolationPart<T> {\n        case Literal(String)\n        case Variable(T)\n    }\n    \n    init<T>(stringInterpolation parts: [StringInterpolationPart<T>])\n}"
    email: davbeck@gmail.com
    modified: "2015-04-28T16:59:42.72211Z"
    number: "20728777"
    number_intvalue: 20728777
    originated: 28-Apr-2015 09:59 AM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Swift 1.2
    reproducible: Always
    resolved: ""
    status: Open
    title: Add ECMAScript 6 template string like support to Swift
