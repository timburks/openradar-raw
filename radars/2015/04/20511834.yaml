apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "20511834"
    labels:
        datastore_id: "4964818649874432"
data:
    classification: Other Bug
    created: "2015-04-12T05:54:01.03724Z"
    description: "Summary:\r\nMac OS X 10.10.3 includes new diversity emoji.  These emoji are encoded as two Unicode code points: a base emoji and a modifier codepoint that changes the skin color of the base emoji.  The resulting emoji has a single grapheme representation â€” they appear as one indivisible character to user.  However, Swift 1.2 considers these new emoji to be two characters instead of a single character in size.  This is inconsistent with how Swift counts other Unicode modifier codepoints.\r\n\r\nSteps to Reproduce:\r\n1. Use Xcode 6.3 to create a Swift playground for OS X.\r\n2. Enter the following Swift code.  es1 is a traditional emoji, and es2 is a diversity emoji.\r\n\r\nlet es1 = \"\U0001F44C\"\r\ncount(es1)\r\nlet ec1 = Character(es1)\r\nlet es2 = \"\U0001F44C\U0001F3FD\"\r\ncount(es2)\r\nlet ec2 = Character(es2)\r\n\r\n\r\n\r\nExpected Results:\r\n* The output of both calls to count() should be 1.\r\n* The output of both Character() constructors should be valid.\r\n\r\nActual Results:\r\n* count(es1) = 1, but count(es2) = 2\r\n* Character(es2) fails to execute (the playground stops showing output)\r\n\r\nVersion:\r\nXcode 6.3 (6D570)\r\nOS X 10.10.3 (14D131)"
    email: jlieske@gmail.com
    modified: "2015-04-12T05:54:01.03747Z"
    number: "20511834"
    number_intvalue: 20511834
    originated: 11-Apr-2015
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 6.3
    reproducible: Always
    resolved: ""
    status: Open
    title: Swift 1.2 on Mac OS X 10.10.3 reports the wrong length for new emoji
