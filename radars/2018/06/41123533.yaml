apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "41123533"
    labels:
        datastore_id: "5053552187670528"
data:
    classification: Security
    created: "2018-06-14T13:43:24.81029Z"
    description: "Summary:\r\nThis is a duplicate of radar #40984545\n\nArea:\r\nUIKit\r\n\r\nMost images eventually come from http/https URLs. It's not trivial to write good code that downloads images. It usually involves following parts:\r\n\r\n- Download image in background\r\n- Progressive display\r\n- Caching, LRU management, checking if file is the same/updated on the server\r\n- resuming\r\n- background decompressing\r\n\r\nNo wonder that rarely any app gets this right, and 3rd-party frameworks like SDWebImage, PINImage or Twitter Image Pipeline are popular.\r\n\r\nWeb browsers just do all of that as part of their core logic. Decompressing images is also hard and should ideally be abstracted away. It seems unreasonable to ask app developers to reinvent the wheel every single time.\r\n\r\nNot even Apple gets this right, as you can see in the WWDC 2018 app:\r\nhttps://twitter.com/steipete/status/1005579125787152384\r\n\r\nPlease add something like UIImage(from: URL(\"http://domain.com/image.jpg\") that does the right thing for typical use cases (if URLs need auth, people can still aways roll their own)\n\r\n\r\nSteps to Reproduce:\r\n \r\n\r\nExpected Results:\r\n \r\n\r\nActual Results:\r\n \r\n\r\nVersion:\r\n11.3/12\r\n\r\nNotes:\r\nIdeally, the API should allow to fade in the image as soon as it's loaded. Or let us do that in a completion handler."
    email: futuretap@googlemail.com
    modified: "2018-06-14T13:43:24.81054Z"
    number: "41123533"
    number_intvalue: 41123533
    originated: 14-Jun-2018 09:43 AM
    parent_number: '&{NULL_VALUE}'
    product: iOS + SDK
    product_version: 11.3/12
    reproducible: Always
    resolved: ""
    status: Open
    title: Allow to initialize an UIImage from a URL.
