apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "41630689"
    labels:
        datastore_id: "5011602730385408"
data:
    classification: ""
    created: "2018-06-29T12:57:29.990123Z"
    description: "In MacOS Mojave sending Apple Events to other applications requires authorization from the user. The user experience to grant authorization is sub-par.\r\n\r\nThis is particularly problematic in situations where Apple Script is the “official API” for interacting with applications or data. In the absence of metadata editing or bulk editing extension API for Apple Photos, Apple Script remains the API of choice for third party applications to work with photos: geocode, bulk rename, etc.\r\n\r\nMoreover third party applications implement Apple Script support not only allow automation by the user, but also as an API for other applications to connect to.\r\n\r\nOn the first attempt to send an Apple Event, the user is prompted for authorization. After refusal later requests fail. Once aware of the problems caused by the initial refusal, the user needs to navigate to a setting burried deep within System Preferences to correct the issue.\r\n\r\nThe current workflow has the following problems:\r\n\r\n1. No API to check if authorization has been requested, granted, or denied.\r\n1a. Thus no way to “dim” UI for features that are not available without authorization\r\n1b. Difficult to time the authorization request to a moment where the user can understand the context\r\n1c. No way to provide a UI that lists authorizations (photos, contacts, automation, etc.) granted \r\n\r\n2. The target application is launched before the user is prompted for authorization. This may startle the user, cause worry and reduce the likelyhood of granting authorization\r\n\r\n3. No way to provide an explanation as to why automation is needed. This again reduces the likelyhood of the user granting authorization. Because of #1 it is not possible to alert the user about the upcoming prompt and to proactively provide an explanation.\r\n\r\n4. No way to trigger a new prompt for authorization. E.g. after adding new features or after explaining to the user why automation is needed or after the user otherwise changes her mind.\r\n\r\nThe user experience thus involves:\r\n- trying out a feature\r\n- seeing an application launch\r\n- being asked for authorization with no explanation given\r\n- seeing a desired operation fail\r\n- wading trough System Preferences to update the setting\r\n\r\n\r\nSolutions:\r\n\r\n1. Provide API akin to [EKEventStore authorizationStatusForEntityType:EKEntityTypeReminder]\r\n\r\n2. Provide API to request authorization prior to attempting to send Apple Events. I.e. API akin to -[EKEventStore requestAccessToEntityType:completion:]\r\n\r\n3. Allow for an Info.plist key akin to NSRemindersUsageDescription\r\n\r\n4. Enhance API provided under #2 with an option to show the prompt again if authorization was previously refused.  E.g.\r\n\r\n-[NSAppleEventManager requestToTarget:bundleId\r\noptions:NSAppleEventManagerRequestPromptAlways\r\ncompletion:block]"
    email: pierre.bernard@houdah.com
    modified: "2018-07-10T08:57:10.64615Z"
    number: "41630689"
    number_intvalue: 41630689
    originated: June 29 2018
    parent_number: "41570203"
    product: 'macOS + SDK: Automation'
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Duplicate/41570203
    title: Mojave Automation security has bad user experience
