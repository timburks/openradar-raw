apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "46220251"
    labels:
        datastore_id: "5046788419485696"
data:
    classification: Bug
    created: "2018-11-23T10:24:24.513482Z"
    description: "Summary:\r\nmacOS has long supported alt+arrow keys to move the input cursor between word boundaries. Xcode's definition of word boundary is.. not what one would expect.\r\n\r\n\r\nSteps to Reproduce:\r\nGiven this piece of code for example:\r\n\r\n    public init(error: Error) {\r\n        self = .error(error)\r\n    }\r\n\r\n    public init(_ value: Value?, failWith: @autoclosure () -> Error) {\r\n        self = value.map(Result.success) ?? .error(failWith())\r\n    }\r\n\r\nUse alt+left/right to move the insertion cursor back and forth.\r\n\r\nExpected Results:\r\nI'd expect curly braces and operators to be treated as \"words\".\r\n\r\nActual Results:\r\nWith the cursor after the first }, pressing alt-left moves the cursor to between the ( and e on the line above. I'd expect at least two or three left presses to get that far. In programming it seems like parenthesis should be treated as words.\r\n\r\nPressing alt-right from the same position moves the cursor to after the second \"public\".\r\n\r\nWith the cursor between the . and e in `.error(failWith())` pressing alt-left moves the cursor all the way to before success. Where I would expect it to end up just before ??.\r\n\r\nWith string literals like \"Foo.Bar.Baz\" I'd expect the cursor to treat the period as a word boundary.\r\n\r\nI don't think that CamelCase should be treated as two words, although I can see how it'd be useful on occasion.\r\n\r\nVersion/Build:\r\nVersion 10.1 (10B61)\r\n\r\nConfiguration:"
    email: hi@iamsim.me
    modified: "2018-11-23T10:24:24.513713Z"
    number: "46220251"
    number_intvalue: 46220251
    originated: ""
    parent_number: '&{NULL_VALUE}'
    product: Xcode
    product_version: Version 10.1 (10B61)
    reproducible: Always
    resolved: ""
    status: Open
    title: Using alt-arrows to navigate code works in unexpected ways
