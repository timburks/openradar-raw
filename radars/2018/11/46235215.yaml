apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "46235215"
    labels:
        datastore_id: "4987283258212352"
data:
    classification: Other Bug
    created: "2018-11-26T03:35:04.503375Z"
    description: "Summary:\r\nWhen SKPhysicsWorld sends didBeginContact: and didEndContact: to its contactDelegate, the contact argument is of class PKPhysicsContact, while the API states that this object should be of class SKPhysicsContact. This breaks categories on SKPhysicsContact.\n\nPresumably the implementation of SKPhysicsContact is empty and it exists to provide a public API exposing some of PKPhysicsContact’s interface. In that case, could SKPhysicsContact be implemented as a wrapper around a PKPhysicsContact? It only has five read-only properties.\r\n\r\nSteps to Reproduce:\r\nA sample project is attached, which asserts the class is as the API declared. See Source/Scene.m.\n\n1. Set up a Sprite Kit scene so the physics world has a contactDelegate and a collision occurs that has contactTestBitMask set.\n2. In the contactDelegate’s implementation of didBeginContact:, observe the class of the contact argument, perhaps using [contact isKindOfClass:[SKPhysicsContact class]].\r\n\r\nExpected Results:\r\n[contact isKindOfClass:[SKPhysicsContact class]] should return YES, because this is declared by the API.\r\n\r\nActual Results:\r\ncontact is a PKPhysicsContact from the private Physics Kit framework, which is not a subclass of SKPhysicsContact. Category methods on SKPhysicsContact cause a runtime exception when sent to the contact argument.\r\n\r\nVersion:\r\nXcode 10.1, iOS 12.1\r\n\r\nNotes:"
    email: douglashill@douglashill.co
    modified: "2018-11-26T03:35:04.503583Z"
    number: "46235215"
    number_intvalue: 46235215
    originated: 26-Nov-2018 11:35 AM
    parent_number: '&{NULL_VALUE}'
    product: iOS + SDK
    product_version: Xcode 10.1, iOS 12.1
    reproducible: Always
    resolved: ""
    status: Open
    title: SKPhysicsContactDelegate method arguments are of unexpected class
