apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "43035278"
    labels:
        datastore_id: "4960629655863296"
data:
    classification: Other Bug
    created: "2018-08-08T06:10:20.38014Z"
    description: "Summary:\r\nThe [RFC 7159 JSON spec][1] allows top-level fragments, like `99`, but JSONEncoder/JSONDecoder does not support this. Top-level fragments can be useful to save single values to disk or User Defaults [2].\r\n\r\nNSJSONSerialization already supports decoding top-level fragments with the `JSONSerialization.ReadingOptions.allowFragments` setting, so I'm requesting introducing the same setting for encoding too: `JSONSerialization.WritingOptions.allowFragments`. Then JSONEncoder/JSONDecoder in Swift could use that to implement support for top-level fragments.\r\n\r\n\r\n[1]: https://tools.ietf.org/html/rfc7159#section-3\r\n[2]: https://github.com/sindresorhus/Defaults/blob/7ce06f346e18fe774284b29323c07c99e0a35f19/Sources/Defaults.swift#L83-L92\r\n\r\nSteps to Reproduce:\r\n \r\n\r\nExpected Results:\r\nI expected this to work:\r\n\r\n```swift\r\nlet intData = \"99\".data(using: .utf8)!\r\n\r\nlet decoder = JSONDecoder()\r\ndecoder.allowFragments = true\r\ntry decoder.decode(Int.self, from: intData) // 99\r\n```\r\n\r\nActual Results:\r\nIt doesn't work.\r\n\r\nVersion:\r\nmacOS 10.13\r\n\r\nNotes:"
    email: sindresorhus@gmail.com
    modified: "2018-08-14T17:24:04.67177Z"
    number: "43035278"
    number_intvalue: 43035278
    originated: 08-Aug-2018 01:10 PM
    parent_number: '&{NULL_VALUE}'
    product: macOS + SDK
    product_version: macOS 10.13
    reproducible: Always
    resolved: ""
    status: Open (Duplicate of 38549586)
    title: JSONEncoder and JSONDecoder should support top-level fragments
