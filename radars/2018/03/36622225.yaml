apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "36622225"
    labels:
        datastore_id: "6173057961951232"
data:
    classification: Other bug
    created: "2018-03-08T13:25:10.48287Z"
    description: "Area: Core Graphics\r\n\r\nSummary:\r\n\r\nCore Text gets confused if the same CTRunDelegate is applied to multiple consecutive characters. \r\n\r\nSteps to Reproduce:\r\n\r\nOpen and run the attached Swift iOS playground. Observe the information printed to the console.\r\n\r\nExpected Results:\r\n\r\nCoreText should produce two glyphs (in one or two glyph runs) for the U+FFFC characters with run delegates and the total typographic width of the CTLine should equal the sum of the widths of the CTRuns.\r\n\r\nActual Results:\r\n\r\nCoreText doesn't generate a glyph run for the U+FFFC characters (in the string range 1-2) even though the width of the CTLine (value: 32) clearly includes the width (value: 10) returned by the run delegate for each character.\r\n\r\nUsing a different run delegate for the second character makes the issue go away.\r\n\r\nVersion/Build: iOS 11.2\r\n\r\nAddendum: Creating another CTRunDelegate instance with the same parameters (`let spacer2 = ...` in the example) is not a reliable way to work around this issue, because CTRunDelegate defines equality structurally and the attribute runs may thus be merged by operations on the attributed string. To reliably work around this issue one has to force the run delegates into different glyph runs by making sure that the attribute dictionaries for the adjacent object replacement characters do not compare equal, e.g. by adding an extra attribute."
    email: st@quanttec.com
    modified: "2018-03-08T13:25:10.48316Z"
    number: "36622225"
    number_intvalue: 36622225
    originated: January 18 2018
    parent_number: '&{NULL_VALUE}'
    product: iOS + SDK
    product_version: ""
    reproducible: Always
    resolved: ""
    status: ""
    title: Core Text fails to produce glyph run if the same CTRunDelegate is applied to multiple consecutive characters
