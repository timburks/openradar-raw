apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "36824694"
    labels:
        datastore_id: "6172641215905792"
data:
    classification: OpenGL/CA
    created: "2018-01-24T16:18:58.35742Z"
    description: "Summary:\r\nglClearColor() produces different channel endianness when clearing a GL_FRAMEBUFFER that is backed by a GL_RGB10_A2 CGLTexImageIOSurface2D. \r\nglClearColor() works differently on Mac/AMD GPUs than on nVidia: the latter has the B and R channels swapped (i.e. interprets the framebuffer as BGRA instead of RGBA). The latter, nVidia, is wrong, btw.\r\n\r\nSteps to Reproduce:\r\n\r\nPlease see the code in \r\nhttps://github.com/yellowdoge/screen_info/blob/master/dcastagna-iosurface.mm\r\n\r\nExpected Results:\r\nAll architectures should show the same colors, i.e. interpret the framebuffer with the same channel endianness.\r\n\r\nActual Results:\r\nWhen writing the channel associated to Red in glClearPixels(), nVidia presents a blue output, whereas intel/amd is correctly presenting Red.\r\n\r\nVersion/Build:\r\nConfiguration:\r\nSee attached system reports and photo."
    email: mcasas@chromium.org
    modified: "2018-01-24T16:19:18.30135Z"
    number: "36824694"
    number_intvalue: 36824694
    originated: 01/24/2018
    parent_number: '&{NULL_VALUE}'
    product: Mac
    product_version: "10.13"
    reproducible: YES
    resolved: NO
    status: Open
    title: Framebuffer is interpreted as BGRA instead of RGBA on nVidia, GL_RGB10_A2
