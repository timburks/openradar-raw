apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "36078254"
    labels:
        datastore_id: "6147134478876672"
data:
    classification: ""
    created: "2018-02-06T17:46:09.7831Z"
    description: "Area:\r\nSceneKit\r\n\r\nSummary: For a SCNGeometry there are 3 main ways to use the subdivisionLevel, one of them does not smooth the normals.\r\n\r\nScenario 1:\r\nIf the subdivisionLevel is set without assigned a SCNGeometryTessellator to the SCNGeometry first, the subdivision runs on the CPU and the results are correct and as expected, including smooth vertex normals and regardless of whether the vertices are unique or shared. However, as I reported in Bug Report 35373461, using subdivisionLevel without a tessellator results in (large) memory leaks consistently.\r\n\r\nScenario 2:\r\nIf the subdivisionLevel is set AND a SCNGeometryTessellator is assigned AND the wantsAdaptiveSubdivision is set to YES, the subdivision runs on the GPU instead of CPU and the results are correct and as expected, including smoothed normals. However, I do not want to use adaptive subdivision because the models are designed for regular catmull clark subdivision (I.e.  I need to get the same results as I get in the first scenario but on the GPU and this without the leaks).\r\n\r\nScenario 3:\r\nIf the subdivisionLevel is set AND a SCNGeometryTessellator is assigned AND the wantsAdaptiveSubdivision is set to NO, the subdivision runs on the GPU but unlike in the previous two scenarios, the normals are suddenly no longer smoothed.\r\n\r\nSteps to Reproduce: I tried various models, the one in the screenshots is a simple cube.\r\n\r\n//Code for Scenario 1 (runs on CPU, gives desired results INCLUDING SMOOTH NORMALS but also memory leaks)\r\ntheNode.geometry.subdivisionLevel = 3;\r\n\r\n//Code for Scenario 2 (tessellator is assigned, adaptive subdivision is ON. Gives desired results INCLUDING SMOOTH NORMALS except for the subdivision being adaptive.)\r\n\r\nSCNGeometryTessellator *tess = [SCNGeometryTessellator new];\r\ntheNode.geometry.tessellator = tess;\r\ntheNode.geometry.wantsAdaptiveSubdivision = YES;\r\ntheNode.geometry.subdivisionLevel = 3;\r\n\r\n//Code for Scenario 3 (runs on GPU because tessellator is assigned, adaptive subdivision is OFF. Gives desired results as in good ol' catmull clark subdivision and smoothing of the geometry, however,  EXCLUDING SMOOTH NORMALS)\r\n\r\nSCNGeometryTessellator *tess = [SCNGeometryTessellator new];\r\n//tess.smoothingMode = SCNTessellationSmoothingModePhong; //this option has no noticable effect despite its hopeful name\r\ntheNode.geometry.tessellator = tess;\r\ntheNode.geometry.wantsAdaptiveSubdivision = NO;\r\ntheNode.geometry.subdivisionLevel = 3;\r\n\r\nExpected Results: smooth normals in scenario 3 just like in scenario 1 and 2.\r\n\r\nIn IOS 10.0 and earlier, the first scenario did not result in smooth normals either. So in IOS 11 it was fixed for the CPU scenario, but when using a tessellator it only works if adaptive subdivison is turned off, which does not seem like intended design.\r\n\r\n\r\nActual Results: face normals only\r\n\r\nIn short:\r\nI would like to point out this is not some obscure feature. Together with another feature that is bugged (35687088)\r\nSCNSceneSourceLoadingOptionPreserveOriginalTopology\r\nit provides essential functionality that has been promoted rather extensively across various SceneKit related WWDC sessions since 2014 but has not actually been usable (without getting either memory leaks or losing smooth vertex normals).\r\n\r\n1. Smoothing without a tessellator assigned (thus on CPU) results in proper smooth surfaces (refined vertex normals) but comes with unacceptable memory leaks.\r\n2. Smoothing with a tessellator assigned (thus on GPU) but adaptive subdivision mode off prevents memory leaks, but results in facetted models, not refining the normals properly.\r\n3. Smoothing with a tessellator assigned (thus on GPU) and adaptive subdivision on  prevents memory leaks and results in smooth surfaces (refined vertex normals), but forces adaptive subdivision which in most cases does not actually lead to the smoothed model as intended by the 3D artist."
    email: johan@xartec.com
    modified: "2018-02-06T17:46:09.78335Z"
    number: "36078254"
    number_intvalue: 36078254
    originated: 12/15/2017
    parent_number: '&{NULL_VALUE}'
    product: IOS
    product_version: "11.0"
    reproducible: YES
    resolved: NO
    status: OPEN
    title: subdivisionLevel performs no normal smoothing when using non-adaptive tesselator
