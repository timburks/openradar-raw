apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "46318934"
    labels:
        datastore_id: "4970461708419072"
data:
    classification: ""
    created: "2018-12-09T21:13:42.517778Z"
    description: "Summary: \r\nIf you call open(2) and read(2) on a file that is concurrently being unlinked with unlink(2), sometimes you see the file in a strange state.  That doesn't seem to conform to POSIX semantics, and doesn't happen on other operating systems.\r\n\r\nSteps to Reproduce:\r\nPlease see test program at https://github.com/macdice/unlinktest\r\n\r\nExpected Results:\r\nThe test program should produce no output, because the file should either be seen as not existing (ENOENT) or existing and containing 11 bytes.\r\n\r\nActual Results:\r\nOn macOS it sometimes reports that it succeeded in opening the file but found it to be empty.\r\n\r\nVersion/Build:\r\nmacOS 10.14.1 build 18B75 (also tested on macOS 10.14 build 18A391).  Compiler is \"Apple LLVM version 10.0.0 (clang-1000.11.45.5)\", target is \"x86_64-apple-darwin18.2.0\", uname -a is \"Darwin XXXXXX 18.2.0 Darwin Kernel Version 18.2.0: Fri Oct  5 19:41:49 PDT 2018; root:xnu-4903.221.2~2/RELEASE_X86_64 x86_64\".\r\n\r\nConfiguration:\r\nSeen on a mid 2014 MBP and also (in the more complex example that triggered our investigation) a build farm server in the PostgreSQL build/test farm (not sure which model/configuration, sorry).  Using apfs, not tested on any other filesystem."
    email: thomas.munro@enterprisedb.com
    modified: "2018-12-09T21:13:42.517989Z"
    number: "46318934"
    number_intvalue: 46318934
    originated: "2018-11-29"
    parent_number: '&{NULL_VALUE}'
    product: macOS
    product_version: "10.14"
    reproducible: Yes
    resolved: ""
    status: Unknown
    title: unlink(2) is not atomic (kernel/file system bug)
