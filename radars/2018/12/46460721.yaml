apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "46460721"
    labels:
        datastore_id: "4968101556781056"
data:
    classification: Serious Bug
    created: "2018-12-04T19:56:05.865163Z"
    description: "Summary:\r\n\r\nWe have a growing set of videos that we are unable to run through an AVAssetReader on iPhone Xs (+Max) running iOS 12.1 by doing a simple sample buffer copy. There seems to be something \"interesting\" about the encoding that makes it incompatible with these devices. The error is:\r\n\r\n\"Error Domain=AVFoundationErrorDomain Code=-11829 \"Cannot Open\" UserInfo={NSLocalizedFailureReason=This media may be damaged., NSLocalizedDescription=Cannot Open, NSUnderlyingError=0x2831006f0 {Error Domain=NSOSStatusErrorDomain Code=-12137 \"(null)\"}}\"\r\n\r\nThe test passes on an iPhone 6 / iOS 11.4 and iPhone 8 / iOS 12.1.\r\n\r\nIf I re-encode these videos with the following command, they are able to be processed on the iPhone Xs:\r\n\r\nffmpeg -i in.mp4 -c:v libx264 out.mp4\r\n\r\nSteps to Reproduce:\r\n\r\nRun the attached test.\r\n\r\nExpected Results:\r\n\r\nThe test passes.\r\n\r\nActual Results:\r\n\r\nThe test fails.\r\n\r\nVersion/Build:\r\n\r\niOS 12.1\r\n\r\nConfiguration:\r\n\r\n\r\n--------\r\n\r\n- (void)testiPhoneXs {\r\n    NSURL *const outputUrl = [[[NSURL fileURLWithPath:NSTemporaryDirectory()] URLByAppendingPathComponent:[[NSUUID UUID] UUIDString]] URLByAppendingPathExtension:@\"mp4\"];\r\n    NSURL *const url = [[NSBundle bundleForClass:[self class]] URLForResource:@\"iPhoneXsBug\" withExtension:@\"mp4\"];\r\n    AVAsset *const asset = [AVAsset assetWithURL:url];\r\n    AVAssetTrack *const videoTrack = [[asset tracksWithMediaType:AVMediaTypeVideo] firstObject];\r\n    NSError *error = nil;\r\n    AVAssetReader *const assetReader = [AVAssetReader assetReaderWithAsset:asset error:&error];\r\n    XCTAssertNil(error);\r\n    AVAssetWriter *const assetWriter = [AVAssetWriter assetWriterWithURL:outputUrl fileType:AVFileTypeMPEG4 error:&error];\r\n    XCTAssertNil(error);\r\n\r\n    AVAssetWriterInput *const input = [[AVAssetWriterInput alloc] initWithMediaType:AVMediaTypeVideo\r\n                                                                     outputSettings:@{\r\n                                                                                      AVVideoCodecKey: AVVideoCodecTypeH264,\r\n                                                                                      AVVideoWidthKey: @(videoTrack.naturalSize.width),\r\n                                                                                      AVVideoHeightKey: @(videoTrack.naturalSize.height),\r\n                                                                                      }];\r\n\r\n    AVAssetReaderOutput *const output = [[AVAssetReaderTrackOutput alloc] initWithTrack:videoTrack\r\n                                                                         outputSettings:@{\r\n                                                                                          (id)kCVPixelBufferPixelFormatTypeKey:\r\n                                                                                              @(kCVPixelFormatType_32BGRA),\r\n                                                                                          }];\r\n\r\n    [assetReader addOutput:output];\r\n    [assetWriter addInput:input];\r\n\r\n    XCTAssertNil(assetReader.error);\r\n    XCTAssertNil(assetWriter.error);\r\n\r\n    [assetReader startReading];\r\n    [assetWriter startWriting];\r\n\r\n    [assetWriter startSessionAtSourceTime:kCMTimeZero];\r\n\r\n    const dispatch_queue_t queue = dispatch_queue_create(\"transcode\", DISPATCH_QUEUE_SERIAL);\r\n    const dispatch_semaphore_t transcode = dispatch_semaphore_create(0);\r\n    [input requestMediaDataWhenReadyOnQueue:queue usingBlock:^{\r\n        while ([input isReadyForMoreMediaData]) {\r\n            const CMSampleBufferRef sampleBuffer = [output copyNextSampleBuffer];\r\n\r\n            XCTAssertNil(assetReader.error);\r\n            XCTAssertNil(assetWriter.error);\r\n\r\n            if (sampleBuffer) {\r\n                [input appendSampleBuffer:sampleBuffer];\r\n                CFRelease(sampleBuffer);\r\n            } else {\r\n                [input markAsFinished];\r\n                dispatch_semaphore_signal(transcode);\r\n            }\r\n        }\r\n    }];\r\n\r\n    dispatch_semaphore_wait(transcode, DISPATCH_TIME_FOREVER);\r\n\r\n    const dispatch_semaphore_t write = dispatch_semaphore_create(0);\r\n    [assetWriter finishWritingWithCompletionHandler:^{\r\n        dispatch_semaphore_signal(write);\r\n    }];\r\n\r\n    XCTAssertNil(assetWriter.error);\r\n\r\n    dispatch_semaphore_wait(write, DISPATCH_TIME_FOREVER);\r\n    AVAsset *const outputAsset = [AVAsset assetWithURL:outputUrl];\r\n    XCTAssertGreaterThan(CMTimeGetSeconds(outputAsset.duration), 0);\r\n    AVAssetTrack *const outputTrack = [[outputAsset tracksWithMediaType:AVMediaTypeVideo] firstObject];\r\n    XCTAssertTrue(CGSizeEqualToSize(outputTrack.naturalSize, videoTrack.naturalSize));\r\n}"
    email: cellsworth@gmail.com
    modified: "2020-01-09T22:56:40.19861Z"
    number: "46460721"
    number_intvalue: 46460721
    originated: "2018-12-04"
    parent_number: '&{NULL_VALUE}'
    product: AVFoundation
    product_version: iOS 12.1
    reproducible: Always
    resolved: "2019-08-12"
    status: Closed
    title: AVAssetReader claims media damaged on iPhone Xs
