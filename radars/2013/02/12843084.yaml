apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "12843084"
    labels:
        datastore_id: "2738402"
data:
    classification: Serious Bug
    created: "2013-02-19T17:19:43.949818Z"
    description: "Summary:\r\nWhen compiling code with clang's -fprofile-arcs -ftest-coverage flags, the code generated for the automatically generated helper function __llvm_gcov_indirect_counter_increment ignores the -mno-red-zone flag.\r\n\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create a source file redzone.c with the following content:\r\n\r\n// BEGIN redzone.c\r\nint hello(int a)\r\n{\r\n        switch (a % 2)\r\n        {\r\n        case 0:\r\n                ++a;\r\n        case 1:\r\n                a /= 2;\r\n        }\r\n        return a;\r\n}\r\n// END redzone.c\r\n\r\nThe exact content of the file is not of much relevance, we just need to get the compiler to generate a __llvm_gcov_indirect_counter_increment function.\r\n\r\n\r\n2. Compile it using this command:\r\n\r\n/Applications/Xcode46-DP3.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -O0  -mno-red-zone -fprofile-arcs -ftest-coverage redzone.c -c\r\n\r\n3. Inspect the disassembly of the function __llvm_gcov_indirect_counter_increment using the command:\r\n\r\notool -tV redzone.o -p ___llvm_gcov_indirect_counter_increment |less\r\n\r\n\r\nExpected Results:\r\nDue to the -mno-red-zone flag, no data should be stored below the %rsp stack pointer in the disassembly.\r\n\r\nActual Results:\r\nThe code uses 24 bytes of the red zone:\r\n\r\n___llvm_gcov_indirect_counter_increment:\r\n00000000000000f0        pushq   %rbp\r\n00000000000000f1        movq    %rsp,%rbp ; note rsp is the same as rbp\r\n00000000000000f4        movl    (%rdi),%eax\r\n00000000000000f6        cmpl    $0xffffffff,%eax\r\n00000000000000fb        movq    %rsi,0xf8(%rbp)  ; RED ZONE\r\n00000000000000ff        movl    %eax,0xf4(%rbp)  ; RED ZONE\r\n0000000000000102        je      0x00000137\r\n0000000000000108        movl    0xf4(%rbp),%eax  ; RED ZONE\r\n000000000000010b        movl    %eax,%ecx\r\n000000000000010d        movq    0xf8(%rbp),%rdx  ; RED ZONE\r\n0000000000000111        movq    (%rdx,%rcx,8),%rcx\r\n0000000000000115        cmpq    $_hello,%rcx\r\n000000000000011c        movq    %rcx,0xe8(%rbp)  ; RED ZONE\r\n0000000000000120        je      0x00000137\r\n0000000000000126        movq    0xe8(%rbp),%rax  ; RED ZONE\r\n000000000000012a        movq    (%rax),%rcx\r\n000000000000012d        addq    $0x00000001,%rcx\r\n0000000000000134        movq    %rcx,(%rax)\r\n0000000000000137        popq    %rbp\r\n0000000000000138        ret\r\n0000000000000139        nopl    _hello(%rax)\r\n\r\nWhen running in an environment with no red zone on the stack, such as the OSX kernel, this code ends up crashing due to corruption of the pointers stored beyond the top of the stack.\r\n\r\n\r\nRegression:\r\nThe versions of clang in the 4.5 Developer Tools and earlier do not exhibit this fault, although in the previous version the function was not generated as a local symbol.\r\n\r\nNotes:\r\nThe generated function __llvm_gcov_init also appears to be affected, although it's less likely to cause a crash in that case, as it's so rarely executed. Other functions may also be affected?\r\n\r\nClang version:\r\nApple LLVM version 4.2 (clang-425.0.24) (based on LLVM 3.2svn)\r\nTarget: x86_64-apple-darwin12.2.0\r\nThread model: posix\r\n\r\n\r\n19-Feb-2013 06:14 PM Phillip Jordan:\r\nThe machine code generated by the compiler in the release version of the 4.6 developer tools is identical and thus still invalid."
    email: phil@philjordan.eu
    modified: "2015-09-07T17:52:18.56674Z"
    number: "12843084"
    number_intvalue: 12843084
    originated: 09-Dec-2012 08:55 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: "4.6"
    reproducible: Always
    resolved: 19-Jun-2013
    status: Closed
    title: clang generates incorrect gcov code when using -mno-red-zone flag
