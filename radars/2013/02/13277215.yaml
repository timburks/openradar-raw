apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "13277215"
    labels:
        datastore_id: "2761401"
data:
    classification: Other Bug
    created: "2013-02-22T23:22:30.109056Z"
    description: "22-Feb-2013 05:14 PM James Coleman:\r\nSummary:\r\nI have a daemon I wrote which uses NSPipes and over the time of it running, eventually the pipes on my system is taken.\r\n\r\nI have created a project which rapidly creates NSPipes and uses them the same way my daemon does and have done lots of tests such as making it ARC based and verifying my code itself isn't leaking. Each attempt shows in Instruments that it is leaking. The only way I can think of getting around this is possibly writing my own version of NSTask/NSPipe which does not leak or having my daemon automatically re-launch itself to release the memory/pipes which were taken up. Right now, I am manually using killall to have launchd relaunch it when I feel as if I'm getting close to the limit.\r\n\r\nJust to provide some humor... You've got some leaky pipes there.\r\n\r\nSee the attached main file for my test.\r\n\r\n22-Feb-2013 05:14 PM James Coleman:\r\n'main.m' was successfully uploaded"
    email: GRMrGecko@gmail.com
    modified: "2013-02-22T23:22:30.109249Z"
    number: "13277215"
    number_intvalue: 13277215
    originated: 22-Feb-2013 05:14 PM
    parent_number: '&{NULL_VALUE}'
    product: Mac OS X
    product_version: 10.8.2/12C60
    reproducible: Always
    resolved: ""
    status: Open
    title: NSPipe leaks.
