apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "13234894"
    labels:
        datastore_id: "2732401"
data:
    classification: Enhancement
    created: "2013-02-18T15:05:23.740191Z"
    description: |-
        It takes a lot of boilerplate code to implement drag-reordering in an NSTableView that is backed by bindings/Core Data.

        There are a bunch of ways to implement ordering in Core Data, such as ordered relationships. The method I'm interested in is where an 'order' attribute is included in the entity. I'd like the NSArrayController to have a field in the inspector in Interface Builder, into which you can put the name of your ordering attribute. If you do that, it firstly configures the sort descriptors for the NSArrayController automatically, and secondly it enables the NSArrayController to handle reordering. When reordering happens, the values of the ordering attribute are renumbered to match the new order.

        The final piece in the puzzle is making sure NSTableView, if bound to an NSArrayController that has an ordering attribute name filled in, communicates with the NSArrayController to tell it to reorder the items when a drag happens.
    email: amorya@gmail.com
    modified: "2013-02-18T15:05:23.740339Z"
    number: "13234894"
    number_intvalue: 13234894
    originated: ""
    parent_number: '&{NULL_VALUE}'
    product: Mac OS X SDK
    product_version: "10.8"
    reproducible: Not Applicable
    resolved: ""
    status: ""
    title: Easy way to reorder Core Data objects that use an 'order' attribute, bindings and NSTableView compatible
