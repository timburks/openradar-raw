apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "14140444"
    labels:
        datastore_id: "5910148803461120"
data:
    classification: Enhancement
    created: "2013-11-27T12:57:41.383984Z"
    description: "Title: SKActionTimingModes are insufficient\r\n\r\nThe SKAction class from Sprite Kit allows you to specify a timing mode, using an enum with the following values: Linear, Ease In, Ease Out, Ease In + Out. \r\n\r\nUnfortunately, a lot of the common timing modes that are used in games are missing (bounce, elastic, etc). More importantly, there is no easy way to add your own timing modes.\r\n\r\nThis is an example of what I'd like to see. You define a block that takes a float and returns a float: \r\n\r\n  typedef float (^SKActionTimingFunction)(float t);\r\n\r\nThe value of t is always between 0 and 1 and describes how far along the animation is. The block returns a modified value of t that curves the timing. \r\n\r\nSome examples:\r\n\r\n  SKActionTimingFunction SKActionTimingFunctionLinear = ^(float t) {\r\n\treturn t;\r\n  };\r\n\r\n  SKActionTimingFunction SKActionTimingFunctionQuadraticEaseIn = ^(float t) {\r\n\treturn t * t;\r\n  };\r\n\r\n  SKActionTimingFunction SKActionTimingFunctionQuadraticEaseOut = ^(float t) {\r\n\treturn t * (2.0f - t);\r\n  };\r\n\r\n  SKActionTimingFunction SKActionTimingFunctionQuadraticEaseInOut = ^(float t) {\r\n\tif (t < 0.5f) {\r\n\t  return 2.0f * t * t;\r\n\t} else {\r\n\t  const float f = t - 1.0f;\r\n\t  return 1.0f - 2.0f * f * f;\r\n\t}\r\n  };\r\n\r\nBut beyond the standard ease in & out, it easily allows users of Sprite Kit to extend this with more interesting effects, such as:\r\n\r\n  SKActionTimingFunction SKActionTimingFunctionBackEaseInOut = ^(float t) {\r\n\tconst float s = 1.70158f;\r\n\tif (t < 0.5f) {\r\n\t  const float f = 2.0f * t;\r\n\t  return 0.5f * ((s + 1.0f) * f - s) * f * f;\r\n\t} else {\r\n\t  const float f = 2.0f * (1.0f - t);\r\n\t  return 1.0f - 0.5f * ((s + 1.0f) * f - s) * f * f;\r\n\t}\r\n  };\r\n\r\nThese kinds of timing curves are available in many other gaming toolkits. Not having this kind of flexibility makes Sprite Kit a lot less useful. Users of Sprite Kit need to be able to supply their own timing functions.\r\n\r\nNote: Core Animation allows you to specify a timing function using a bezier path and 4 control points. That would be useful but by itself it is not enough. Having a block that takes a t value between 0 and 1, and can do any custom transformation on that, is a must."
    email: mail@hollance.com
    modified: "2013-11-27T12:57:41.384215Z"
    number: "14140444"
    number_intvalue: 14140444
    originated: 13-Jun-2013
    parent_number: '&{NULL_VALUE}'
    product: iPhone SDK
    product_version: "7.0"
    reproducible: Yes
    resolved: No
    status: Open
    title: SKActionTimingModes are insufficient
