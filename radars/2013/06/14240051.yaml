apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "14240051"
    labels:
        datastore_id: "3129406"
data:
    classification: New Feature
    created: "2013-06-23T02:27:41.897687Z"
    description: "22-Jun-2013 07:25 PM Brent Royal-Gordon:\r\nSummary:\r\nAfter dragging out a scene/view controller, it should be extremely easy to create a subclass of whatever generic view controller is being used and automatically switch the object to that class.\r\n\r\nSteps to Reproduce:\r\n1. Create a storyboard-based iOS project (template doesn't really matter) and open the storyboard.\r\n2. Drag out, say, a table view controller onto the canvas.\r\n3. Try to turn it into a MyTableViewController with some simple functionality.\r\n\r\nExpected Results:\r\nThere would be a button or menu item somewhere in the UI that would have something like the following workflow:\r\n1. With a generic view controller (UIViewController, UITableViewController, UICollectionViewController, etc.) selected, click the button.\r\n2. A sheet pops down asking for a class name and ideally nothing else. Enter the class name and click \"Next\".\r\n3. Xcode adds a class by that name, which is a subclass of the class of the generic view controller selected in the storyboard, and changes the generic view controller's \"Class\" field to name the new subclass. It then drops you into the new class's header file, ready to write some outlets and actions to wire up.\r\n\r\nActual Results:\r\nThe necessary steps are:\r\n1. Command-N for \"New File\".\r\n2. Choose \"Objective-C Class\" and click \"Next\".\r\n3. Type the name of the generic view controller class on your storyboard into the \"Subclass of\" field.\r\n4. Type a name into the \"Class\" field. Make sure the XIB checkbox is not checked. Choose \"Next\".\r\n5. Return to the storyboard.\r\n6. Switch to the Identity Inspector tab.\r\n7. Type your class name into the \"Class\" field.\r\n\r\nRegression:\r\nSomething like the current workflow has been in place since the iOS 2.0 SDK, which is probably why it's like this.\r\n\r\nNotes:\r\nAlmost all of the time, a generic UIViewController isn't going to be enough. Subclassing view controllers is *incredibly* common, and I really think Xcode should reflect this fact with a streamlined UI for that task. The current workflow puts you in the wrong place several times, invites you to forget crucial steps (particularly 6 and 7), requires you to remember and type class names not once, but *twice*, involves a control tucked away in an out-of-the-way inspector, gives you opportunities to do the wrong thing (like picking a different template or asking for a XIB), and in general is just much more difficult and error-prone than necessary.\r\n\r\nThis enhancement would be useful in the XIB editor as well, but putting one view controller in another view controller's XIB seems to be somewhat discouraged these days. In the storyboard editor, dragging out a view controller is basically the entire *point*."
    email: brent@architechies.com
    modified: "2013-06-23T02:27:41.897912Z"
    number: "14240051"
    number_intvalue: 14240051
    originated: 22-Jun-2013 07:25 PM
    parent_number: '&{NULL_VALUE}'
    product: iPhone SDK
    product_version: Xcode 5A11314m
    reproducible: Always
    resolved: ""
    status: Open
    title: Storyboard editor should include a dead simple "subclass" command
