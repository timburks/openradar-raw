apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "14250877"
    labels:
        datastore_id: "3143406"
data:
    classification: UI
    created: "2013-06-24T22:44:41.073041Z"
    description: "Summary:\r\nAfter presenting and dismissing a view controller over another view controller containing a scroll view, the contents of that scroll view are shifted upwards, breaking the constraints set on those contents.\r\n\r\nSteps to Reproduce:\r\n\r\n1) Set up the following in a project:\r\n- A view controller (viewController1)\r\n- A scroll view in viewController1 that has constraints:\r\n  scrollView.top = viewController1.top,\r\n  scrollView.bottom = viewController1.bottom\r\n  scrollView.left = viewController1.left\r\n  scrollView.right = viewController1.right\r\n- Put a column using a UIView in the scroll view with some contents (or a background color) that has constraints:\r\n  @\"V:|-(>=0)-[_columnView]|\"\r\n  column.width = 200\r\n  column.centerX = scrollView.centerX\r\n  columnView.Height = 3000\r\n- Add a tap target (can be the column view) to a view that calls presentViewController:animated:YES completion: (to show a full screen, non-modal, viewController2) and after a few seconds delay, calls dismissViewControllerAnimated:YES completion:\r\n\r\n2) Run the project and do the following:\r\n- Scroll down any amount.\r\n- Tap the tap target to present viewController2\r\n- Once viewController2 has been dismissed, notice that the columnView is higher up in the column view than it should be.  Its origin is above the top of the scroll view, breaking constraint: @\"V:|-(>=0)-[_columnView]|\".\r\n- Note that the amount it moves up is dependent upon the amount you scrolled down initially.  If you didn't scroll down at all, the column view isn't moved at all.\r\n\r\nExpected Results:\r\nThe column view (subview of the scroll view) stays in the same place because the constraints have not changed.\r\n\r\nActual Results:\r\nThe columnView moves up a seemingly arbitrary amount within the scroll view depending on how far down you scrolled, breaking the constraints without an exception being thrown.\r\n\r\nRegression:\r\nThis has been a bug for as long as auto layout has been available.\r\n\r\n\r\n----------- SAMPLE CODE ---------- (put this in a UIViewController subclass)\r\n\r\n#import \"ViewController.h\"\r\n\r\n@interface ViewController () <UIScrollViewDelegate>\r\n\r\n@property(nonatomic) UIScrollView *scrollView;\r\n@property(nonatomic) UIButton *columnView;\r\n@property(nonatomic) UIViewController *pvc;\r\n\r\n@end\r\n\r\n/*\r\n Demonstrates an autolayout bug.\r\n To replicate:\r\n - Start app\r\n - Scroll down any amount other than 0\r\n - Press the red column (also a button)\r\n - When the yellow view has been (automatically) dismissed, notice that the red view has moved up\r\n    in the scroll view, breaking the vertical constraint: @\"V:|-(>=0)-[_columnView]|\"\r\n - To further verify the constraint is broken, put a breakpoint in the scrollViewDidScroll method\r\n    and check the frame of self.columnView.  Notice that the origin's Y coordinate is negative.\r\n - Note: The further you have scrolled down before pressing the red button, the further up the red\r\n    view will move after the yellow view is dismissed.\r\n */\r\n@implementation ViewController\r\n\r\n- (id)initialize {\r\n  return [super init];\r\n}\r\n\r\n- (void)loadView {\r\n  self.view = [[UIView alloc] initWithFrame:[UIScreen mainScreen].bounds];\r\n  self.view.backgroundColor = [UIColor blueColor];\r\n  self.view.autoresizingMask = UIViewAutoresizingFlexibleWidth |\r\n                               UIViewAutoresizingFlexibleHeight;\r\n  self.scrollView = [[UIScrollView alloc] init];\r\n  self.scrollView.backgroundColor = [UIColor greenColor];\r\n  self.scrollView.bounces = YES;\r\n  self.scrollView.alwaysBounceVertical = YES;\r\n  self.scrollView.delegate = self;\r\n  [self.view addSubview:self.scrollView];\r\n  self.scrollView.translatesAutoresizingMaskIntoConstraints = NO;\r\n  [self.view addConstraints:@[\r\n   [NSLayoutConstraint constraintWithItem:self.scrollView\r\n                                attribute:NSLayoutAttributeTop\r\n                                relatedBy:NSLayoutRelationEqual\r\n                                   toItem:self.view\r\n                                attribute:NSLayoutAttributeTop\r\n                               multiplier:1\r\n                                 constant:0],\r\n   [NSLayoutConstraint constraintWithItem:self.scrollView\r\n                                attribute:NSLayoutAttributeBottom\r\n                                relatedBy:NSLayoutRelationEqual\r\n                                   toItem:self.view\r\n                                attribute:NSLayoutAttributeBottom\r\n                               multiplier:1\r\n                                 constant:0],\r\n   [NSLayoutConstraint constraintWithItem:self.scrollView\r\n                                attribute:NSLayoutAttributeLeft\r\n                                relatedBy:NSLayoutRelationEqual\r\n                                   toItem:self.view\r\n                                attribute:NSLayoutAttributeLeft\r\n                               multiplier:1\r\n                                 constant:0],\r\n   [NSLayoutConstraint constraintWithItem:self.scrollView\r\n                                attribute:NSLayoutAttributeRight\r\n                                relatedBy:NSLayoutRelationEqual\r\n                                   toItem:self.view\r\n                                attribute:NSLayoutAttributeRight\r\n                               multiplier:1\r\n                                 constant:0],\r\n   ]];\r\n  CGFloat columnWidth = 200;\r\n  self.columnView = [[UIButton alloc] init];\r\n  [self.scrollView addSubview:self.columnView];\r\n  self.columnView.translatesAutoresizingMaskIntoConstraints = NO;\r\n  self.columnView.backgroundColor = [UIColor redColor];\r\n  NSDictionary *viewsDictionary = NSDictionaryOfVariableBindings(_columnView);\r\n  [self.scrollView addConstraints:[NSLayoutConstraint\r\n                                   constraintsWithVisualFormat:@\"V:|-(>=0)-[_columnView]|\"\r\n                                   options:0\r\n                                   metrics:nil\r\n                                   views:viewsDictionary]];  \r\n  [self.scrollView addConstraints:@[\r\n   [NSLayoutConstraint constraintWithItem:self.columnView\r\n                                attribute:NSLayoutAttributeWidth\r\n                                relatedBy:NSLayoutRelationEqual\r\n                                   toItem:nil\r\n                                attribute:NSLayoutAttributeNotAnAttribute\r\n                               multiplier:1\r\n                                 constant:columnWidth],\r\n   [NSLayoutConstraint constraintWithItem:self.columnView\r\n                                attribute:NSLayoutAttributeCenterX\r\n                                relatedBy:NSLayoutRelationEqual\r\n                                   toItem:self.scrollView\r\n                                attribute:NSLayoutAttributeCenterX\r\n                               multiplier:1\r\n                                 constant:0],\r\n   [NSLayoutConstraint constraintWithItem:self.columnView\r\n                                attribute:NSLayoutAttributeHeight\r\n                                relatedBy:NSLayoutRelationEqual\r\n                                   toItem:nil\r\n                                attribute:NSLayoutAttributeNotAnAttribute\r\n                               multiplier:1\r\n                                 constant:3000]\r\n   ]];\r\n  [self.columnView addTarget:self\r\n                  action:@selector(presentOtherViewController)\r\n        forControlEvents:UIControlEventTouchUpInside];\r\n  //self.scrollView.contentInset = UIEdgeInsetsMake(5, 0, 100, 0);\r\n}\r\n\r\n- (void)scrollViewDidScroll:(UIScrollView *)scrollView {\r\n  // Put a breakpoint here to see the frame of the column view after pressing the button.\r\n}\r\n\r\n- (void)presentOtherViewController {\r\n  self.pvc = [[UIViewController alloc] init];\r\n  self.pvc.view = [[UIView alloc] initWithFrame:self.view.bounds];\r\n  self.pvc.view.backgroundColor = [UIColor yellowColor];\r\n  [self presentViewController:self.pvc animated:YES completion:nil];\r\n  [self performSelector:@selector(dismissOtherViewController) withObject:nil afterDelay:3];\r\n}\r\n\r\n- (void)dismissOtherViewController {\r\n  [self.pvc dismissViewControllerAnimated:YES completion:nil];\r\n}\r\n\r\n@end"
    email: xitsej@gmail.com
    modified: "2013-06-24T22:46:33.841408Z"
    number: "14250877"
    number_intvalue: 14250877
    originated: 6/24/13
    parent_number: '&{NULL_VALUE}'
    product: iOS SDK
    product_version: "6.1"
    reproducible: ""
    resolved: No
    status: Open
    title: 'Autolayout Breaks Unambiguous Constraints After dismissViewControllerAnimated:'
