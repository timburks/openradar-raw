apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "14557382"
    labels:
        datastore_id: "3220401"
data:
    classification: Enhancement
    created: "2013-07-26T07:34:05.892933Z"
    description: "Summary:\r\n\r\nThe classic C statement is useless for use in Objective-C if you want to use NSString literals as constants for the cases. This enhancement request is for adding an object-oriented version of the switch to Objective-C.\r\n\r\nFor example this could look like this:\r\n\r\n\r\n   define MyBarConstantValue @\"bar\"\r\n\r\n    NSString *string = @\"foo\";\r\n   @switch (string) {\r\n      @\"foo\": \r\n         // statements\r\n        break;\r\n\r\n      MyBarConstantValue:    \r\n         // statements\r\n         break;\r\n\r\n      default:\r\n         break;\r\n   }\r\n\r\n\r\nWhile a classic switch would do an == comparison between the expression and the labels this enhanced version would instead use isEqual: for the comparison. Otherwise the syntax would be identical.\r\n\r\nUsing this enhancement you could use any NSObject subclass which implements isEqual:. This would eliminate the need for creating enums for situations where an option is indeed an NSString. The above example currently has to be written:\r\n\r\n   if ([string isEqual:@\"foo\"]) {\r\n      // statements\r\n   } else if ([string isEqual:MyBarConstantValue]) {\r\n      // statements\r\n   } else {\r\n      // statements\r\n   }\r\n\r\nThis is harder to parse than using the proposed @switch statement. Also this doesn't allow for a \"fall-through\" for a few options by omitting the break statement. So this would also have to be smart to resolve this scenario."
    email: oliver.drobnik@gmail.com
    modified: "2013-07-26T07:34:05.893137Z"
    number: "14557382"
    number_intvalue: 14557382
    originated: Jul 26 2013
    parent_number: '&{NULL_VALUE}'
    product: LLVM
    product_version: ""
    reproducible: N/A
    resolved: ""
    status: Open
    title: 'LLVM Enhancement: @switch'
