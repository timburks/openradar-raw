apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "13902582"
    labels:
        datastore_id: "3000405"
data:
    classification: UI/Usability
    created: "2013-05-15T19:18:03.59674Z"
    description: "This is a duplicate of rdar://13886790\r\n\r\nSummary:\r\nVarious UIKit (and AppKit, for that matter) methods only do the correct thing when called on the main thread. The API would ideally proxy all calls onto the main thread, but given the compatibility problems that would introduce it should at least signal to the programmer that the call was made on the wrong thread.\r\n\r\nSteps to Reproduce:\r\n\r\nUILabel *label = [UILabel new];\r\nlabel.text = @\"Hello, world\";\r\n[anotherView addSubview: label];\r\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{[label removeFromSuperview];}];\r\n\r\nExpected Results:\r\nThe -removeFromSuperview call is done incorrectly. Either UIKit should arrange for the real work to be done on the main thread, or it should signal that the programmer (me) has made an error by calling UIKit off the main thread.\r\n\r\nActual Results:\r\nUIKit just executes the code away from the main thread. The result is unpredictable: I have seen cases where the view is correctly removed from the view hierarchy but is still drawn.\r\n\r\nRegression:\r\nN/A\r\n\r\nNotes:\r\nIt's possible to redirect all messages to an object onto a given queue, as described here: http://blog.securemacprogramming.com/2012/03/confine-all-the-things/. However, in general UIKit can't know that the client programmer hasn't occupied the main thread with some other work, or arranged some application-level locks such that dispatching back to the main thread could deadlock. I therefore think a reasonable approach to take would be one of the other patterns evinced in first-party frameworks for reporting programmer error:\r\n\r\nExample 1.\r\n- (void)removeFromSuperview {\r\n    NSAssert([NSThread isMainThread], @\"UIKit calls should only be made on the main thread.\");\r\n    [self _removeFromSuperview];\r\n}\r\n\r\nExample 2.\r\n- (void)removeFromSuperview {\r\n    if (![NSThread isMainThread]) {\r\n      UIKitLogWrongThreadError();\r\n    }\r\n    [self _removeFromSuperview];\r\n}\r\n\r\nvoid UIKitLogWrongThreadError() {\r\n    NSLog(@\"You called a UIKit method from the wrong thread. Set a breakpoint in UIKitLogWrongThreadError to debug.\");\r\n}\r\n\r\nThe current behaviour is hard to diagnose, because the symptoms don't immediately make the problem clear. It's easy to accidentally call UIKit from non-main contexts, but hard to realise that you did it."
    email: futuretap@googlemail.com
    modified: "2018-02-22T14:06:32.08839Z"
    number: "13902582"
    number_intvalue: 13902582
    originated: 15-May-2013 09:17 PM
    parent_number: '&{NULL_VALUE}'
    product: iOS SDK
    product_version: Any
    reproducible: Always
    resolved: ""
    status: Duplicate/7352325/Closed
    title: Dispatch UIKit actions to the main thread, or assert that I'm not on it.
