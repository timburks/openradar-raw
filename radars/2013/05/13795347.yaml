apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "13795347"
    labels:
        datastore_id: "3006401"
data:
    classification: Crash/Hang/Data Loss
    created: "2013-05-02T20:13:50.727312Z"
    description: "02-May-2013 01:10 PM Benjamin Nham:\r\nSummary:\r\nIf you execute alert() in -[UIWebView stringByEvaluatingJavaScriptFromString:], it sometimes hangs. Specifically, if you execute in the context of a dispatch_async or dispatch_after callout, the alert view does not respond to touch. This problem has been extensively reported on StackOverflow:\r\n\r\nhttp://stackoverflow.com/questions/11593900/uiwebview-stringbyevaluatingjavascriptfromstring-hangs-on-ios5-0-5-1-when-called\r\n\r\nSteps to Reproduce:\r\nExecute the sample project with USE_DISPATCH in ViewController.m set to 1. Notice the alert hangs and doesn't respond to the ok button. Then set USE_DISPATCH to 0. The alert now responds to the ok button.\r\n\r\nExpected Results:\r\nThe alert should respond to the ok button.\r\n\r\nActual Results:\r\nThe alert does not respond to the ok button.\r\n\r\nRegression:\r\nDoesn't work as of at least iOS 6.\r\n\r\nNotes:\r\nI verified that the recursive modal runloop used by UIAlertView *is* receiving touches (by breaking on _UIApplicationHandleEvent). However, the touch is never delivered to the UIAlertButton inside the UIAlertView in the dispatch case. A possible clue is that in the dispatch case, the alert view seems to be stuck in an intermediate state. Notice that the UIAlertView has a scale transform of 1.1 in the USE_DISPATCH=1 case:\r\n\r\n<_UIAlertNormalizingOverlayWindow: 0xe05cb00; frame = (0 0; 320 480); opaque = NO; layer = <UIWindowLayer: 0xe05cc20>>\r\n   | <UIImageView: 0x71809e0; frame = (0 0; 320 480); opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x7180800>>\r\n   | <UIAlertView: 0xe053840; frame = (3.8 188.35; 312.4 124.3); transform = [1.1, 0, 0, 1.1, 0, 0]; opaque = NO; layer = <CALayer: 0xe053ae0>>\r\n   |    | <UIImageView: 0x71757f0; frame = (0 0; 284 113); opaque = NO; autoresize = W+H; userInteractionEnabled = NO; layer = <CALayer: 0x7165710>>\r\n   |    | <UIAlertButton: 0xe058fb0; frame = (11 54; 262 43); opaque = NO; tag = 1; layer = <CALayer: 0xe059110>>\r\n   |    |    | <UIImageView: 0x7175ff0; frame = (0 0; 262 43); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x7176050>>\r\n   |    |    | <UIButtonLabel: 0xe059a50; frame = (117 10; 27 22); text = 'OK'; clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0xe059b40>>\r\n   |    | <UILabel: 0xe05c0a0; frame = (12 15; 260 21); text = 'hello'; clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0xe05c1b0>>\r\n\r\nbut in the USE_DISPATCH=0 case, the UIAlertView has the identity transform on it, as expected:\r\n\r\n<_UIAlertNormalizingOverlayWindow: 0x8a80d60; frame = (0 0; 320 480); opaque = NO; layer = <UIWindowLayer: 0x8a80e80>>\r\n   | <UIImageView: 0x8a83810; frame = (0 0; 320 480); opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x8a839e0>>\r\n   | <UIAlertView: 0x8a77df0; frame = (18 194; 284 113); opaque = NO; layer = <CALayer: 0x8a78090>>\r\n   |    | <UIImageView: 0x7187850; frame = (0 0; 284 113); opaque = NO; autoresize = W+H; userInteractionEnabled = NO; layer = <CALayer: 0x71878b0>>\r\n   |    | <UIAlertButton: 0x8a7d560; frame = (11 54; 262 43); opaque = NO; tag = 1; layer = <CALayer: 0x8a7d6c0>>\r\n   |    |    | <UIImageView: 0x7187fa0; frame = (0 0; 262 43); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x7188000>>\r\n   |    |    | <UIButtonLabel: 0x8a7e000; frame = (117 10; 27 22); text = 'OK'; clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x8a7e0f0>>\r\n   |    | <UILabel: 0x8a80300; frame = (12 15; 260 21); text = 'hello'; clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x8a80410>>\r\n\r\nFrom my days working on UIAlertView back when I was at Apple, this perhaps indicates that the alert view is stuck in an intermediate state, possibly waiting for an animation finished callback to fire. Not sure if that would cause touches to not be processed in the alert button."
    email: ben@nhaminated.com
    modified: "2013-05-02T20:13:50.728255Z"
    number: "13795347"
    number_intvalue: 13795347
    originated: 5/2/2013
    parent_number: '&{NULL_VALUE}'
    product: iOS SDK
    product_version: "6.1"
    reproducible: Always
    resolved: ""
    status: Open
    title: Showing a JavaScript alert hangs UIWebView
