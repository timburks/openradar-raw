apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "15002251"
    labels:
        datastore_id: "5746743551459328"
data:
    classification: Serious Bug
    created: "2013-09-16T20:31:43.182282Z"
    description: "Summary:\r\nld64 LC_LOAD_DYLIB order is not deterministic when dylibs are added by LC_REEXPORT_DYLIB\r\n\r\nWhen ld64 makes its output depend on dylibs found by LC_REEXPORT_DYLIB, the resulting output’s LC_LOAD_DYLIB load commands will not appear in a deterministic order. This impacts application initialization order and symbol resolution with dlsym(RTLD_DEFAULT) by making both of these operations nondeterministic as well.\r\n\r\nIn the example below, the program is linked against Foundation and CoreServices. Foundation contains LC_REEXPORT_DYLIB load commands for libobjc and CoreFoundation. CoreServices also contains an LC_REEXPORT_DYLIB for libobjc, among other things that are not relevant here.\r\n\r\nIn the linked output, the order of LC_LOAD_DYLIB load commands for libobjc and CoreFoundation is nondeterministic. libobjc usually appears first, but not always.\r\n\r\nmark@cougar bash$ cat test.m\r\n#import <Foundation/Foundation.h>\r\n\r\nint main() {\r\n  NSArray* a = @[@\"1\"];\r\n  return [a count];\r\n}\r\nmark@cougar bash$ sw_vers\r\nProductName:\tMac OS X\r\nProductVersion:\t10.8.5\r\nBuildVersion:\t12F37\r\nmark@cougar bash$ xcodebuild -version\r\nXcode 4.6.3\r\nBuild version 4H1503\r\nmark@cougar bash$ clang --version\r\nApple LLVM version 4.2 (clang-425.0.28) (based on LLVM 3.2svn)\r\nTarget: x86_64-apple-darwin12.5.0\r\nThread model: posix\r\nmark@cougar bash$ ld -v\r\n@(#)PROGRAM:ld  PROJECT:ld64-136\r\nconfigured to support archs: armv6 armv7 armv7s i386 x86_64\r\nLTO support using: LLVM version 3.2svn, from Apple Clang 4.2 (build 425.0.28)\r\nmark@cougar bash$ clang test.m -o test -framework Foundation -framework CoreServices\r\nmark@cougar bash$ otool -L test | tail -2\r\n\t/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)\r\n\t/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 744.19.0)\r\nmark@cougar bash$ clang test.m -o test -framework Foundation -framework CoreServices\r\nmark@cougar bash$ otool -L test | tail -2\r\n\t/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 744.19.0)\r\n\t/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)\r\nmark@cougar bash$ clang test.m -o test -framework Foundation -framework CoreServices\r\nmark@cougar bash$ otool -L test | tail -2\r\n\t/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)\r\n\t/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 744.19.0)\r\nmark@cougar bash$ \r\n\r\nNote that libobjc appears before CoreFoundation after the first and third builds, but the order is inverted after the second build.\r\n\r\nSteps to Reproduce:\r\n1. \r\n\r\ncat > test.m << __EOF__\r\n#import <Foundation/Foundation.h>\r\n\r\nint main() {\r\n  NSArray* a = @[@\"1\"];\r\n  return [a count];\r\n}\r\n__EOF__\r\n\r\n2. Repeat running these two commands multiple times\r\n\r\nclang test.m -o test -framework Foundation -framework CoreServices\r\notool -L test\r\n\r\nExpected Results:\r\nThe output of the otool -L command should be consistent and not change even though test.m has been recompiled and relinked. The order of all LC_LOAD_DYLIB commands in the linker output should be deterministic.\r\n\r\nActual Results:\r\nThe output of otool -L shows that the LC_LOAD_DYLIB commands are not being added to test in a deterministic order. In this example, the order of CoreFoundation and libobjc is not deterministic.\r\n\r\nNotes:\r\nWorkaround: specify all linker dependencies to ld64 directly, instead of relying on it determining them by reading LC_REEXPORT_DYLIB load commands. This is impractical.\r\n\r\nThis bug appears to have originated when threaded input file reading was added to ld64. Threads showed up in ld64 src/ld/InputFiles.cpp in ld64-133.3 (Xcode 4.4). They aren’t there in ld64-128.2 (Xcode 4.3)."
    email: mark@chromium.org
    modified: "2015-11-19T23:22:56.04552Z"
    number: "15002251"
    number_intvalue: 15002251
    originated: "2013-09-16"
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ld64-136 from Xcode 4.6.3 4H1503
    reproducible: Always
    resolved: "2014-07-22"
    status: Closed
    title: ld64 LC_LOAD_DYLIB order is not deterministic when dylibs are added by LC_REEXPORT_DYLIB
