apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "15000843"
    labels:
        datastore_id: "5693417237512192"
data:
    classification: Enhancement
    created: "2013-09-16T18:33:16.076884Z"
    description: "Summary:\r\nhttps://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccessibilityIdentification_Protocol/Introduction/Introduction.html\r\n\r\nThe UIAccessibilityIdentification Protocol reference indicates that we should use accessibilityIdentifier instead of accessibilityLabel for the purposes of UIAutomation.  This makes perfect sense, given that an accessibilityLabel should be localized and an accessibilityIdentifier can be constant.\r\n\r\n\"An identifier can be used to uniquely identify an element in the scripts you write using the UI Automation interfaces. Using an identifier allows you to avoid inappropriately setting or accessing an elementâ€™s accessibility label.\"\r\n\r\nHowever, neither UITabBarItem nor UIBarButtonItem conforms to the UIAccessibilityIdentification protocol.  \r\n\r\nIf I subclass UITabBarItem in order to implement UIAccessibilityIdentification, and subsequently set an accessibilityIdentifier, it certainly doesn't get applied to the instance of the underlying internal class UITabBarButton.  It seems that the only possible solution (aside from rolling our own tab bar from scratch) is to implement a subclass of UITabBar and override the accessibilityElementAtIndex: method -- injecting the appropriate accessibilityIdentifiers at runtime.  To me, this seems like a silly, fragile, and hackish way to solve a simple problem.\r\n\r\nI've attached an example implementation of the hack, to illustrate the problem.  It's not a real workaround because it can't be shipped with production code (accessing properties of the private UITabBarButton class) and it doesn't actually set the properties until the user taps the tab item the first time.  Until then it uses the accessibilityLabel.\r\n\r\nTherefore, please add accessibilityIdentifier support to UITabBarItems.\r\n\r\nSteps to Reproduce:\r\n\r\n\r\nExpected Results:\r\nUITabBarItem (or one of it's super classes) should implement UIAccessibilityIdentification Protocol.  Setting the accessibilityIdentifier on a UITabBarItem instance should actually apply to the underlying (private) UITabBarButton so that UIAutomation recognizes the identifier.\r\n\r\nActual Results:\r\nUITabBarItem (nor any of it's super classes) actually implement UIAccessibilityIdentification Protocol, and the only way to make it work (sort of) is a silly hack that can't go into production code.\r\n\r\nVersion:\r\niOS 7 GM SDK (also tried iOS 6.1 SDK)\r\n\r\nConfiguration:\r\n\r\n\r\nAttachments:\r\n'AccessibilityIDForTabBarItems.m'\r\n\r\n\r\n@interface TapTabBarItem : UITabBarItem<UIAccessibilityIdentification>\r\n@end\r\n\r\n@implementation TapTabBarItem\r\n@synthesize accessibilityIdentifier = _accessibilityIdentifier;\r\n@end\r\n\r\n\r\n@interface TapTabBar : UITabBar\r\n@end\r\n\r\n@implementation TapTabBar\r\n\r\n#warning Obviously this is a crazy hack and cannot go into production builds due to private UITabBarButton\r\n\r\n- (id)accessibilityElementAtIndex:(NSInteger)index {\r\n    id element = [super accessibilityElementAtIndex:index];\r\n    if (element && ![element accessibilityIdentifier]) {\r\n        @try {\r\n            // Unsuitable for production; UITabBarButton is Apple Private\r\n            NSString *title = [element valueForKeyPath:@\"label.text\"];\r\n            NSString *accessibilityIdentifier = [self accessibilityIdentifierForItemTitle:title];\r\n            [element setAccessibilityIdentifier:accessibilityIdentifier];\r\n        }\r\n        @catch (NSException *exception) {\r\n        }\r\n    }\r\n    return element;\r\n}\r\n\r\n- (NSInteger)indexOfAccessibilityElement:(id)element {\r\n    NSInteger index = [super indexOfAccessibilityElement:element];\r\n    if (element && ![element accessibilityIdentifier]) {\r\n        @try {\r\n            // Unsuitable for production; UITabBarButton is Apple Private\r\n            NSString *title = [element valueForKeyPath:@\"label.text\"];\r\n            NSString *accessibilityIdentifier = [self accessibilityIdentifierForItemTitle:title];\r\n            [element setAccessibilityIdentifier:accessibilityIdentifier];\r\n        }\r\n        @catch (NSException *exception) {\r\n        }\r\n    }\r\n    return index;\r\n}\r\n\r\n- (NSString *)accessibilityIdentifierForItemTitle:(NSString *)title {\r\n    if (!title || ![title isKindOfClass:[NSString class]] || ![title length]) {\r\n        return nil;\r\n    }\r\n    for (TapTabBarItem *item in self.items) {\r\n        if (item.tag == -1 || !item.title || ![item.title isEqualToString:title]) {\r\n            continue;\r\n        }\r\n        return item.accessibilityIdentifier;\r\n    }\r\n    return nil;\r\n}\r\n\r\n@end"
    email: gcombs@gmail.com
    modified: "2013-09-16T18:33:16.077091Z"
    number: "15000843"
    number_intvalue: 15000843
    originated: 16-Sep-2013 01:17 PM
    parent_number: '&{NULL_VALUE}'
    product: iOS SDK
    product_version: "6.1"
    reproducible: Always
    resolved: ""
    status: Open
    title: Add accessibilityIdentifier to UITabBarItem
