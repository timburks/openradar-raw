apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "14730679"
    labels:
        datastore_id: "5174817116389376"
data:
    classification: Serious Bug
    created: "2013-08-14T02:12:54.462086Z"
    description: "Summary: NSInvocation does not work with methods that return structures that contain unions or bitfield types. Instead exceptions are thrown (and an NSException is overreleased). \r\n\r\nSteps to Reproduce:\r\nCreate a new Mac OS X target. In main.m, paste: \r\n\r\nstatic void test_failure(const char *file, int line)\r\n{\r\n    NSLog(\"Test failure at %s:%d\\n\", file, line);\r\n}\r\n\r\nBOOL _testassert(BOOL b, const char *file, int line)\r\n{\r\n    if (!(b))\r\n    {\r\n        test_failure(file, line);\r\n        return NO;\r\n    }\r\n\r\n    return YES;\r\n}\r\n#define testassert(b) do { if (!_testassert(b, __FILE__, __LINE__)) return NO; } while (NO)\r\n\r\n\r\n@interface TestHelper : NSObject\r\n@end\r\n@implmentation TestHelper\r\nunion floatInt {\r\n    int a;\r\n    float b;\r\n};\r\nstruct hugeStruct {\r\n    double a;\r\n    char b;\r\n    int c;\r\n    short d;\r\n    long long e;\r\n    char *f;\r\n    SEL g;\r\n    id h;\r\n    NSRange i;\r\n    NSObject *j;\r\n    int *k;\r\n    void (^l)(void);\r\n    int *(*m)(int *);\r\n    struct charDoubleStruct n;\r\n    union floatInt o;\r\n    IMP q;\r\n    Class r;\r\n    int s[5];\r\n    char t:1;\r\n    char u:3;\r\n    char v:4;\r\n    volatile int x;\r\n    float y;\r\n    \r\n    \r\n};\r\n\r\nint *foo(int *bar) { return bar; };\r\nint *baz(int *qux) { return NULL;};\r\n\r\n- (struct hugeStruct)hugeStructRetMethod\r\n{\r\n    int *k = NULL;\r\n    struct hugeStruct ret = {\r\n        M_PI,\r\n        'b',\r\n        1234567,\r\n        -1234,\r\n        1234567891011,\r\n        (char *)NULL,\r\n        _cmd,\r\n        @protocol(NSCoding),\r\n        NSMakeRange(123, 321),\r\n        @\"Foo\",\r\n        k,\r\n        [^{} copy],\r\n        foo,\r\n        { 'a', M_E },\r\n        9001,\r\n        [self methodForSelector:_cmd],\r\n        [self class],\r\n        { 4321, 1234, 5678, 8765, 9101112},\r\n        1,\r\n        3,\r\n        6,\r\n        70,\r\n        4.42f\r\n    };\r\n    return ret;\r\n}\r\n\r\n- (BOOL)testHugeStruct\r\n{\r\n    NSInvocation *inv = [NSInvocation invocationWithMethodSignature:[self methodSignatureForSelector:@selector(hugeStructRetMethod)]];\r\n    [inv setSelector:@selector(hugeStructRetMethod)];\r\n    [inv setTarget:self];\r\n    int k = 51;\r\n    char f = 'x';\r\n    struct hugeStruct result = {\r\n        M_PI_2,\r\n        'f',\r\n        7654321,\r\n        4321,\r\n        1110987654321,\r\n        &f,\r\n        _cmd,\r\n        @protocol(NSCopying),\r\n        NSMakeRange(500, 50),\r\n        @\"Bar\",\r\n        &k,\r\n        nil,\r\n        baz,\r\n        { 'b', M_LN2 },\r\n        90.5f,\r\n        [self methodForSelector:_cmd],\r\n        [NSInvocation class],\r\n        { 42, 0, -1, INT_MIN, INT_MAX},\r\n        0,\r\n        0,\r\n        0,\r\n        77,\r\n        41147.7\r\n    };\r\n    [inv invoke];\r\n    [inv getReturnValue:&result];\r\n    testassert(result.a == M_PI);\r\n    testassert(result.b == 'b');\r\n    testassert(result.c == 1234567);\r\n    testassert(result.d == -1234);\r\n    testassert(result.e == 1234567891011);\r\n    testassert(result.f == NULL);\r\n    testassert(result.g == @selector(hugeStructRetMethod));\r\n    testassert(result.h == @protocol(NSCoding));\r\n    testassert(result.i.length == 321);\r\n    testassert(result.i.location == 123);\r\n    testassert([(id)result.j isEqualToString:@\"Foo\"]);\r\n    testassert(result.k == NULL);\r\n    testassert(result.l != nil);\r\n    testassert(result.m == foo);\r\n    testassert(result.n.a == 'a');\r\n    testassert(result.n.b == M_E);\r\n    testassert(result.o.a == 9001);\r\n    testassert(result.q == [self methodForSelector:@selector(hugeStructRetMethod)]);\r\n    testassert(result.r == [self class]);\r\n    testassert(result.s[0] == 4321);\r\n    testassert(result.s[1] == 1234);\r\n    testassert(result.s[2] == 5678);\r\n    testassert(result.s[3] == 8765);\r\n    testassert(result.s[4] == 9101112);\r\n    testassert(result.t == 1);\r\n    testassert(result.u == 3);\r\n    testassert(result.v == 6);\r\n    testassert(result.x == 70);\r\n    testassert(result.y == 4.42f);\r\n    \r\n    return YES;\r\n}\r\n@end\r\n\r\nand in main(), inside the @autoreleasepool scope:\r\n\r\nTestHelper *h = [[TestHelper alloc] init];\r\n[h testHugeStruct];\r\n\r\nExpected Results: All tests pass\r\n\r\nActual Results: \r\nSeveral exceptions are thrown (and caught internally) by NSInvocation in the first line of -testHugeStruct. The first test fails and the method returns. When the autorelease pool drains, the app crashes as an already-released NSException is released.\r\n\r\nRegression:\r\nUnknown.\r\n\r\nNotes:\r\nEven if bitfields are not supported, there REALLY shouldn't be an overreleased NSException here. Also occurs in iOS 6.1 SDK."
    email: chaos42@gmail.com
    modified: "2013-08-14T02:12:54.462311Z"
    number: "14730679"
    number_intvalue: 14730679
    originated: 13-Aug-2013 07:11 PM
    parent_number: '&{NULL_VALUE}'
    product: OS X SDK
    product_version: "10.8"
    reproducible: Always
    resolved: ""
    status: Open
    title: NSInvocation throw with unions or bitfields in structs return types, overrelease
