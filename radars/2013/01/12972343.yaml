apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "12972343"
    labels:
        datastore_id: "2529401"
data:
    classification: ""
    created: "2013-01-08T11:08:33.779483Z"
    description: "Summary:\r\nWhen using a block in a dispatch_async call inside a for loop the objects referenced inside the block are overreleased when the loop does more than one iteration and a RELEASE configuration is used in the build process.\r\n\r\nSteps to Reproduce:\r\nUse this sample code for a Mac app:\r\n- (void)applicationDidFinishLaunching:(NSNotification *)aNotification\r\n{\r\n    NSObject *theObject = [[NSObject alloc] init];\r\n    dispatch_queue_t myQueue = dispatch_queue_create(\"several.blocks.queue\", DISPATCH_QUEUE_SERIAL);\r\n    \r\n    dispatch_async(myQueue, ^(){\r\n        NSString *description = [theObject description];\r\n        NSLog(@\"Successfully referenced object %@ in initial block\", description);\r\n    });\r\n    \r\n    for (int i = 0; i < 2; i++)\r\n    {\r\n        dispatch_async(myQueue, ^(){\r\n            NSString *description = [theObject description];\r\n            NSLog(@\"Successfully referenced object %@ in loop block %d\", description, i);\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\nEnable ARC and set the Build configuration to \"Release\" in the scheme. \r\nEnable Zombies in the Diagnostics tab of the scheme.\r\nBuild and run.\r\n\r\nYou should see the following output:\r\n    2013-01-08 11:15:49.182 BlocksAndARC[19274:4313] Successfully referenced object <NSObject: 0x101a26ab0> in initial block\r\n    2013-01-08 11:15:49.183 BlocksAndARC[19274:4313] Successfully referenced object <NSObject: 0x101a26ab0> in loop block 0\r\n    2013-01-08 11:15:49.183 BlocksAndARC[19274:4313] *** -[NSObject description]: message sent to deallocated instance 0x101a26ab0\r\n\r\nwith the debugger stopping at the call to \"description\" in the block in the second iteration of the for-loop.\r\n\r\n\r\nThis only happens if\r\n- ARC is enabled\r\n- a \"Release\" build configuration is used\r\n- the for loop does more than one iteration \r\n- there is a similar dispatch_call before the for-loop \r\n\r\n\r\nExpected Results:\r\nThe automatically added retain and release calls are correctly balanced for objects referenced inside the block.\r\n\r\nActual Results:\r\nThe objects used inside the block are overreleased.\r\n\r\nRegression:\r\nI could only test it with Xcode 4.5.2.\r\n\r\n\r\nWorkaround:\r\nAdd a local variable inside the loop and copy the referenced object to it and use the new variable in the block like so:\r\n- (void)applicationDidFinishLaunching:(NSNotification *)aNotification\r\n{\r\n    NSObject *theObject = [[NSObject alloc] init];\r\n    dispatch_queue_t myQueue = dispatch_queue_create(\"several.blocks.queue\", DISPATCH_QUEUE_SERIAL);\r\n    \r\n    dispatch_async(myQueue, ^(){\r\n        NSString *description = [theObject description];\r\n        NSLog(@\"Successfully referenced object %@ in initial block\", description);\r\n    });\r\n    \r\n    for (int i = 0; i < 2; i++)\r\n    {\r\n        NSObject *theSameObject = theObject;\r\n        dispatch_async(myQueue, ^(){\r\n            NSString *description = [theSameObject description];\r\n            NSLog(@\"Successfully referenced object %@ in loop block %d\", description, i);\r\n        });\r\n    }\r\n}\r\n\r\n\r\nEven stranger: the new variable does not even have to be referenced inside the block, just assigning the referenced one to it is enough to prevent the crash:\r\n- (void)applicationDidFinishLaunching:(NSNotification *)aNotification\r\n{\r\n    NSObject *theObject = [[NSObject alloc] init];\r\n    dispatch_queue_t myQueue = dispatch_queue_create(\"several.blocks.queue\", DISPATCH_QUEUE_SERIAL);\r\n    \r\n    dispatch_async(myQueue, ^(){\r\n        NSString *description = [theObject description];\r\n        NSLog(@\"Successfully referenced object %@ in initial block\", description);\r\n    });\r\n    \r\n    for (int i = 0; i < 2; i++)\r\n    {\r\n        NSObject *theSameObject = theObject;\r\n        dispatch_async(myQueue, ^(){\r\n            NSString *description = [theObject description];\r\n            NSLog(@\"Successfully referenced object %@ in loop block %d\", description, i);\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nNotes:\r\nWhen using a concurrent queue with NSZombies enabled it crashes on a release call. But this is probably just due to slightly different timing."
    email: openradar@khd2.de
    modified: "2013-04-19T23:58:57.589129Z"
    number: "12972343"
    number_intvalue: 12972343
    originated: "2013-01-08"
    parent_number: "12969722"
    product: Developer Tools (ARC + blocks)
    product_version: Xcode 4.5.2
    reproducible: Always
    resolved: ""
    status: Duplicate/12969722
    title: ARC overreleases objects referenced in blocks created and dispatched in for-loop
