apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "13047823"
    labels:
        datastore_id: "2584401"
data:
    classification: Serious Bug
    created: "2013-01-19T07:45:44.393359Z"
    description: "Summary:\r\nUIBezierPath conforms to NSCopying, but its -copyWithZone: always returns an instance of UIBezierPath. This means that subclasses cannot easily implement copyWithZone: because [super copyWithZone:] returns an object of the wrong class.\r\n\r\nSteps to Reproduce:\r\n\r\n- Use the following subclass:\r\n\r\n\t@interface MyPath : UIBezierPath\r\n\t@end\r\n\t@implementation MyPath\r\n\t- (id)copyWithZone:(NSZone *)zone\r\n\t{\r\n\t\tMyPath *obj = [super copyWithZone:zone];\r\n\t\t// obj is of the wrong class; can't set custom properties!\r\n\t\treturn obj;\r\n\t}\r\n\t@end\r\n\r\n- Test with the following code:\r\n\r\n\tMyPath *path = [[MyPath alloc] init];\r\n\tNSLog(@\"Path: %@\", [path class]);\r\n\tNSLog(@\"Copy: %@\", [[path copy] class]);\r\n\r\nExpected Results:\r\n[path class] == [[path copy] class] == [MyPath class]\r\n\r\nActual Results:\r\n[path class] == [MyPath class], but [[path copy] class] == [UIBezierPath class]\r\n\r\nNotes:\r\nAccording to the NSCopying documentation:\r\n\"If a subclass inherits NSCopying from its superclass and declares additional instance variables, the subclass has to override copyWithZone: to properly handle its own instance variables, invoking the superclassâ€™s implementation first.\""
    email: jtbandes@gmail.com
    modified: "2014-10-27T20:00:12.210724Z"
    number: "13047823"
    number_intvalue: 13047823
    originated: 18-Jan-2013
    parent_number: '&{NULL_VALUE}'
    product: iPhone SDK
    product_version: "6.0"
    reproducible: Always
    resolved: iOS 7 beta 6
    status: Closed
    title: 'UIBezierPath -copyWithZone: breaks subclass NSCopying implementation'
