apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "13594403"
    labels:
        datastore_id: "2910402"
data:
    classification: Enhancement
    created: "2013-04-07T12:27:47.994454Z"
    description: |-
        A lot of the Cocoa APIs use NSStrings to indicate state. However, these strings are private constants that are not supposed to be looked at, their contents relied on, or saved to disk. This means that anyone who wants to keep a record of their state or wants to perform different actions based on state has to write chains of 'if' statements.

        The surface fix for this would be to add support for objects to the switch() statement in ObjC, so one can switch like:

        switch( exportSession.exportPreset )
        {
        	case AVExportPresetIPad:
        		// react.
        		break;
        }

        An even better fix would be to allow to dispatch on string identifiers in some better way that maps a preset to a selector. I *can* do this with strings whose contents are guaranteed, where I can use NSSelectorFromString() to build a selector based on its contents. Another alternative would be to fix the frameworks to use real objects (on which one can declare categories that will dispatch to the right place) instead of string constants. For this I propose an @enum construct:

        @enum
        {
        	AVExportPresetIPad,
        	AVExportPresetIPhone
        };

        where each constant would effectively map to something like:

        @interface AVExportPresetIPad : NSObject
        @end

        AVExportPresetIPad*	AVExportPresetIPad = [[AVExportPresetIPad alloc] init];

        (Where the alloc/init would effectively be a global object like a class, not an actual heap object) People can now use this like any other object and class, and declare categories on it to add their specialized dispatch. Even better, for backward compatibility, one could add support for types in enums like that, like:

        @enum : NSString
        {
        	AVExportPresetIPad = @"ExportPresetIPad",
        	AVExportPresetIPhone = @"ExportPresetIPhone"
        };

        which would isa-swizzle the string to pretend to be an NSString subclass named like the constant, which means old code gets the same string, but new code can declare categories on it etc. Furthermore, it would be easy to graduate from constants to a full-blown object
    email: kusterer@gmail.com
    modified: "2013-04-07T12:27:47.995017Z"
    number: "13594403"
    number_intvalue: 13594403
    originated: 07-Apr-2013 02:27 PM
    parent_number: '&{NULL_VALUE}'
    product: iPhone SDK
    product_version: 10.8.3
    reproducible: Not Applicable
    resolved: ""
    status: Open
    title: Prolific use of strings for state in Cocoa frameworks
