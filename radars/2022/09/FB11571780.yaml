apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: FB11571780
    labels:
        datastore_id: "5569721361498112"
data:
    classification: ""
    created: "2022-09-22T22:08:51.840849Z"
    description: "The XNU kernel stores the current system (wall-clock) timestamp in a process's `struct kinfo_proc` (under `kp_proc.p_starttime`) when a process is forked:\r\n\r\nhttps://github.com/apple/darwin-xnu/blob/a1babec6b135d1f35b2590a1990af3c5c5393479/bsd/kern/bsd_init.c#L1072\r\n\r\nbut it does not update it when the system wall-clock changes (e.g., time sync, traveling between time zones, etc.).\r\n\r\nThat means it's not currently possible to measure the amount of time that's elapsed since the process was forked, since the value stored in `struct kinfo_proc` isn't meaningful when the system time changes.\r\n\r\nIn addition, that means the accounting done in the kernel's `acct_process()` is incorrect, as it calculates the elapsed time since process start using the current system wall-clock time (which may have changed since the process was forked):\r\n\r\nhttps://github.com/apple/darwin-xnu/blob/a1babec6b135d1f35b2590a1990af3c5c5393479/bsd/kern/kern_acct.c#L269\r\n\r\nNote that XNU *does* update the system's boot time each time the clock changes, which makes it suitable for calculating elapsed times:\r\n\r\nhttps://github.com/apple/darwin-xnu/blob/8f02f2a044b9bb1ad951987ef5bab20ec9486310/osfmk/kern/clock.c#L834\r\n\r\nTo reproduce, compile and run as root the attached file `test.c`.\r\n\r\nExpected behavior: The process fork time should be adjusted for system wall-clock changes like the boot time, so it's possible to measure time elapsed since fork.\r\n\r\nActual behavior: The process fork time is not adjusted for system wall-clock changes, so it's not possible to measure time elapsed since fork if the system time changes.\r\n\r\nNote that OpenBSD fixed this bug in 2018 by storing the *time elapsed since boot* in the kernel's process structure at fork time rather than a timestamp:\r\n\r\nhttps://www.mail-archive.com/tech@openbsd.org/msg46452.html\r\n\r\nThen, each time userspace or the kernel needs to know the timestamp the process was forked, the kernel fetches the current boot time and adds the time elapsed since the process was forkked.\r\n\r\nExample output:\r\n\r\n% clang -o test test.c\r\n% sudo ./test\r\n===Before setting wall-clock time back 5 minutes===\r\nBoot time: 1663686253.546049\r\nFork time: 1663882547.782450\r\nWall-clock time: 1663882547.786069\r\nTime elapsed since boot: 196294240020 us\r\nTime elapsed since fork: 3619 us\r\n\r\n===After setting wall-clock time back 5 minutes===\r\nBoot time: 1663685953.546026\r\nFork time: 1663882547.782450\r\nWall-clock time: 1663882247.809429\r\nTime elapsed since boot: 196294263403 us\r\nTime elapsed since fork: -299973021 us\r\n\r\n===\r\n\r\n% cat test.c\r\n% cat test.c\r\n#include <mach/clock_types.h>\r\n#include <stdint.h>\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <sys/proc.h>\r\n#include <sys/types.h>\r\n#include <sys/sysctl.h>\r\n#include <sys/time.h>\r\n#include <time.h>\r\n#include <unistd.h>\r\n\r\nstatic struct timeval BootTime(void) {\r\n  struct timeval boottime = { 0 };\r\n  size_t boottime_size = sizeof(boottime);\r\n  int mib[] = { CTL_KERN, KERN_BOOTTIME };\r\n  if (sysctl(mib, sizeof(mib) / sizeof(mib[0]), &boottime, &boottime_size, NULL, 0) != 0) {\r\n    perror(\"Couldn't get boottime\");\r\n    exit(1);\r\n  }\r\n  return boottime;\r\n}\r\n\r\nstatic struct timeval CurrentWallClockTime(void) {\r\n  struct timeval now = { 0 } ;\r\n  if (gettimeofday(&now, NULL) != 0) {\r\n    perror(\"Couldn't gettimeofday\");\r\n    exit(1);\r\n  }\r\n  return now;\r\n}\r\n\r\nstatic void SetCurrentWallClockTime(struct timeval new_now) {\r\n  if (settimeofday(&new_now, NULL) != 0) {\r\n    perror(\"Couldn't settimeofday (try `sudo`)\");\r\n    exit(1);\r\n  }\r\n}\r\n\r\nstatic struct timeval ForkTime(pid_t pid) {\r\n  struct kinfo_proc kinfo_proc = { 0 };\r\n  size_t kinfo_proc_size = sizeof(kinfo_proc);\r\n  int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, (int)pid };\r\n  if (sysctl(mib, sizeof(mib) / sizeof(mib[0]), &kinfo_proc, &kinfo_proc_size, NULL, 0) != 0) {\r\n    perror(\"Couldn't get kinfo_proc\");\r\n    exit(1);\r\n  }\r\n  return kinfo_proc.kp_proc.p_starttime;\r\n}\r\n\r\nstatic int64_t TimevalDeltaMicros(const struct timeval a, const struct timeval b) {\r\n  return (b.tv_sec - a.tv_sec) * USEC_PER_SEC + (b.tv_usec - a.tv_usec);\r\n}\r\n\r\nstatic void PrintTimes(const struct timeval boottime, const struct timeval forktime, const struct timeval wallclocktime) {\r\n  printf(\"Boot time: %ld.%06d\\n\", boottime.tv_sec, boottime.tv_usec);\r\n  printf(\"Fork time: %ld.%06d\\n\", forktime.tv_sec, forktime.tv_usec);\r\n  printf(\"Wall-clock time: %ld.%06d\\n\", wallclocktime.tv_sec, wallclocktime.tv_usec);\r\n\r\n  printf(\"Time elapsed since boot: %lld us\\n\", TimevalDeltaMicros(boottime, wallclocktime));\r\n  printf(\"Time elapsed since fork: %lld us\\n\", TimevalDeltaMicros(forktime, wallclocktime));\r\n}\r\n\r\nint main(int argc, char** argv) {\r\n  const pid_t pid = getpid();\r\n  const struct timeval boottime_before = BootTime();\r\n  const struct timeval forktime_before = ForkTime(pid);\r\n  const struct timeval wallclocktime_before = CurrentWallClockTime();\r\n\r\n  printf(\"===Before setting wall-clock time back 5 minutes===\\n\");\r\n  PrintTimes(boottime_before, forktime_before, wallclocktime_before);\r\n\r\n  // Set the time back 5 minutes.\r\n  struct timeval newwallclocktime = wallclocktime_before;\r\n  newwallclocktime.tv_sec -= 5 * 60;\r\n  SetCurrentWallClockTime(newwallclocktime);\r\n\r\n  const struct timeval boottime_after = BootTime();\r\n  const struct timeval forktime_after = ForkTime(pid);\r\n  const struct timeval wallclocktime_after = CurrentWallClockTime();\r\n  printf(\"\\n===After setting wall-clock time back 5 minutes===\\n\");\r\n  PrintTimes(boottime_after, forktime_after, wallclocktime_after);\r\n\r\n  // Set the time back to where it was.\r\n  newwallclocktime = CurrentWallClockTime();\r\n  newwallclocktime.tv_sec -= 5 * 60;\r\n  SetCurrentWallClockTime(newwallclocktime);\r\n  return 0;\r\n}"
    email: foxden@gmail.com
    modified: "2022-09-22T22:08:51.840997Z"
    number: FB11571780
    number_intvalue: 11571780
    originated: "2022-09-22"
    parent_number: '&{NULL_VALUE}'
    product: ""
    product_version: ""
    reproducible: ""
    resolved: ""
    status: New
    title: Process fork time is not corrected for system time changes
