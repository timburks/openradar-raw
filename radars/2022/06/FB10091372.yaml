apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: FB10091372
    labels:
        datastore_id: "5584470413410304"
data:
    classification: Incorrect/Unexpected Behavior
    created: "2022-06-08T05:11:38.231625Z"
    description: "When a `DragGesture` is included on a `View` within a `ScrollView`, either via `simultaneousGesture(…)` or `gesture(…)`, the drag gesture is not able to gracefully transition into a pan gesture on the containing `ScrollView`, even when cancelled. This results in the `ScrollView` not scrolling when dragging up or down on the view with the gesture, which doesn't match UIKit behavior with a similar setup.\r\n\r\nThe expected behavior is that when panning up or down on the view with the `DragGesture`, the `ScrollView` would recognize the gesture and cancel the `DragGesture`, allowing the `ScrollView` to be scrolled instead.\r\n\r\nThe following example exhibits the issue, which is demonstrated in the attached video and was reproduced on the iOS 16 beta in Xcode version 14.0 beta (14A5228q). When you scroll between the buttons, the scroll view scrolls as expected, but when you scroll on the buttons, the ScrollView pan gesture does not take precedence over the DragGesture in the ButtonStyle.\r\n\r\n```\r\nstruct ScrollGestureTest: View {\r\n  var body: some View {\r\n    ScrollView {\r\n      VStack(spacing: 44) {\r\n        ForEach(1...25, id: \\.self) { index in\r\n          Button(action: { print(\"Tapped \\(index)\") }) {\r\n            Text(\"Button \\(index)\").frame(maxWidth: .infinity)\r\n          }\r\n          .padding()\r\n        }\r\n      }\r\n    }\r\n    .buttonStyle(CustomPrimitiveButtonStyle())\r\n  }\r\n}\r\n\r\nstruct CustomPrimitiveButtonStyle: PrimitiveButtonStyle {\r\n  var foregroundColor = Color.white\r\n  var pressedScale: CGFloat = 0.96\r\n  var backgroundShape = RoundedRectangle(cornerRadius: 12)\r\n  var fillColor = Gradient(colors: [.black, .gray])\r\n  var animation = Animation.interactiveSpring(response: 0.55, dampingFraction: 0.95)\r\n  var gestureCancelDistance: CGFloat = 55\r\n\r\n  func makeBody(configuration: Configuration) -> some View {\r\n    configuration.label\r\n      .allowsHitTesting(false)\r\n      .foregroundColor(foregroundColor)\r\n      .padding()\r\n      .background(background)\r\n      .clipShape(backgroundShape)\r\n      .scaleEffect(isPressed ? pressedScale : 1)\r\n      .animation(animation, value: isPressed)\r\n      .onSizeChange { size = $0 }\r\n      .simultaneousGesture(dragGesture.onEnded { _ in\r\n        configuration.trigger()\r\n      })\r\n  }\r\n\r\n  // MARK: Private\r\n\r\n  private struct DragState {\r\n    var cancelled = false\r\n    var highlightPoint: UnitPoint?\r\n  }\r\n\r\n  @State private var size: CGSize? = nil\r\n  @GestureState private var dragState = DragState()\r\n\r\n  private var isPressed: Bool { dragState.highlightPoint != nil }\r\n\r\n  private var background: some View {\r\n    backgroundShape.fill(\r\n      RadialGradient(\r\n        gradient: fillColor,\r\n        center: dragState.highlightPoint ?? .center,\r\n        startRadius: 50,\r\n        endRadius: 150))\r\n  }\r\n\r\n  private var dragGesture: some Gesture {\r\n    dragState.cancelled\r\n      ? nil\r\n      : DragGesture(minimumDistance: 0, coordinateSpace: .local)\r\n      .updating($dragState) { [size] gesture, state, _ in\r\n        guard let size = size else { return }\r\n\r\n        if gesture.within(size, threshold: gestureCancelDistance) {\r\n          state.highlightPoint = .init(x: gesture.location.x / size.width, y: gesture.location.y / size.height)\r\n        } else {\r\n          state.cancelled = true\r\n          state.highlightPoint = nil\r\n        }\r\n      }\r\n  }\r\n}\r\n\r\nextension DragGesture.Value {\r\n  func within(_ size: CGSize, threshold: CGFloat) -> Bool {\r\n    CGRect(origin: .zero, size: size).insetBy(dx: -threshold, dy: -threshold).contains(location)\r\n  }\r\n}\r\n\r\nextension View {\r\n  func onSizeChange(onChange: @escaping (CGSize) -> Void) -> some View {\r\n    background(\r\n      GeometryReader { geometryProxy in\r\n        Spacer()\r\n          .preference(key: SizePreferenceKey.self, value: geometryProxy.size)\r\n      })\r\n      .onPreferenceChange(SizePreferenceKey.self, perform: onChange)\r\n  }\r\n}\r\n\r\nprivate struct SizePreferenceKey: PreferenceKey {\r\n  static var defaultValue: CGSize = .zero\r\n  static func reduce(value _: inout CGSize, nextValue _: () -> CGSize) {}\r\n}\r\n```"
    email: eric.horacek@airbnb.com
    modified: "2022-06-08T05:12:40.227193Z"
    number: FB10091372
    number_intvalue: 10091372
    originated: 6/7/22
    parent_number: '&{NULL_VALUE}'
    product: SwiftUI Framework
    product_version: iOS 16
    reproducible: Yes
    resolved: ""
    status: Open
    title: Embedded DragGesture cancels containing ScrollView pan gesture
