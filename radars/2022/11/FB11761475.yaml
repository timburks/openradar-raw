apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: FB11761475
    labels:
        datastore_id: "5532321457373184"
data:
    classification: Something else not on this list
    created: "2022-11-07T01:50:57.971503Z"
    description: "Please describe the issue:\r\nIn the macOS 13 SDK shipping in Xcode 14.1, sprintf and vsprintf are deprecated. I applaud this decision.\r\n\r\nFrom <stdio.h>:\r\n187  #if !defined(_POSIX_C_SOURCE)\r\n188  __deprecated_msg(\"This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead.\")\r\n189  #endif\r\n190  int      sprintf(char * __restrict, const char * __restrict, ...) __printflike(2, 3);\r\n\r\nUnfortunately, the sprintf/vsprintf deprecation is only normally effective when compiling C++ and Objective-C++ source. It is not effective when compiling plain C or Objective-C files without C++.\r\n\r\nmark@arm-and-hammer zsh% cat sprintf.c\r\n#include <stdio.h>\r\n\r\nvoid F(char* s) {\r\n  sprintf(s, \"\");\r\n}\r\nmark@arm-and-hammer zsh% for l in sprintf.m sprintf.cc sprintf.mm; do ln -sf sprintf.c \"${l}\"; done\r\nmark@arm-and-hammer zsh% clang -Wall -Werror -c sprintf.c -o sprintf.o\r\nmark@arm-and-hammer zsh% clang -Wall -Werror -c sprintf.m -o sprintf.o\r\nmark@arm-and-hammer zsh% clang -Wall -Werror -c sprintf.cc -o sprintf.o\r\nsprintf.cc:4:3: error: 'sprintf' is deprecated: This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead. [-Werror,-Wdeprecated-declarations]\r\n  sprintf(s, \"\");\r\n  ^\r\n[…]\r\n1 error generated.\r\nmark@arm-and-hammer zsh% clang -Wall -Werror -c sprintf.mm -o sprintf.o\r\nsprintf.mm:4:3: error: 'sprintf' is deprecated: This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead. [-Werror,-Wdeprecated-declarations]\r\n  sprintf(s, \"\");\r\n  ^\r\n[…]\r\n1 error generated.\r\n\r\nOn identical source code, the deprecation warnings only appeared when building C++ and Objective-C++. The reason for this is that when compiling plain C or Objective-C, the sprintf declaration that’s been marked deprecated is not used. The bottom of <stdio.h> has:\r\n\r\n414  #if defined (__GNUC__) && _FORTIFY_SOURCE > 0 && !defined (__cplusplus)\r\n415  /* Security checking functions.  */\r\n416  #include <secure/_stdio.h>\r\n417  #endif\r\n\r\nBear in mind that _FORTIFY_SOURCE, unless explicitly defined by the user, is normally set to 2. From <_types.h>:\r\n\r\n61  #ifndef _FORTIFY_SOURCE\r\n62  #  if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && ((__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__-0) < 1050)\r\n63  #    define _FORTIFY_SOURCE 0\r\n64  #  else\r\n65  #    define _FORTIFY_SOURCE 2   /* on by default */\r\n66  #  endif\r\n67  #endif\r\n\r\nTherefore, when __cplusplus is not defined (it’s defined when compiling C++ or Objective-C++, but not plain C or Objective-C), <secure/_stdio.h> is #included.\r\n\r\n<secure/_stdio.h> has:\r\n\r\n45  #undef sprintf\r\n46  #define sprintf(str, ...) \\\r\n47    __builtin___sprintf_chk (str, 0, __darwin_obsz(str), __VA_ARGS__)\r\n48  #endif\r\n\r\nThe sprintf declared in <stdio.h> and marked deprecated is normally never used when compiling plain C or Objective-C. No deprecation warnings regarding sprintf will ever appear for those languages. Developers will not be warned to migrate away from this interface that’s difficult to use correctly.\r\n\r\nAs an exception, warnings appear when _FORTIFY_SOURCE is set to 0 when building plain C or Objective-C. This can happen either by a compiler -D option or a #define. _FORTIFY_SOURCE is also defined to 0 when Address Sanitizer is enabled, via the -fsanitize=address compiler option. So, strangely, although sprintf deprecation warnings do not appear when building plain C or Objective-C, they do appear under ASan.\r\n\r\nmark@arm-and-hammer zsh% clang -Wall -Werror -fsanitize=address -c sprintf.c -o sprintf.o\r\nsprintf.c:4:3: error: 'sprintf' is deprecated: This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead. [-Werror,-Wdeprecated-declarations]\r\n  sprintf(s, \"\");\r\n  ^\r\n[…]\r\n1 error generated.\r\n\r\nThe same applies to vsprintf.\r\n\r\nmacOS 13.0 22A380\r\nXcode 14.1 14B47b\r\n\r\nWe are tracking this at https://crbug.com/1381706.\r\n\r\nPlease list the steps you took to reproduce the issue:\r\nThe attached test program is named sprintf.c (plain C), and symbolic links are created so it can also be accessed as sprintf.m (Objective-C), sprintf.cc (C++), and sprintf.mm (Objective-C++).\r\n\r\nCreate the symbolic links:\r\n\r\nmark@arm-and-hammer zsh% for l in sprintf.m sprintf.cc sprintf.mm; do ln -sf sprintf.c \"${l}\"; done\r\n\r\nNow compile this code four times, once for each of the four languages:\r\n\r\nmark@arm-and-hammer zsh% clang -Wall -Werror -c sprintf.c -o sprintf.o\r\nmark@arm-and-hammer zsh% clang -Wall -Werror -c sprintf.m -o sprintf.o\r\nmark@arm-and-hammer zsh% clang -Wall -Werror -c sprintf.cc -o sprintf.o\r\nmark@arm-and-hammer zsh% clang -Wall -Werror -c sprintf.mm -o sprintf.o\r\n\r\nWhat did you expect to happen?\r\nDeprecation warnings should have appeared for all four compilations. The deprecation warnings should look as they do for the C++ (sprintf.cc) test case:\r\n\r\nmark@arm-and-hammer zsh% clang -Wall -Werror -c sprintf.cc -o sprintf.o\r\nsprintf.cc:4:3: error: 'sprintf' is deprecated: This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead. [-Werror,-Wdeprecated-declarations]\r\n  sprintf(s, \"\");\r\n  ^\r\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdio.h:188:1: note: 'sprintf' has been explicitly marked deprecated here\r\n__deprecated_msg(\"This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead.\")\r\n^\r\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/cdefs.h:215:48: note: expanded from macro '__deprecated_msg'\r\n        #define __deprecated_msg(_msg) __attribute__((__deprecated__(_msg)))\r\n                                                      ^\r\n1 error generated.\r\n\r\nWhat actually happened?\r\nDeprecation warnings did appear for the C++ (sprintf.cc) and Objective-C++ (sprintf.mm) test cases, but did not appear for the plain C (sprintf.c) or Objective-C (sprintf.m) test cases. Instead, compilation proceeded without any warning that sprintf was deprecated."
    email: mark@chromium.org
    modified: "2022-11-07T01:50:57.97174Z"
    number: FB11761475
    number_intvalue: 11761475
    originated: "2022-11-06"
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 14.1 14B47b
    reproducible: Always
    resolved: ""
    status: Open
    title: sprintf and vsprintf deprecation not effective in plain C and Objective-C files
