apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: FB11302966
    labels:
        datastore_id: "5609763610034176"
data:
    classification: ""
    created: "2022-08-18T14:38:40.462224Z"
    description: "After updating a List with a bigger array, scrolling to a row of an offset bigger than the previous data array with ScrollViewProxy will crash the app with an EXC_BREAKPOINT (code=1, subcode=0x1099d6004) error. \r\n\r\nBelow I attached a sample project to reproduce the crash. \r\nWhen opening there's an empty list. When pressing the \"Randomize & Select Last\" button at the top, the list will be filled with 5 random UUIDs, followed by scrolling to the last row. The app will crash on the second try, when it will try to scroll to an offset bigger than the previous data array, as it will scroll to the last row.\r\nAs a control there's an \"Randomize & Select Random\" button that will behave more or less like the \"Randomize & Select Last\" button but will choose a random row to select and scroll. It will only crash if this select row if of an offset bigger that the size of the previous array. \r\n\r\nThis doesn't happen in iOS 15.\r\n\r\n\r\n\r\n======\r\nSample code:\r\n\r\nimport SwiftUI\r\n\r\n\r\n///A simple data model for the demo. Only stores an UUID.\r\nstruct DataModel: Identifiable, Hashable {\r\n    let id: UUID = UUID()\r\n    var nameUUID: String {\r\n        id.uuidString\r\n    }\r\n}\r\n\r\n\r\nstruct ContentView: View {\r\n\r\n///Array with some data to show\r\n    @State private var data: [DataModel] = []\r\n    ///Selected row\r\n    @State private var selection: DataModel?\r\n\r\n    var body: some View {\r\n        VStack(alignment: .leading) {\r\n\r\n            HStack {\r\n                //Create a new array for showing in the list.\r\n                //This array will be bigger than the last one.\r\n                //The selection will be the last element of the array (triggering the bug)\r\n                Button {\r\n                    //Increment the size of the new List by 5\r\n                    let numberElements = data.count  + 5\r\n\r\n                    //Create a new Array of DataModel with more 5 elements that the previous one\r\n                    let newData = (0 ..< numberElements).map { _ in  DataModel() }\r\n\r\n                    //Select the last element of the array/list.\r\n                    //This will make sure that the scrollTo will go to the end\r\n                    let newSelection = newData.last\r\n\r\n                    //Update STate for the new values\r\n                    data = newData\r\n                    selection = newSelection\r\n\r\n                } label: {\r\n                    Text(\"Randomize & Select Last\")\r\n                }\r\n\r\n                Spacer()\r\n                //Create a new array for showing in the list.\r\n                //This array will be bigger than the last one.\r\n                //The selection will be the a random element of the array (only triggering the bug when the element is )\r\n                Button {\r\n                    //Increment the size of the new List by 5\r\n                    //If empty will start with 40 (reducing the odds of triggering the bug)\r\n                    let numberElements = data.count == 0 ? 40 : data.count + 5\r\n\r\n                    //Create a new Array of DataModel with more 5 elements that the previous one\r\n                    let newData = (0 ..< numberElements).map { _ in  DataModel() }\r\n\r\n                    //Select a random element of the array/list.\r\n                    //This will scroll if the element is 'inside' the previous list\r\n                    //Otherwise will crash\r\n                    let newSelection = newData.randomElement()\r\n\r\n                    //Update State for the new values\r\n                    data = newData\r\n                    selection = newSelection\r\n\r\n                } label: {\r\n                    Text(\"Randomize & Select Random\")\r\n                }\r\n\r\n            }\r\n                .padding()\r\n\r\n            //MARK: ScrollViewReader and List\r\n                ScrollViewReader {\r\n                    proxy in\r\n\r\n                    List(data, selection: $selection) {\r\n                        dataElement in\r\n\r\n                        //Row (is only the UUID for the rows\r\n                        Text(dataElement.id.uuidString)\r\n                            .id(dataElement)\r\n                            .tag(dataElement)\r\n\r\n                    }\r\n                    //action that fires when data changes\r\n                    //it will scroll to the selection\r\n                    .onChange(of: data, perform: { newValue in\r\n\r\n                        if let selection {\r\n                            proxy.scrollTo(selection)\r\n                        }\r\n                    })\r\n                }\r\n        }\r\n    }\r\n}"
    email: joaocolaco@gmail.com
    modified: "2022-08-18T14:38:40.462387Z"
    number: FB11302966
    number_intvalue: 11302966
    originated: 18/08/2022
    parent_number: '&{NULL_VALUE}'
    product: SwiftUI
    product_version: iOS16
    reproducible: Yes
    resolved: ""
    status: Open
    title: ScrollViewProxy scrollTo will crash when scrolling outside of bounds of previous (not current) List data source/array in iPad and iOS 16 beta
