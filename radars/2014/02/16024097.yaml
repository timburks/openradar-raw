apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "16024097"
    labels:
        datastore_id: "5870670000947200"
data:
    classification: Performance
    created: "2014-02-10T10:03:48.514934Z"
    description: "A typical pattern in Objective-C class design when implementing to-many relationships is to use a private ivar with mutable container type and to expose the immutable type in the getter. One example for this pattern is NSView's subviews. An NSView's client should never get the private mutable array, so in the getter we create and return an immutable copy. To make this copy cheap it's often a good idea to cache the immutable copy, making it possible to return the same instance over and over. We invalidate the cached copy only when mutating the original instance.\r\n\r\nIt seems that this pattern could easily and transparently be implemented in NSMutableArray, making it available in all places where copies are requested repeatedly.\r\n\r\nCached instances could be released weakly or when receiving memory warnings (on iOS). Not only arrays but most Foundation classes that implement NSMutableCopying could benefit from this optimization."
    email: nikolai.ruhe@googlemail.com
    modified: "2014-02-10T10:03:48.515192Z"
    number: "16024097"
    number_intvalue: 16024097
    originated: 10-Feb-2014
    parent_number: '&{NULL_VALUE}'
    product: OS X SDK
    product_version: Mac OS 10.9, iOS 7.0
    reproducible: Always
    resolved: ""
    status: Open
    title: Foundation could cache immutable copies of mutable containers.
