apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "15060709"
    labels:
        datastore_id: "5265646547894272"
data:
    classification: ""
    created: "2014-02-06T18:36:49.16724Z"
    description: "Summary:\r\nFacebook is on its way to having hundreds and then thousands of Xcode project targets. Xcode's performance is already buckling under the pressure of having [REDACTED] targets. To see how this is going to go in the future, I benchmarked pathological Xcode projects like ours will be in the future. Xcode becomes very unresponsive once the number of targets hits 1000, even if the targets are trivial (a single file with a single C function).\r\n\r\nSteps to Reproduce:\r\nI generated four kinds of projects, attached:\r\n1. 1 target with 1000 files in it.\r\n2. 1001 targets, 1 file each. Autogenerated scheme and find implicit dependencies.\r\n3. 1001 targets, 1 file each. Hand-crafted scheme with every target listed.\r\n4. 1000 subprojects, 1 target each, 1 file each. Autogenerated scheme and find implicit dependencies.\r\n\r\nI used one instance of Xcode for all benchmarks, opening and closing projects. I cleared DerivedData between each run. I tested loading time to interaction (TTI), closing TTI, build-from-clean time, and incremental (zero files edited) build time. Indexing was also disabled in defaults since it seemed that Xcode would _never_ become responsive in some cases with indexing enabled.\r\n\r\nExpected Results:\r\nXcode should always start after a few seconds. An incremental build with zero files changed should always take under a second.\r\n\r\nActual Results:\r\nBenchmarks taken on latest MBP Retina 15\", 16gigs of ram.\r\n\r\n== 1 target, 1000 files each ==\r\nXcode TTI: 1.77s\r\nClean Build: 3.91s\r\nIncremental build: 0.2s\r\nClose Xcode TTI: 0.75s\r\n\r\n== 1000 targets, 1 files each, implicit scheme ==\r\nXcode TTI: 21.09s\r\nClean Build: 15.23s\r\nIncremental build: 7.45s\r\nClose Xcode TTI: 9.82s\r\n\r\n== 1000 targets, 1 files each, explicit scheme ==\r\nXcode TTI: 97.39s\r\nClean Build: 18.34s\r\nIncremental build: 9.6s\r\nClose Xcode TTI: 17.93s\r\n\r\n== 1000 projects, 1 targets each, 1 files each, implicit scheme ==\r\nXcode TTI: 48.66s\r\nClean Build: 26.06s\r\nIncremental build: 8.57s\r\nClose Xcode TTI: 35.15s\r\n\r\n== Facebook workspace, [REDACTED] ==\r\n[REDACTED, numbers are similar to pathological cases above]\r\n\r\nLooking at these numbers, it is likely that in the future opening the Facebook project will take [REDACTED]. We are hesitant to add more targets since target count seems to contribute heavily to sluggishness.\r\n\r\nVersion:\r\nOS X 10.8.4, Xcode 5 production.\r\n\r\nNotes:\r\nIf possible, I would like to work with someone on the Xcode team to resolve these issues for Facebook's use in particular. It is important enough to Facebook's iOS productivity that working around Xcode performance issues is now my fulltime responsibility. You can contact me at [REDACTED].\r\n\r\nConfiguration:\r\n\r\n\r\nAttachments:\r\n'xcodestress.zip' was successfully uploaded."
    email: jason.prado@gmail.com
    modified: "2014-02-06T18:36:49.167448Z"
    number: "15060709"
    number_intvalue: 15060709
    originated: 23-Sep-2013
    parent_number: '&{NULL_VALUE}'
    product: Xcode
    product_version: "5"
    reproducible: ""
    resolved: ""
    status: Open
    title: Xcode is unresponsive and slow with many targets (example projects attached)
