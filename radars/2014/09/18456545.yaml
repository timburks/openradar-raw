apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18456545"
    labels:
        datastore_id: "5883183790817280"
data:
    classification: Serious Bug
    created: "2014-09-25T17:48:35.295239Z"
    description: |-
        Summary:
        A protocol specifying a curried function can be conformed to by a class which uses a normal function return instead. If you try this with a struct or enum, it crashes the compiler.

        Steps to Reproduce:
        enum S<T> : P {
        	func f<T>() -> T -> T {
        		return { x in x }
        	}
        }
        protocol P {
        	func f<T>()(T) -> T
        }

        Expected Results:
        I expected this would work.

        Actual Results:
        The compiler crashed.

        Regression:
        - Doesn’t crash if you use a class.
        - Doesn’t crash without the protocol conformance.
        - Doesn’t crash if the protocol specifies a normal function return.
        - Doesn’t crash if the protocol specifies a normal function return and the value type does a curried return, BUT, you have to explicitly specify the argument labels in the function return in the protocol because the compiler treats it as a labelled tuple; this is pretty frustrating.

        Notes:
        N/A
    email: rix.rob@gmail.com
    modified: "2014-09-25T17:48:35.295423Z"
    number: "18456545"
    number_intvalue: 18456545
    originated: 25-Sep-2014 01:48 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode-6.1 (6A1030)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift: Compiler crash when a value type uses normal function returns to conform to a protocol with a curried function'
