apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18495219"
    labels:
        datastore_id: "6379355592720384"
data:
    classification: Serious Bug
    created: "2014-09-30T00:04:13.619183Z"
    description: "Summary:\r\nIn Xcode 6.1 Beta 3,\r\n\r\nSteps to Reproduce:\r\n1. Create a new project with a unit test target.\r\n2. Define a class with a property that returns a `UInt64`.\r\n3. In a test method, instantiate the class.\r\n4. Use `XCTestEqual` with a literal on one side (\"6\") and the property on the other (\"obj.anInt64\")\r\n5. Build.\r\n6. Observe compilation error.\r\n\r\nExpected Results:\r\nThe project compiles and the tests execute successfully.\r\n\r\nActual Results:\r\nCompliation error: \"Type 'autoclosure () -> UInt64' does not conform to protocol 'IntegerLiteralConvertible'\"\r\n\r\nVersion:\r\nXcode Version 6.1 (Beta 3 - 6A1042b), OS X Version 10.10 (Beta 3 - 14A361p)\r\n\r\nNotes:\r\nWorkaround: specify the literal as \"UInt64(8)\".\r\n\r\nDespite the existence of a workaround, this is a total regression. For a generic method, the Swift compiler should be able to speculatively determine that `UInt64` is compatible with `IntegerLiteralConvertible` as it always have.  Though Swift recommends using Int at all costs, sometimes that is out of our hands (frameworks, etc.).\r\n\r\nConfiguration:\r\nOccurs with specific derivatives of numeric types, but not the base numeric types. i.e., it happens with CGFloat/FloatLiteralConvertible, Float/FloatLiteralConvertible (64), Double/FloatLiteralConvertible (32), and with all the specific-type Int and IntegerLiteralConvertible."
    email: zwaldowski@gmail.com
    modified: "2015-02-10T02:51:12.217943Z"
    number: "18495219"
    number_intvalue: 18495219
    originated: 29-Sep-2014
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 6.1 Beta 3 (6A1042b)
    reproducible: Sometimes
    resolved: "true"
    status: Closed
    title: Compiler error with derived integer types in XCTestEqual
