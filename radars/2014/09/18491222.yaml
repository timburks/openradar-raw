apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18491222"
    labels:
        datastore_id: "4988258635218944"
data:
    classification: ""
    created: "2014-09-29T20:10:19.195787Z"
    description: "Summary:\r\nWhen declaring a type, declaring \"redundant\" protocol conformance can cause the type checker to break.\r\n\r\nE.g. Class B subclasses Class A and conforms to Protocols X and Y.\r\n\r\nI have a method with a return value of (ClassA<ProtocolY> *)\r\nReturning just (ClassB *) works as expected, but returning (ClassB<ProtocolX> *) gives an \"incompatible pointer type\" warning, even though it is not actually adding any extra information or changing the type, as ClassB by definition implements ProtocolX.\r\n\r\nSpecifying redundant protocol information can be necessary in some cases if the classes and protocols are forward-declared (and thus some scopes do not know the classes' full conformance). However, in scopes where all the class and protocol definitions have been imported, the above example should not return a warning.\r\n\r\nSteps to Reproduce:\r\nSample project is included.\r\n\r\nExpected Results:\r\nThe type checker will recognize that the return value is valid.\r\n\r\nActual Results:\r\nXcode complains of an incompatible pointer type mismatch.\r\n\r\nVersion:\r\nXcode, 6.0.1 OS X 10.9.5\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:\r\n\r\n\r\nAttachments:\r\n'TypeCheckingBugExample.zip' was successfully uploaded.\r\n\r\n\r\n[Note: OpenRadar doesn't let you attach files, but the example project should be easy to recreate from the example described above]"
    email: bdorfman@foursquare.com
    modified: "2014-09-29T20:10:19.196052Z"
    number: "18491222"
    number_intvalue: 18491222
    originated: 29-Sep-2014
    parent_number: '&{NULL_VALUE}'
    product: Developer tools
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Open
    title: Type checker incorrectly claims incompatible pointer types if redundant protocol conformance is specified
