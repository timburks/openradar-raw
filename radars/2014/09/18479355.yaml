apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18479355"
    labels:
        datastore_id: "5236507744927744"
data:
    classification: Serious bug
    created: "2014-09-27T19:16:10.485575Z"
    description: "This appears to be the reason behind this never working:\r\n\r\n    var array = [(1, 2), (3, 4)]\r\n    array.append((5, 6))\r\n    // error: missing argument for parameter #2 in call\r\n\r\nWhen generic structs are specialized with a tuple type, methods can't be called with a literal of that instance's specialized type. Those same methods can be called with a tuple variable. Methods that explicitly accept a tuple don't have an issue -- they accept both tuple literals and tuple variables.\r\n\r\nSteps to Reproduce:\r\n1. Open Xcode\r\n2. Create a new playground\r\n3. Enter the following code:\r\n\r\nstruct TestGeneric<T> {\r\n    func goodMethod(arg: (Int, Int)) {\r\n        println(arg)\r\n    }\r\n    \r\n    func badMethod(arg: T) {\r\n        println(arg)\r\n    }\r\n}\r\n\r\nvar test = TestGeneric<(Int, Int)>()\r\nlet tuple = (1, 2)\r\ntest.goodMethod(tuple)\r\ntest.goodMethod((3, 4))\r\ntest.badMethod(tuple)\r\ntest.badMethod((3, 4))      // this is the line that fails\r\n\r\n\r\nExpected Results:\r\nThe console should show:\r\n\r\n(1, 2)\r\n(3, 4)\r\n(1, 2)\r\n(3, 4)\r\n\r\nActual Results:\r\nThe console shows an error message:\r\n\r\nPlayground execution failed: <EXPR>:38:16: error: missing argument for parameter #2 in call\r\ntest.badMethod((3, 4))"
    email: natecook@gmail.com
    modified: "2014-09-27T19:16:10.485861Z"
    number: "18479355"
    number_intvalue: 18479355
    originated: 9/27/2014
    parent_number: '&{NULL_VALUE}'
    product: Xcode
    product_version: 6.1 beta 2
    reproducible: Always
    resolved: ""
    status: Open
    title: Can't call methods using a tuple literal on a generic struct with tuple type
