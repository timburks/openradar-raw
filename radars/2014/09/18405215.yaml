apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18405215"
    labels:
        datastore_id: "5909848021532672"
data:
    classification: Serious Bug
    created: "2014-09-21T01:18:22.731377Z"
    description: "Summary:\nThis one is just… well, you’ll see.\n\n\nSteps to Reproduce:\n1. In two different files, write this code:\n\nFile one:\n\nprotocol P { typealias R }\nstruct S<U : P> {\n\tlet t: U.R\n}\nfunc f<T>(t: T) -> S<Q<T>>? {\n\treturn nil\n}\n\n\nFile two:\n\nstruct Q<T> : P { typealias R = T; let t: T }\n\n\nExpected Results:\nNot a crash.\n\n\nActual Results:\nA crash.\n\n\nRegression:\nLots of cases where this doesn’t repro:\n- change S to a class\n- put f and Q in the same file\n- remove t from S (i.e. don’t have a constant/variable of the associated type)\n- replace t with a func returning e.g. U.R?\n- remove f\n- change t’s type to U instead of U.R\n\nOn the other hand it doesn’t matter if t’s type is U.R, () -> U.R, U.R -> (), or optional variants of any of those. \n\n\nNotes:\nThis is significantly reduced from how I encountered it, which is in the Swift version of my testing framework Lagrangian.\n\nProject to follow."
    email: rix.rob@gmail.com
    modified: "2014-09-21T01:18:22.73151Z"
    number: "18405215"
    number_intvalue: 18405215
    originated: 20-Sep-2014 09:18 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode-Beta (6A1030)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift: Crash with protocols, associated types, structs, functions, multiple files, and constants'
