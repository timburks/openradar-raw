apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "15789639"
    labels:
        datastore_id: "5049684854833152"
data:
    classification: Enhancement
    created: "2014-01-10T05:24:13.883863Z"
    description: "====================\r\nSummary:\r\n====================\r\n\r\n\r\nIt would be really great if Xcode's fancy new QuickLook system could be extended to support C types.\r\n\r\nFor example, let's say I have a struct which represents a region of time. It's composed of two NSTimeIntervals: a date and a duration.\r\n\r\nDebugging things which use this structure would normally be a chore, as the debugger gives you two meaningless big numbers, e.g:\r\n\r\ntimeFrame STGTimeFrame\r\n  | date          NSTimeInterval     404956800\r\n  | duration    NSTimeInterval     18489600\r\n\r\nNot only that, but if you've used timeIntervalSinceReferenceDate, you first need to convert these values to something 1970-based before using an online unix timestamp converter.\r\n\r\nForum thread: https://devforums.apple.com/thread/215979?tstart=0\r\n\r\nThere is a dev-forum thread about this where I was advised to file a radar. Python script type summaries are mentioned as a possible workaround. They do help a lot, but you can't get the same visual debugging information from a python script that you can with QuickLook. For some types, that extra visual information could make a real difference.\r\n\r\nFor example, I've got a second type - STGTimeFrameSubtractionResult. It contains two timeFrames. I've got a nice little algorithm which allows me to subtract one region of time from another (possibly resulting in a \"hole\" - modelled by two timeFrames, left and right). This function is used for delta processing - we can subtract the old timeFrame from the new timeFrame and load new data only for regions of time which have been added.\r\n\r\nIt would be much more helpful to visualise this as an image (e.g. a timeline showing the included regions, with a hole in the middle and some relevant dates labelled) than as textual output. You can work with the text output, sure, but it is much less than ideal.\r\n\r\nThis is one example, and the point is that C types can represent rather complex things which are a bit of a headache to deal with in text format. An extension of the visual debugger to cover them would be really nice.\r\n\r\n====================\r\nSteps to Reproduce:\r\n====================\r\n\r\nN/A\r\n\r\n====================\r\nExpected Results:\r\n====================\r\n\r\nMy proposal would be one of the following:\r\n\r\n1. A C function with a custom attribute, similar to UI_APPEARANCE_SELECTOR, which does nothing other than to tell the debugger that this returns a QuickLook summary object for a given type.\r\n\r\ne.g.\r\n\r\nUIImage * __getTimeFrameImage( STGTimeFrame timeFrame ) DEBUG_QUICKLOOK_PROVIDER( STGTimeFrame )\r\n\r\n2. A Quicklook manager class, with which we can register custom C functions.\r\n\r\n#import <DebugSupport/DebuggingQuickLookManager>\r\n\r\n@interface DebugQuickLookProviders: NSObject\r\n@end\r\n\r\n@implementation DebugQuickLookProviders\r\n\r\n+ (void)load {\r\n\r\n    [DebuggingQuickLookManager registerFunction: __getTimeFrameImage\r\n                                                                    forType: @encode( STGTimeFrame )];\r\n}\r\n\r\nUIImage* __getTimeFrameImage( STGTimeFrame timeFrame ) {\r\n\r\n// Do something fancy and return an image.\r\n}\r\n\r\n@end\r\n\r\n****\r\n\r\nThe benefit to these, of course, is that you get to do far more elaborate things and be far more visual than you can with an LLDB python script. Since they are part of the project, they are also portable - automatically registering for anybody else who uses your project (team members, open-source downloaders, etc).\r\n\r\nMy own preference is for #2. Of course, since you would be mixing C functions with Obj-C types (which is perfectly legal), the QuickLook functions would have to go in a separate .m file. This is nice because it kind of enforces a separation from the C code which defines the C types and the QuickLook code which uses Obj-C to enhance debugging output.\r\n\r\n====================\r\nActual Results:\r\n====================\r\n\r\nN/A\r\n\r\n====================\r\nVersion:\r\n====================\r\n\r\nXcode 5.1\r\n\r\n====================\r\nNotes:\r\n====================\r\n\r\n====================\r\nConfiguration:\r\n====================\r\n\r\n====================\r\nAttachments:\r\n===================="
    email: razielim@gmail.com
    modified: "2014-01-10T05:24:13.884106Z"
    number: "15789639"
    number_intvalue: 15789639
    originated: 10/12/2014
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: Always
    resolved: ""
    status: Open
    title: QuickLook for C types
