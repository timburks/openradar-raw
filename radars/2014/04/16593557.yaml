apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "16593557"
    labels:
        datastore_id: "5902701598605312"
data:
    classification: Enchancement
    created: "2014-04-11T18:20:08.473282Z"
    description: "There are many cases where you might be using NSNotificationCenter to observe NSUserDefaultsDidChangeNotification, but wish you could know exactly what defaults are changing, or what their new values are. No problem, you think: I'll ask the internet! The internet might point you toward Key Value Observing, and all the magical things it can do. But the internet might not tell you all the ways in which it can crash.\r\n\r\nIt's cool though, you think. This is really similar to NSNotificationCenter, and occasionally calling removeObserver: needlessly doesn't cause any problems there. Plus, the docs would tell me if something would raise an exception. The docs *love* to tell me if something could raise an exception.\r\n\r\nSo then you ship your app, and someone comes across that rare timing bug that causes the remove code to get called first, and now you have to rewrite a bunch of code, or just add a bunch of try/catch garbage all over the place. It sure would've been nice if you'd known about that sooner.\r\n\r\nSteps to Reproduce:\r\nN/A\r\n\r\nExpected Results:\r\nN/A\r\n\r\nActual Results:\r\nN/A"
    email: robotspacer@gmail.com
    modified: "2014-04-11T18:20:08.473454Z"
    number: "16593557"
    number_intvalue: 16593557
    originated: 11-Apr-2014 02:18 PM
    parent_number: '&{NULL_VALUE}'
    product: iOS SDK
    product_version: N/A
    reproducible: N/A
    resolved: ""
    status: Open
    title: 'KVO''s docs on removeObserver:forKeyPath: should mention that it raises an exception if it''s not already observing.'
