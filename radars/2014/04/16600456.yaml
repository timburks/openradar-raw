apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "16600456"
    labels:
        datastore_id: "5808951052468224"
data:
    classification: Serious Bug
    created: "2014-04-12T10:13:56.400315Z"
    description: "Not cool, Apple. Not cool at all.\r\n\r\nEither improve the Core Data API into something usable (do this)\r\nor leave mogenerator to the rest of us (do this, too, actually).\r\nBut please don't do this to us.\r\n\r\nSource: http://rentzsch.tumblr.com/post/82453434093/apple-claims-mogenerators-methods\r\n\r\n[blogpost quote]\r\n\r\nTitle: \"Apple Claims Mogenerator’s Methods\"\r\n\r\nWhen generating class files to represent your data model’s entities, mogenerator writes a few convenience class methods for you:\r\n+ (id)insertInManagedObjectContext:(NSManagedObjectContext*)moc_;\r\n+ (NSString*)entityName;\r\n+ (NSEntityDescription*)entityInManagedObjectContext:(NSManagedObjectContext*)moc_;\r\nThese handy class methods allow you to write something like this:\r\n[MyEntity insertInManagedObjectContext:moc];\r\nto create a new instance. Contrast with:\r\n[NSEntityDescription insertNewObjectForEntityForName:@\"MyEntity\" inManagedObjectContext:moc];\r\nThe mogenerator way is more obvious, less code and not stringly typed.\r\nSo that’s the backgrounder.\r\nThe good news is Apple likes mogenerator so much that they used it to implement iOS’s PhotoLibraryServices.framework.\r\nThe bad news is that PhotoLibraryServices.framework is a private framework.\r\nAs a first line of defense against naughty developers submitting apps that use undocumented APIs, Apple sweeps up every selector (method name) defined in all private frameworks and puts them on a special list. The “non-public selectors” list.\r\nUnfortunately this includes the convenience methods mentioned above.\r\nIf your App Store submission is found to be use non-public selectors Apple may do nothing, issue a warning or reject your submission altogether.\r\n※ ※ ※\r\nI’m not sure what to do about this.\r\nI could not supply the convenience methods and use Core Data directly like an animal. No! I won’t go back. I can’t go back.\r\nPrefixing the methods (perhaps with an mo_) would provide relief, but only temporarily. When Apple upgrades PhotoLibraryServices to the newer version of mogenerator the cycle would begin anew.\r\nNS is designed for optional class namespacing, but its concepts could be applied to method names as well. Unfortunately at the method level it uglies up the code and confuses Xcode’s code navigator popup menu. Also it would probably require NS_NAMESPACE preprocessor symbol be defined at the target or project level.\r\nApple could explicitly whitelist mogenerator’s convenience methods but I’m not holding my breath.\r\nThe next version of mogenerator could be released under an “Anyone But Apple” license. The idea is to allow everyone but Apple to use mogenerator. I could prefix the methods and issue the mogenerator upgrade knowing Apple couldn’t upgrade and claim the new methods as their own again.\r\nSadly, this seems like the most promising option.\r\n\r\n[/blogpost quote]"
    email: satsumac@googlemail.com
    modified: "2014-04-12T10:13:56.400479Z"
    number: "16600456"
    number_intvalue: 16600456
    originated: 12-Apr-2014
    parent_number: '&{NULL_VALUE}'
    product: iOS SDK
    product_version: "7.1"
    reproducible: n/a
    resolved: ""
    status: open
    title: Apple Claims Mogenerator’s Methods
