apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "16482549"
    labels:
        datastore_id: "5276828226813952"
data:
    classification: ""
    created: "2014-04-01T20:04:57.878284Z"
    description: "Full details here: https://github.com/josephhainline/AppleBugTLSConnectionFailsWithEllipticCurveClientCert\r\n\r\nApple marked this as a duplicate of 10450268 (Open)!\r\n\r\nSummary:\r\nAttempting to establish a TLS mutually authenticated https connection using a client certificate with elliptic curve key appears to be missing the client verify message.\r\n\r\nSteps to Reproduce:\r\n\r\n1. Install XCode and ruby.  We ran with XCode Version 5.1 (5B130a), and Ruby version ruby 1.9.3p362 (2012-12-25 revision 38607) [x86_64-darwin13.0.0]\r\n    \r\n2. Clone the bug report example repo \r\n  $ git clone https://github.com/josephhainline/AppleBugTLSConnectionFailsWithEllipticCurveClientCert\r\n        \r\n3. First, we'll connect to an HTTPS server configured to request a client certificate. \r\n   Running this command will start such a server, set up to respond to TLS connections\r\n   with RSA certs or EC certs.\r\n   \r\n4. Launch the server with this command: (you need sudo because it runs on port 443)\r\n\r\n    ```$  sudo openssl s_server -accept 443 -cert im_server.crt -key im_server.key -CAfile ca.crt -debug -verify 1 -no_ssl2 -no_ssl3 -WWW```\r\n  \r\n5. You should see output similar to:\r\n\r\n```\r\nverify depth is 1\r\nUsing default temp DH parameters\r\nUsing default temp ECDH parameters\r\nACCEPT\r\n```\r\n    \r\n6. If you see an error that includes \"bind: Address already in use\" then you may need to \r\n   kill a VPN program or other app currently using port 443.  To see what app that might\r\n   be, run this command on Mavericks:\r\n\r\n   ```$ sudo lsof -i -n -P | grep 443```\r\n\r\n\r\n### Test your TLS connection with a Ruby script (it works)\r\n\r\n7. To confirm you are set up correctly, run these ruby scripts, which will make a TLS \r\n   connection, and do a GET to fetch a small text file.  The first \r\n   \r\n8. Test your TLS connection with RSA key \r\n\r\n    ```$ ruby test_rsa_connection.rb```\r\n\r\nYou should see output like the following:\r\n\r\n    I, [2014-03-31T14:26:21.139811 #46647]  INFO -- : get https://localhost/ping.txt\r\n    D, [2014-03-31T14:26:21.139918 #46647] DEBUG -- request: User-Agent: \"Faraday v0.9.0\"\r\n    I, [2014-03-31T14:26:21.173050 #46647]  INFO -- Status: 200\r\n    D, [2014-03-31T14:26:21.173108 #46647] DEBUG -- response: content-type: \"text/plain\"\r\n    pong\r\n    \r\n9. Test your TLS connection with an EC key\r\n\r\n    ```$ ruby test_ec_connection.rb```\r\n\r\nYou should see output like the following\r\n\r\n    I, [2014-03-31T14:26:25.689928 #46651]  INFO -- : get https://localhost/ping.txt\r\n    D, [2014-03-31T14:26:25.690032 #46651] DEBUG -- request: User-Agent: \"Faraday v0.9.0\"\r\n    I, [2014-03-31T14:26:25.723178 #46651]  INFO -- Status: 200\r\n    D, [2014-03-31T14:26:25.723234 #46651] DEBUG -- response: content-type: \"text/plain\"\r\n    pong\r\n\r\n\r\n\r\n### Test your TLS connection with an iOS app (EC fails)\r\n\r\n10. Open the included XCode project:\r\n   ```$ open AESTest.xcodeproj/```\r\n    \r\n11. Run the AESTest project in XCode, target of iPad or iPhone are both ok.\r\n\r\n12. When the simulator is running, click the \"send ping request with rsa\" button\r\n    If you see the response \"pong\", the connection worked as expected.\r\n    \r\n13. When the simulator is running, click the \"send ping request with ec\" button.\r\n    This will attempt the a TLS connection with EC cert, which will fail.  Your \r\n    reponse will be \"error with connection\".  \r\n\r\nExpected Results:\r\nThe mutual-auth TLS connection between iPad and server can be made when the client X.509 certificate uses an elliptic curve key.\r\n\r\n\r\nActual Results:\r\nThe mutual-auth TLS connection between iPad and server cannot be made when the client X.509 certificate uses an elliptic curve key, as the iPad fails to do the verify step.\r\n\r\nWhat fails:\r\n  * TLS handshaking fails due to server sending a FATAL alert \"Unexpected Message\". \r\n    Server log indicates \"SSL3_GET_CERT_VERIFY:missing verify message\". Packet capture \r\n    shows that client is sending:\r\n    * Certificate\r\n    * Client Key Exchange\r\n    * Change Cipher Spec \r\n    \r\n    It should be sending:\r\n    * Certificate\r\n    * Client Key Exchange\r\n    * **Certificate Verify**\r\n    * Change Cipher Spec\r\n   \r\n\r\nVersion:\r\nTested 6.0 through 7.1, likely all versions.\r\n\r\nNotes:\r\nWas previously submitted as a technical support request, with code: \r\nFollow-up: 604772255\r\n\r\n\r\nConfiguration:\r\n- OS X box running Mavericks\r\n- XCode Version 5.1 (5B130a)\r\n- Ruby version ruby 1.9.3p362 (2012-12-25 revision 38607) [x86_64-darwin13.0.0]\r\n- iOS 6.0 through 7.1"
    email: joseph.hainline@gmail.com
    modified: "2014-04-01T20:04:57.878474Z"
    number: "16482549"
    number_intvalue: 16482549
    originated: 04-01-2014
    parent_number: '&{NULL_VALUE}'
    product: iOS SDK
    product_version: at least 6.0 and up
    reproducible: always
    resolved: ""
    status: Open (Duplicate)
    title: TLS Mutual authentication with EC Keys fails
