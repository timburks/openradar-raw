apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18579265"
    labels:
        datastore_id: "5785887950503936"
data:
    classification: ""
    created: "2014-10-08T05:58:41.256063Z"
    description: "For Cocoa initializers that may fail and return an NSError, it's not uncommon for a particular use to only fail on programmer error. \r\n\r\nFor example, NSRegularExpression(pattern:options:error:) will only fail on a bad pattern, and usually patterns are static strings known at compile time. \r\n\r\nFor this case, the desired behavior is to throw an exception or assert if the init doesn't succeed, and to log the error. If it does succeed, unwrap the optional.\r\n\r\nI suggest that ?? ought to work for that if the right hand side is a noreturn func.\r\n\r\nlet regex = NSRegularExpression(pattern: \"abc\", options: nil, error: &e) ?? assertionFailure( e!.localizedDescription)\r\n\r\nto work around, I wrote this function:\r\n\r\nfunc unwrapAssert<T>(maybe : T?, message: @autoclosure () -> String) -> T {\r\n    assert(maybe != nil, message())\r\n    return maybe!\r\n}\r\n\r\nwhich allows \r\n\r\nlet regex = unwrapAssert(NSRegularExpression(pattern: \"abc\", options: nil, error: &e), assertionFailure( e!.localizedDescription))"
    email: kenferry@gmail.com
    modified: "2014-10-08T05:58:41.256325Z"
    number: "18579265"
    number_intvalue: 18579265
    originated: ""
    parent_number: '&{NULL_VALUE}'
    product: ""
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Open
    title: 'Swift: allow a noreturn func to match any type'
