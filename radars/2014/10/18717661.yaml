apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18717661"
    labels:
        datastore_id: "6403207894925312"
data:
    classification: Security
    created: "2014-10-21T04:44:22.835856Z"
    description: |-
        Summary:
        The naming rules for parameters are messed up with curried functions.

        Steps to Reproduce:
        Define the following three functions:

        func const<A, B>(a: A)(b: B) -> A {
            return a
        }

        func foo<A, B>(a: A, b: B) -> A {
            return a
        }

        func bar<A, B>(a: A) -> B -> A {
            return { _ in a }
        }


        Expected Results:
        I should be able to call the functions like:

        const(4)(1)
        foo(4, 5)
        bar(4)(3)

        Actual Results:
        I have to actually provide the name for the second parameter for the func “const”.

        const(4)(b: 1)
        foo(4, 5)
        bar(4)(3)

        Further, defining the function const as:

        func const<A, B>(a: A)(_ b: B) -> A { … }

        That results in a compiler warning for the argument name and a compiler error for:

        const(4)(1)

        Regression:
        Yes, I believe I was able to do this in earlier builds.

        Notes:
        Provide additional information, such as references to related problems, workarounds and relevant attachments.
    email: owensd@gmail.com
    modified: "2014-10-21T04:44:22.836064Z"
    number: "18717661"
    number_intvalue: 18717661
    originated: 20-Oct-2014 09:44 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 6.1 (6A1052c)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift: Curried Funcations have incorrect naming rules'
