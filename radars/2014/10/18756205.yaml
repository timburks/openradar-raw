apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18756205"
    labels:
        datastore_id: "6619055771353088"
data:
    classification: UI/Usability
    created: "2014-10-23T22:08:14.017287Z"
    description: "Summary:\r\nIn certain circumstances, presenting a view controller modally can hang as if the call is being made from a background thread even if the call is being made from the main thread. The operation sits and spins for anywhere from 0-20 seconds - this can be *wildly* inconsistent, which makes it very hard to diagnose. \r\n\r\nIt also isn't happening everywhere. I've been able to get it to reproduce between my actual project and the attached sample project by having a UIViewController with a single UITableView as its subview and a custom UITableView cell as is. The setup of the table view in the sample project mirrors my actual project where the same issue is occurring. \r\n\r\nWhen this does occur, if you wrap your call to presentViewController:animated:completion in an explicit call either using dispatch_async or [NSOperationQueue mainQueue], it works as expected.\r\n\r\nSteps to Reproduce:\r\n1. Open sample project, build and run. \r\n2. Tap one of the even rows (0 or 2). \r\n3. Observe that presentation time for the modal can be wildly inconsistent, often taking upwards of 8-9 seconds to present.\r\n4. Tap one of the odd rows (1 or 3). \r\n5. Observe that the presentation time is consistently as expected. \r\n6. Drink Heavily. \r\n\r\nExpected Results:\r\npresentViewController:animated:completion: should work the same everywhere as long as it's being called from the main thread. \r\n\r\nActual Results:\r\nHair torn out for two days trying to figure out why my VC was taking up to 20 seconds to present even though the call to present was on the main thread. \r\n\r\nVersion:\r\niOS 8.1\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:\r\niPhone 6 Verizon + iOS simulators galore\r\n\r\nAttachments:\r\n[If anyone wants a gander at the sample project, email me at designated nerd at gmail dot com, but the workaround is pretty much just wrap your present call in [[NSOperationQueue mainQueue] addOperationWithBlock:] and it works just dandy]."
    email: designatednerd@gmail.com
    modified: "2014-10-23T22:08:14.017523Z"
    number: "18756205"
    number_intvalue: 18756205
    originated: 10/23/2014
    parent_number: '&{NULL_VALUE}'
    product: iOS SDK
    product_version: "8.1"
    reproducible: Sometimes
    resolved: ""
    status: Open
    title: 'UIViewController''s presentViewController:animated:completion: sometimes hangs unless you explicitly call it on the main thread even if it''s already on the main thread.'
