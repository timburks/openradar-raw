apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18573645"
    labels:
        datastore_id: "5843182814232576"
data:
    classification: Enhancement
    created: "2014-10-07T21:23:19.744507Z"
    description: "Summary:\nMeasuring a program’s performance is only going to tell you about the performance of *that run*. It would be really great if Instruments and/or Xcode would help me measure how that performance relates to one or more variables; it’s not enough to see that an operation took x amount of time if that data lacks any context about how much work was done in that time.\n\nThis could possibly be integrated into the benchmarking unit tests in XCTest, since it might be useful to tell if O(n) suddenly became closer to O(n^2) in something that’s expected to scale up quite a bit. But I’d primarily want this in Instruments as a tool to explore an algorithm I’m building.\n\nThis is also a useful tool for narrowing down performance issues since correlating some variable with the interval & time profile could potentially highlight cases of e.g. resource contention that wouldn’t be immediately apparent on their own. Seeing that something is linear up until n = the number of cores and then spikes upwards, for example, is not going to be clear from looking at an individual data point, but is much clearer with the graph of them all. \n\nSo: I’d love some way to change some variable n, or to infer n within Instruments, and to get graphs of time against n, and ideally (optional) time profiles at each sample of n. Pretty, pretty graphs.\n\n\nSteps to Reproduce:\nN/A\n\nExpected Results:\nN/A\n\nActual Results:\nN/A\n\nRegression:\nN/A\n\nNotes:\nN/A"
    email: rix.rob@gmail.com
    modified: "2014-10-07T21:23:19.744719Z"
    number: "18573645"
    number_intvalue: 18573645
    originated: 07-Oct-2014 05:23 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode-6.1 (6A1046a)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Instruments: Help me measure asymptotic complexity'
