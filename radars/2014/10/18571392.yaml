apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18571392"
    labels:
        datastore_id: "5833802605658112"
data:
    classification: Crash
    created: "2014-10-07T19:44:06.269984Z"
    description: "Summary:\r\nIf a closure with an inferred type is created and immediately called (i.e. not assigned to a variable first) and is passed a variable defined as a var, it will trigger a compiler crash in Xcode 6.1 (6A1042b).\r\n\r\nSteps to Reproduce:\r\n1. Install Xcode 6.1 (6A1042b)\r\n2. Create a new OS X command line tool project with its language set to Swift\r\n3. Replace the code in main.swift with the following:\r\n\r\n    var index = 1\r\n    _ = {\r\n        println($0)\r\n    } (index)\r\n\r\n4. Build the project\r\n\r\nExpected Results:\r\nA compiled binary\r\n\r\nActual Results:\r\nSwift Compiler Error: Command failed due to signal: Segmentation fault: 11\r\n\r\n0  swift                    0x0000000107c4bf68 llvm::sys::PrintStackTrace(__sFILE*) + 40\r\n1  swift                    0x0000000107c4c454 SignalHandler(int) + 452\r\n2  libsystem_platform.dylib 0x00007fff97762f1a _sigtramp + 26\r\n3  libsystem_platform.dylib 000000000000000000 _sigtramp + 1753862400\r\n4  swift                    0x000000010801025c swift::NominalTypeDecl::getMembers(bool) const + 28\r\n5  swift                    0x00000001070a6fe8 (anonymous namespace)::LowerType::visitAnyStructType(swift::CanType, swift::StructDecl*) + 40\r\n6  swift                    0x00000001070a4c3d swift::Lowering::TypeLowering const* swift::CanTypeVisitor<(anonymous namespace)::LowerType, swift::Lowering::TypeLowering const*>::visit<>(swift::CanType) + 125\r\n7  swift                    0x00000001070a4ab7 swift::Lowering::TypeConverter::getTypeLoweringForUncachedLoweredType(swift::Lowering::TypeConverter::TypeKey) + 263\r\n8  swift                    0x00000001070a43af swift::Lowering::TypeConverter::getTypeLowering(swift::Lowering::AbstractionPattern, swift::Type, unsigned int) + 1999\r\n9  swift                    0x000000010706ebf4 (anonymous namespace)::DestructureInputs::visitType(swift::CanType, swift::CanType) + 52\r\n10 swift                    0x000000010706e76c getSILFunctionType(swift::SILModule&, swift::CanType, swift::CanTypeWrapper<swift::AnyFunctionType>, swift::CanTypeWrapper<swift::AnyFunctionType>, swift::AnyFunctionType::ExtInfo, (anonymous namespace)::Conventions const&) + 556\r\n11 swift                    0x000000010706c6e8 getUncachedSILFunctionTypeForConstant(swift::SILModule&, swift::SILDeclRef, swift::CanTypeWrapper<swift::AnyFunctionType>, swift::CanTypeWrapper<swift::AnyFunctionType>, swift::CanTypeWrapper<swift::AnyFunctionType>, swift::CanTypeWrapper<swift::AnyFunctionType>, swift::AnyFunctionType::Representation) + 776\r\n12 swift                    0x000000010706c2d3 swift::Lowering::TypeConverter::getConstantInfo(swift::SILDeclRef) + 691\r\n13 swift                    0x00000001070b992c swift::Lowering::SILGenModule::getFunction(swift::SILDeclRef, swift::ForDefinition_t) + 204\r\n14 swift                    0x00000001070bc60b swift::SILFunction* swift::Lowering::SILGenModule::preEmitFunction<swift::AbstractClosureExpr>(swift::SILDeclRef, swift::AbstractClosureExpr*, swift::SILLocation) + 91\r\n15 swift                    0x00000001070ba897 swift::Lowering::SILGenModule::emitClosure(swift::AbstractClosureExpr*) + 119\r\n16 swift                    0x00000001070f5491 (anonymous namespace)::RValueEmitter::visitAbstractClosureExpr(swift::AbstractClosureExpr*, swift::Lowering::SGFContext) + 97\r\n17 swift                    0x00000001070e7d86 swift::ASTVisitor<(anonymous namespace)::RValueEmitter, swift::Lowering::RValue, void, void, void, void, void, swift::Lowering::SGFContext>::visit(swift::Expr*, swift::Lowering::SGFContext) + 2870\r\n18 swift                    0x00000001070f05dd swift::Lowering::\r\n\r\nVersion:\r\nXcode 6.1 (6A1042b)\r\n\r\nNotes:\r\nThere are two workarounds:\r\n\r\n1. Define the variable passed to the closure as a let:\r\n\r\n    let index = 1\r\n    _ = {\r\n        println($0)\r\n    } (index)\r\n\r\n2. Explicitly define the type of the parameter in the closure:\r\n\r\n    var index = 1\r\n    _ = { (i: Int) in\r\n        println(i)\r\n    } (index)\r\n\r\n\r\nConfiguration:\r\niMac (27-inch, Late 2012)\r\n3.4 GHz Intel Core i7\r\n24 GB 1600 MHz DDR3\r\nNVIDIA GeForce GTX 680MX 2048 MB\r\n\r\nOS X Yosemite 10.10 (14A379a)"
    email: msealand@gmail.com
    modified: "2015-02-10T22:35:50.512795Z"
    number: "18571392"
    number_intvalue: 18571392
    originated: 10/7/2014
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 6.1 (6A1042b)
    reproducible: Always
    resolved: 02/10/2015
    status: Closed
    title: Passing a var to immediately called Swift closure causes segfault in Xcode 6.1 (6A1042b)
