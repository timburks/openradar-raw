apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18701780"
    labels:
        datastore_id: "5905885041786880"
data:
    classification: Serious Bug
    created: "2014-10-19T04:27:29.872013Z"
    description: "This is a weird one but I finally found the reproduction steps. Just check out the example below.\r\n\r\nSteps to Reproduce:\r\n// Playground - noun: a place where people can play\r\n\r\nimport Cocoa\r\n\r\nclass GeneralThing<S> {\r\n\tvar stuff: S?\r\n\r\n\tfunc doIt() {\r\n\t\tif let s = stuff {\r\n\t\t\tdoWithStuff(s)\r\n\t\t}\r\n\t}\r\n\r\n\tfunc doWithStuff(stuff: S) -> S {\r\n\t\treturn stuff\r\n\t}\r\n}\r\n\r\nclass SpecificThing<T>: GeneralThing<Int> {\r\n\toverride func doWithStuff(stuff: Int) -> Int {\r\n\t\tprintln(\"\\(stuff + 1)\")\r\n\t\treturn stuff + 1\r\n\t}\r\n}\r\n\r\nlet t = SpecificThing<Float>()\r\nt.stuff = 1\r\nt.doIt()\r\n\r\n\r\nExpected Results:\r\nShould print \"2\" and return 2.\r\n\r\nActual Results:\r\nIn a playground it seems to (usually) crash. Though not always. The `stuff` argument passed to `SpecificThing.doWithStuff` seems to be garbage."
    email: joshaber@gmail.com
    modified: "2014-10-19T04:27:29.872195Z"
    number: "18701780"
    number_intvalue: 18701780
    originated: 10/19/14
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: 6.1 (6A1046a)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift: Non-generic subclass of generic class does not pass argument properly?'
