apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18664041"
    labels:
        datastore_id: "5831204150444032"
data:
    classification: Enhancement
    created: "2014-10-15T14:29:03.869973Z"
    description: "Summary:\r\nAnnotations are a great feature that allows metadata to be added to classes, methods, variables, parameters, and packages. Annotations can be both used by developer tools at compile-time as well as at run-time, by your code itself.\r\n\r\nFirst, let’s use an annotation to tell the compiler that we’re overriding a method that belongs on our superclass (don’t be confused by the @ symbol which obviously has all sorts of meanings in Objective-C but is only used for annotations in Java):\r\n\r\n@Override\r\npublic String someMethod(Array array, Integer integer) {\r\n}\r\n\r\nWhy is this useful? Let’s say that a typo was included in the method name, or a wrong type was used for one of the arguments. Normally this wouldn’t generate a warning or error, a new method would simply be declared instead of overriding an existing one. By using the @Override annotation, the compiler can tell us that a mistake has been made rather than failing silently.\r\n\r\nThe @Override annotation actually ships with the Java SDK, but you can define your own custom annotation types as well. Annotations can include a list of optional key-value pairs, which allow us to build something like the following:\r\n\r\n@ResponseField(key = \"blog_name\", trim = true, required = true)\r\nString blogName;\r\n\r\nSay you’re implementing a mobile app that parses data from an API. Annotations allow this to be done declaratively instead of procedurally. Instance variables can be marked up with a custom @ResponseField annotation that indicates that they should be populated with values from the API responses. The response parsing logic can now be completely generic and reused across all of your different model objects:\r\n\r\n* Introspect an instance for variables with the @ResponseField annotation\r\n* Use the key field to determine where the desired value can be found in the API response dictionary\r\n* Use other fields to do other things, e.g. trim strings if trim = true, abort if a non-nullable field is missing, run a regular expression to ensure a field contains a valid value, etc.\r\n\r\nSteps to Reproduce:\r\nTry to use custom annotation types in Swift\r\n\r\nExpected Results:\r\nSwift would have support for custom annotation types\r\n\r\nActual Results:\r\nSwift doesn't have support for custom annotation types\r\n\r\nVersion:\r\nAll versions of the SDK with support for Swift"
    email: bryan@irace.me
    modified: "2014-10-15T14:29:03.870201Z"
    number: "18664041"
    number_intvalue: 18664041
    originated: 10/15/2014
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: iOS SDK 8.X
    reproducible: Yes
    resolved: No
    status: Open
    title: Custom annotation types should be added to Swift
