apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17136760"
    labels:
        datastore_id: "5883417732317184"
data:
    classification: Other Bug
    created: "2014-06-04T01:48:59.025119Z"
    description: "Summary:\r\nArrays created with \"let\" should not allow their elements to change. Doing so breaks the principle of least surprise and is likely to cause bugs in concurrent code.\r\n\r\nSteps to Reproduce:\r\n\r\n1. Open an Xcode playground.\r\n2. Type the following:\r\n\r\n        let array = [\"a\"]\r\n        array[0] = \"b\"\r\n\r\nExpected Results:\r\nA \"Cannot assign to the result of this expression\" error.\r\n\r\nActual Results:\r\nThe array is mutated.\r\n\r\nComments:\r\nI understand that Swift can perform optimizations on semi-mutable arrays that it can't perform on fully mutable ones. That's great! I want you to perform those optimizations where you can!\r\n\r\nBut that doesn't mean you should overload \"let\"—which for all other struct types means \"this is immutable\"—to indicate an array is semi-mutable. When I pass an immutable array to another function—or, God forbid, to a block on another queue—I need to be able to trust that the array won't change behind my back. Sure, I can call unshare() defensively, but then what's the point of having the optimization at all?\r\n\r\nIt'd be much better to create a FixedArray type or use a different keyword to indicate when you actually want this optimization. As it is, I'm likely to stick with NSArray—and that's a damn shame. I want Swift.Array's type safety, but not at the cost of creating async bugs."
    email: brent@architechies.com
    modified: "2014-06-12T11:27:17.623082Z"
    number: "17136760"
    number_intvalue: 17136760
    originated: "2014-06-03"
    parent_number: "17192555"
    product: Developer Tools
    product_version: Xcode 6A215l, swift-600.0.34.4.5
    reproducible: Always
    resolved: ""
    status: Duplicate/17192555
    title: Swift.Array "let" behavior is misguided
