apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17499931"
    labels:
        datastore_id: "6392284786458624"
data:
    classification: other bug
    created: "2014-06-29T20:33:25.035017Z"
    description: "Summary:\r\nIn Obj-C, -[NSJSONSerialization JSONObjectWithData] returns id, and the docs indicate it will be a Foundation type, meaning either NSArray or NSDictionary.\r\n\r\nIn Swift, this returns arrays or dictionaries of unexpected types that are burdensome to unbundle. Specifically:\r\n1. The object can be cast to Array<Dictionary<String,AnyObject>> (or Dictionary<String,AnyObject>[]), but not Array<Dictionary<String,Any>>.\r\n2. When the value of a given name-value pair in the dictionary is a string, it cannot be cast to a Swift string (this causes a compiler error). It must be retrieved as an AnyObject? and then cast to a Swift String, or retrieved as an NSString.\r\n\r\nSteps to Reproduce:\r\nRun the sample project NSJSONSerializationSwiftBuglet. It reads a bundled JSON file as NSData (the results of performing an SLRequest to read a Twitter timeline), uses NSJSONSerialization.JSONObjectWithData to create an AnyObject? called jsonData,  and then attempts various techniques to get at the contents of the JSON object. These techniques log messages to a UITextView.\r\n\r\nExpected Results:\r\nThe data is an array of dictionaries, which are keyed with strings and can have either arrays, dictionaries, or strings as valuesâ€¦ so I would expect to be able to cast to NSArray<NSDictionary<String, Any>>, since the Swift string is not an object, per se.\r\n\r\nActual Results:\r\nHere's the output:\r\ngot a jsonObject\r\n----------------\r\n----------------\r\nit's not an Array<Dictionary<String,Any>>\r\n----------------\r\nit's an Array<Dictionary<String,AnyObject>>\r\n * First Tweet: RT @edbott: No. Just no. RT @ow The future on your wrist http://t.co/ecIs4co62J\r\n    * Roundabout NSString technique works here\r\n----------------\r\nit's a Dictionary<String,AnyObject>[]\r\n  * First Tweet: RT @edbott: No. Just no. RT @ow The future on your wrist http://t.co/ecIs4co62J\r\n    * Roundabout NSString technique works here\r\n----------------\r\nit's an Array<AnyObject>\r\nfirst object is a Dictionary <String, AnyObject>\r\n  * First Tweet: RT @edbott: No. Just no. RT @ow The future on your wrist http://t.co/ecIs4co62J\r\n    * Roundabout NSString technique works here\r\n----------------\r\nit's not an Array<Any>\r\nno further tests here, I'm lazy\r\n----------------\r\nit's an NSArray\r\nno further tests here, I'm lazy\r\n----------------\r\n\r\nPoints of interest:\r\n\r\n1. I *cannot* cast the jsonObject to  Array<Dictionary<String,Any>>, though I can cast it to  Array<Dictionary<String,AnyObject>>. Why would the more general cast fail, and the more specific cast succeed?\r\n\r\n2. I would expect to be able to cast the value of a name-value pair to a string optional (\"String?\") like this:\r\n    let tweetText : String?  = tweetDict[\"text\"] as? String\r\nhowever, if the jsonObject was cast to Array<Dictionary<String,AnyObject>>, the compiler rejects this line as \"Could not find an overload for 'subscript' that accepts the supplied arguments\". OTOH, this line compiles when jsonObject was cast to Array<Dictionary<String,Any>>, but that block never executes anyways.\r\n\r\n3. Casting values to NSStrings instead of Swift strings seems to always compile and always work.\r\n\r\nVersion:\r\nXcode 6 beta 2, OS X 10.9.3\r\n\r\nNotes:\r\nMy main complaints are that\r\n1. Casting the jsonObject to Array<Dictionary<String,Any>> is the intuitive choice and should work.\r\n2. In the Array<Dictionary<String,AnyObject>> case, getting the value from the dictionary with \"let tweetText : String?  = tweetDict[\"text\"] as? String\" is the intuitive way to get a Swift string and should compile (and would, if point 1 were true). The compiler error here is also unhelpful.\r\n\r\nConfiguration:\r\nEarly 2008 Mac Pro\r\n\r\nAttachments:\r\n'NSJSONSerializationSwiftBuglet.zip' was successfully uploaded.\r\n\r\n\r\nOpenRadar readers: buglet code at https://dl.dropboxusercontent.com/u/12216224/buglets/NSJSONSerializationSwiftBuglet.zip"
    email: invalidname@gmail.com
    modified: "2017-12-05T19:16:36.25232Z"
    number: "17499931"
    number_intvalue: 17499931
    originated: 6/29/14
    parent_number: '&{NULL_VALUE}'
    product: iOS SDK
    product_version: iOS 8 beta 2 / Xcode 6 beta 2
    reproducible: always
    resolved: ""
    status: closed
    title: Swift return type for NSJSONSerialization.JSONObjectWithData() is unintuitive, impractical
