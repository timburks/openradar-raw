apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17428664"
    labels:
        datastore_id: "6095360812384256"
data:
    classification: Feature (New)
    created: "2014-06-24T00:44:03.540044Z"
    description: |-
        Summary:
        Currently Swift supports two variants of arithmetic operators:

        * Regular arithmetic operators, like + and *, cause a runtime error if an operation overflows.
        * Overflowing arithmetic operators, like &+ and &*, ignore overflows.

        I would like to see a third set of operators, perhaps along the lines of ?+ and ?* (or +? and *?), which return nil if the operation fails.

        Steps to Reproduce:
        1. In a playground, write an arithmetic operation thatâ€™s likely to overflow, e.g.:

            Int.max ?+ Int.max

        Expected Results:
        A nil value.

        Actual Results:
        A syntax error. You can choose between a crash or completely ignoring overflows.

        Notes:
        Optional arithmetic operators should accept either regular or optional types, and always return optional types. If any operand is nil, the result of the operator should also be nil.
    email: brent@architechies.com
    modified: "2014-06-24T00:44:03.54021Z"
    number: "17428664"
    number_intvalue: 17428664
    originated: 23-Jun-2014 05:43 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode6-Beta2 (6A216f)
    reproducible: Always
    resolved: ""
    status: Open
    title: Swift should support optional arithmetic on integers
