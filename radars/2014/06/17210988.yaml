apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17210988"
    labels:
        datastore_id: "4841089701773312"
data:
    classification: ""
    created: "2014-06-07T03:15:36.85108Z"
    description: "Summary:\r\nThere is not enough documentation of the `Sequence` and `Generator` templates in the iBook or the online materials.\r\n\r\nWWDC 2014 session 404 touched on this, but didn't fully explain it.\r\n\r\nConsider a deck of cards, which could be Western, Mah Jong or something of the developer's own design:\r\n\r\nstruct Card {\r\n\tenum Rank {\r\n\t\t...\r\n\t}\r\n\r\n\tenum Suit {\r\n\t\t...\r\n\t}\r\n\r\n\tlet rank: Rank\r\n\tlet suit: Suit\r\n    \r\n    static func fullDeck() -> Card[] {\r\n        var deck = Card[]()\r\n        for suit in Suit.all() {\r\n            for rank in Rank.all() {\r\n                let card = Card(rank: rank, suit: suit)\r\n                deck.append(card)\r\n            }\r\n        }\r\n        return deck\r\n    }\r\n}\r\n\r\nIt is unclear to me how to write `Suit.all()` and `Rank.all()` in a generic way. I see tantalising hints re `EnumerateGenerator` in the standard library, but these are not documented.\r\n\r\nSteps to Reproduce:\r\nn/a\r\n\r\nExpected Results:\r\nDocs telling me how to use `EnumerateGenerator` etc to create a `static func all()` on my enums that returns all values.\r\n\r\n\r\nActual Results:\r\nLeft feeling that I'm missing something obvious."
    email: richardb@sailmaker.co.uk
    modified: "2014-06-07T03:15:36.85124Z"
    number: "17210988"
    number_intvalue: 17210988
    originated: 2004/06/07
    parent_number: '&{NULL_VALUE}'
    product: Swift
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Open
    title: There is not enough documentation of the `Sequence` and `Generator` templates in the iBook or the online materials.
