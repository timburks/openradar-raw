apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17359090"
    labels:
        datastore_id: "5848711577993216"
data:
    classification: Enhancement
    created: "2014-06-18T12:56:52.509171Z"
    description: "Summary:\r\nCurrently we are able to use dynamic dispatch on classes declared using @objc or inheriting from NSObject.\r\n\r\nThis should be extended to the rest of the language, so that we can use objectOrStruct.methodName?(...)\r\n\r\nIdeally, this should be extended so that it is possible to write objectOrStruct.methodName? regardless whether the object/struct implements a protocol with methodName or not.\r\n\r\nThe underlying implementation can be allowed to differ depending on the actual object.\r\n\r\nFor example, for structs and native swift classes, we could use  (the future) reflection machinery to do this in the Java way, without involving the ObjC runtime. This is a bit slow but will work.\r\n\r\nFor @objc / NSObject we get the fast ObjC dispatch.\r\n\r\nIn order to fully promote this, I also suggest dropping the @objc syntax, which makes dynamic dispatch seem loosely bolted on.\r\n\r\nExample syntax:\r\n\r\n// For ObjC-style classes\r\ndynamic class MyClass {\r\n}\r\n\r\n// Or conversely instead annotate swift classes\r\nstatic class MyClass {\r\n}\r\n\r\nFor protocols to be exported to ObjC\r\n\r\n// or possibly @objc - it makes sense here\r\n@exported protocol MyProtocol {\r\n}\r\n\r\nNative swift protocols should obviously support optional natively.\r\n\r\nTo ensure fine grained control over dynamic/static dispatch (and perhaps remove the need for dynamic/static class distinctions) we could annotate methods as @final (no virtual dispatch, always possible to inline when referenced directly from class) @static (vtable or inlined, but slow dynamic dispatch via reflection) and @dynamic (ObjC style fast dynamic dispatch)\r\n\r\nEither @static or @dynamic would obviously be default. Swift could decide depending on what annotations are present if the class is registered with objc or not.\r\n\r\n@exported (@objc) on the class would only determine if the class is exported to ObjC or not.\r\nAlternatively, everything is exported by default and you need to annotate with @internal in order to hide it from ObjC"
    email: christoffer@aegik.com
    modified: "2014-06-18T12:56:52.509331Z"
    number: "17359090"
    number_intvalue: 17359090
    originated: 18-Jun-2014 02:54 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Version 6.0 (6A216f)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift: Allow dynamic dispatch on structs/swift objects'
