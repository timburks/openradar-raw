apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17207279"
    labels:
        datastore_id: "5837161337192448"
data:
    classification: Usability/UI
    created: "2014-06-06T22:38:27.294774Z"
    description: "F# provides a standard binary operator |>, the \"pipe-forward\" operator, which applies the function on its right-hand side to the value on its left-hand side. The operator can be defined in Swift like this:\r\n\r\n    operator infix |> { associativity left }\r\n    func |> <T,U>(lhs : T, rhs : T -> U) -> U {\r\n        return rhs(lhs);\r\n    }\r\n\r\nThis operator provides benefits both in readability and in IDE autocompletion support. For example, one can write an expression like this:\r\n\r\n    let rows = resultCollection |>  filterBy(selectedCityName) |> orderBy(selectedColumn)\r\n\r\ninstead of in traditional inside-out/right-to-left function application notation, which would be this:\r\n\r\n    let rows = orderBy(selectedColumn)(filterBy(selectedCityName)(resultCollection))\r\n\r\nThe left-to-right version would be more readable to most people.\r\n\r\nWhen the user types the argument first, and then the |> operator, Xcode could then determine which functions are available that can be applied to an argument of that type and provide an appropriate autocompletion list. This is helpful.\r\n\r\nThis operator was created for F#, but is also in the Ocaml Batteries Included library and used elsewhere. If Swift provides such an operator, it would be nice to use the same notation used in other languages.\r\n\r\nSee https://gist.github.com/kristopherjohnson/ed97acf0bbe0013df8af for additional examples and commentary."
    email: kristopherdjohnson@gmail.com
    modified: "2014-06-07T00:10:45.416193Z"
    number: "17207279"
    number_intvalue: 17207279
    originated: 06-Jun-2014 06:36 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: "6"
    reproducible: N/A
    resolved: ""
    status: Open
    title: Add F#-style pipe-forward (|>) operator and auto-complete to Swift Standard Library and Xcode
