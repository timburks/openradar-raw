apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17347240"
    labels:
        datastore_id: "5828112914841600"
data:
    classification: Security
    created: "2014-06-17T20:00:01.180346Z"
    description: "This is a duplicate of rdar://17265500\r\n\r\nAs documented in the Swift Programming Guide, Array is supposed to act like a value type, except when it doesn't. This adds a weird corner case to the language and will no doubt prove a source of all kinds of wonderful bugs.\r\n\r\nCurrently this is how it works:\r\n\r\nlet a = [1, 2, 3]\r\nvar b = a\r\nb[1] = 5\r\na  // [1, 5, 3]\r\n\r\nb.append(4)\r\na  // [1, 5, 3]\r\nb  // [1, 5, 3, 4]\r\n\r\nThe array is not copied unless its length changes. \r\n\r\nThis behavior also exists when the array is part of another value type:\r\n\r\nstruct Yummie {\r\n  var a = [1, 2, 3]\r\n}\r\n\r\nvar x = Yummie()\r\nvar y = x\r\ny.a[1] = 5\r\nx.a  // [1, 5, 3]\r\n\r\nThis behavior is really hard to reason about. \r\n\r\nIt is more reasonable to assume that doing var b = a makes a real copy. The unshare() function should not need to exist, and unsharing should happen automatically behind the scenes when an array is placed into a new variable.\r\n\r\nThe current behavior of Array seems to have been designed only with runtime efficiency in mind, not with how human beings think."
    email: jason.sadler@gmail.com
    modified: "2016-06-14T02:28:16.2447Z"
    number: "17347240"
    number_intvalue: 17347240
    originated: 17-Jun-2014 03:59 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 6 beta 1
    reproducible: Always
    resolved: ""
    status: Closed
    title: 'Swift: Copying behavior of arrays is confusing'
