apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17501298"
    labels:
        datastore_id: "6406475358404608"
data:
    classification: Enhancement
    created: "2014-06-30T03:06:30.850452Z"
    description: |-
        Summary:
        switch/case could use a pattern matching protocol to provide destructuring pattern matching for arbitrary types. For example:

        protocol PatternMatchable {
        	typealias Pattern
        	func destructure() -> Pattern
        }

        struct PatternMatchableThing {
        	let name: String
        	let homeworld: String
        	
        	func destructure() -> Pattern {
        		return (name, homeworld)
        	}
        }

        switch patternMatchableThing {
        case PatternMatchableThing(name, homeworld):
        	println("\(name) comes from \(homeworld)")
        }


        Steps to Reproduce:
        N/A


        Expected Results:
        N/A


        Actual Results:
        N/A


        Regression:
        N/A


        Notes:
        I’m attempting to workaround this with the above-defined protocol and explicitly calling it; I don’t get nice type-matching syntax, but I’m hopeful that it can be made to work.
    email: rix.rob@gmail.com
    modified: "2014-06-30T03:06:30.850629Z"
    number: "17501298"
    number_intvalue: 17501298
    originated: 29-Jun-2014 11:06 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode6-Beta2 (6A216f)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift: switch/case destructuring pattern matching for arbitrary types'
