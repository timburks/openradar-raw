apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17279012"
    labels:
        datastore_id: "5346197183135744"
data:
    classification: Enhancement
    created: "2014-06-12T06:18:47.149884Z"
    description: "Please consider supporting the mutating construct that is already supported for structs onto classes. This will provide us with everything we need to create truly const classes as well as avoid the unfortunate pseudo-constant struct/class composition problems.\r\n\r\nAs an example, see this program:\r\nclass CPerson {\r\n    var name : String\r\n    init(name : String) { self.name = name }\r\n}\r\n\r\nstruct SPerson {\r\n    var age : Int\r\n    var person : CPerson\r\n    mutating func haveBirthday() {\r\n        println(\"Happy birthday!\")\r\n        age++\r\n    }\r\n}\r\n\r\nlet david = SPerson(age: 32, person: CPerson(name: \"David\"))\r\nvar frank = SPerson(age: 35, person: CPerson(name: \"Frank\"))\r\n\r\n//david.age = 23             // compiler error, as it should\r\ndavid.person.name = \"Sally\"  // this SHOULD be a compiler error, but classes do not support 'mutating' or const in general\r\ndavid.person.name            // prints \"Sally\"\r\n\r\nfrank.age = 23\r\nfrank.person.name = \"David\"\r\nfrank.person.name   // prints \"David\"\r\n\r\nIf classes supported mutating, the let keyword would provide const protection down the members of the struct avoiding being able to change the underlying values of the struct."
    email: owensd@kiadsoftware.com
    modified: "2014-06-12T06:18:47.150011Z"
    number: "17279012"
    number_intvalue: 17279012
    originated: 11-Jun-2014 04:55 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift: support mutating construct for classes'
