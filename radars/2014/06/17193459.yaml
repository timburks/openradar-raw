apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17193459"
    labels:
        datastore_id: "5000424398520320"
data:
    classification: Feature
    created: "2014-06-06T06:45:02.09044Z"
    description: "Summary:\r\nThere is no way in Swift to express \"a class whose generic parameter type is a supertype of a specified type\". That is, something like \"MyGenericClass<MySubtype : T>\", where MySubtype is a concrete type and T is a generic supertype.\r\n\r\nThis is important when defining generic, custom data structures and writing to them. In the example below, the custom data structure is an animal Pen. It is safe to add a Cat to either a Pen<Animal> or Pen<Cat>, but there is no way to express \"Pen<T where T is a supertype of Cat>\"\r\n\r\nSteps to Reproduce:\r\nRun this program:\r\n\r\nclass Animal {}\r\n\r\nclass Cat : Animal {}\r\n\r\nclass Pen<T> {\r\n    var animals: T[]\r\n\r\n    init() {\r\n        animals = T[]()\r\n    }\r\n\r\n    func addAnimal(animal: T) {\r\n        animals.append(animal)\r\n    }\r\n\r\n    func allAnimals() -> T[] {\r\n        return animals\r\n    }\r\n}\r\n\r\nfunc herdCat<Cat : T>(cats: Pen<T>) {  // error; potential syntax\r\n    cats.addAnimal(Cat())\r\n}\r\n\r\nvar cats = Pen<Cat>()\r\nherdCat(cats)\r\n\r\nExpected Results:\r\nThe program should compile (perhaps with different syntax).\r\n\r\nActual Results:\r\nThe program does not compile because \"<Cat : T>\" is not valid."
    email: ide@jameside.com
    modified: "2014-08-10T23:03:23.703529Z"
    number: "17193459"
    number_intvalue: 17193459
    originated: 05-Jun-2014
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 6 b1
    reproducible: N/A
    resolved: ""
    status: Open (duplicate of 17318803)
    title: 'Swift: contravariant generic types'
