apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17302402"
    labels:
        datastore_id: "5897455161835520"
data:
    classification: Enhancement
    created: "2014-06-13T15:30:24.672365Z"
    description: "Summary:\r\nThe Swift book describes the concept of \"type properties\", as opposed to instance properties. A type property is a property of a class, or a struct. When it's the property of a class, it is identified with the keyword \"class\". When it is the property of a struct, it is identified with the keyword \"static\".\r\n\r\nI'd like to suggest that a type property always be identified with the keyword \"type\".\r\n\r\nWhy? One reason is clarity. \"static\" is a bad choice because it's a weird C vestige describing storage duration, which is out of place in Swift's ARC-based memory model. \"class\" is a bad choice because it is only accurate for class types. \"type\" is a good choice because these are, as the language spec itself says, \"type properties\"!\r\n\r\nAnother reason is pragmatic. Right now, if you want to change a struct into a class (or vice versa), you need to perform a pointless search and replace swapping static for class (or vice versa). If both classes and structs just used the keyword \"type\", then you would not have to make this change.\r\n\r\nSteps to Reproduce:\r\n1. Define a struct with some type properties\r\n2. Make it into a class instead\r\n\r\nExpected Results:\r\nIn simple cases, I only need to replace \"struct\" with \"class\"\r\n\r\nActual Results:\r\nI need to go and replace the counter-intuitive keyword \"static\" with another keyword \"class\"\r\n\r\nVersion:\r\nXcode6-Beta\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:\r\nXcode6-Beta\r\n\r\nAttachments:"
    email: alexisgallagher@gmail.com
    modified: "2014-06-13T15:30:24.672551Z"
    number: "17302402"
    number_intvalue: 17302402
    originated: "2014-06-13"
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode6-Beta
    reproducible: ""
    resolved: ""
    status: Open
    title: In Swift, type properties should be identified with the "type" keyword
