apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17412596"
    labels:
        datastore_id: "5275533159956480"
data:
    classification: Serious Bug
    created: "2014-06-23T03:59:26.930193Z"
    description: "Summary:\r\nIn the sample code attached, there is a function `ALOperand.equalTo()` that is overloaded. 2 versions of `equalTo()` are defined: one that expects an `ALOperand` as its argument, and one that expects a `CGFloat`. In the method `SwiftAutoLayoutTests.testRelationsWithoutSecondView()`, it uses the overloaded `==` operator, which is intended to call the version of `equalTo` that expects a `CGFloat` but ends up calling the one that expects an `ALOperand` instead, causing an EXC_BAD_ACCESS crash at runtime.\r\n\r\nSteps to Reproduce:\r\n1. Run the test method `testRelationsWithoutSecondView()` in SwiftAutoLayoutTests\r\n2. Wait for it to crash with EXC_BAD_ACCESS\r\n3. Go through the stack trace and note that it is calling the `equalTo()` function that accepts an `ALOperand` as an argument instead of a `CGFloat`\r\n\r\nExpected Results:\r\nCalls the `equalTo()` function that expects a `CGFloat` as an argument.\r\n\r\nActual Results:\r\nCalls the `equalTo()` function that expects an `ALOperand` as an argument, resulting in a crash.\r\n\r\nVersion:\r\nOS X 10.10 (14A261i), Xcode 6.0 (6A216f)\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:\r\n\r\n\r\nAttachments:\r\n'SwiftAutoLayout.zip' was successfully uploaded."
    email: indragiek@gmail.com
    modified: "2014-06-23T03:59:26.930392Z"
    number: "17412596"
    number_intvalue: 17412596
    originated: 22-Jun-2014
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: OS X 10.10 (14A261i), Xcode 6.0 (6A216f)
    reproducible: Always
    resolved: No
    status: Open
    title: 'Swift: compiler chooses function overload with the wrong type'
