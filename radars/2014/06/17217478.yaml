apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17217478"
    labels:
        datastore_id: "6118636313903104"
data:
    classification: Enhancement
    created: "2014-06-07T19:52:19.886324Z"
    description: |-
        The most common implementation of an object that conforms to `Generate` is so generic, I can’t help but feel that it should be included in the standard library. As far as I can tell, this implementation should work 90% of the time:

        ```
        struct CollectionGenerator<T>: Generator {
            var items: Slice<T>

            mutating func next() -> T? {
                if items.isEmpty { return nil }
                let ret = items[0]
                items = items[1..items.count]
                return ret
            }
        }
        ```

        This code is ripped almost verbatim from the Advanced Swift session video.

        Steps to Reproduce:
        When implementing `Sequence`, look for a basic object to use that conforms to `Generate`.

        Expected Results:
        An object is provided that handles the most common use case

        Actual Results:
        An object can’t be found, leading me to writing (or duplicating) code.
    email: gordon@thoughtbot.com
    modified: "2014-06-07T19:52:19.886505Z"
    number: "17217478"
    number_intvalue: 17217478
    originated: 07-Jun-2014 12:52 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: "1"
    reproducible: Always
    resolved: ""
    status: Open
    title: Swift should provide a generic CollectionGenerator<T> struct to use when implementing Sequence
