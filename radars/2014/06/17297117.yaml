apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17297117"
    labels:
        datastore_id: "4935877482512384"
data:
    classification: Enhancement
    created: "2014-06-13T03:40:46.601659Z"
    description: |-
        Summary:
        In 2014, a lot of our software tries to “cleverly” fix our text as we type it: swapping dumb quotes for smart quotes, turning runs of dots into ellipsis characters, converting two dashes into an em-dash, and so on. Swift should recognize these common conversions and transparently undo them, treating them as their ASCII equivalents.

        Steps to Reproduce:
        1. Open an Xcode window.

        2. Paste in the following (note the character at the end of the signature is an ellipsis, not three periods):

            func sum(xs: Int…) -> Int { return reduce(xs, 0) { sum, num in sum + num } }

        Expected Results:
        Swift compiles the code without trouble.

        Actual Results:
        Swift emits a compiler error, indicating a comma was expected before the ellipsis. (Curiously, it keeps emitting this error no matter how many commas you insert.)

        Notes:
        The quotation marks around “cleverly” in the first paragraph are smart quotes. Did you notice?

        Ideally, this would not be a matter of defining aliases for operators; Swift would simply transparently replace these characters during lexing, unless they’re found in a string literal. A good starting point to come up with a list of characters to treat this way would be OS X’s own Text tab in the Keyboard preference pane.

        You might be tempted to try to make string parsing require matching smart quotes—left quote at the beginning, right quote at the end—but I wouldn’t bother. Automatic smart quote algorithms are fairly mistake-prone, particularly when combined with the ungrammatical punctuation seen in code.
    email: brent@architechies.com
    modified: "2014-06-13T03:40:46.601774Z"
    number: "17297117"
    number_intvalue: 17297117
    originated: 12-Jun-2014 08:40 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode6-Beta (6A215l)
    reproducible: Always
    resolved: ""
    status: Open
    title: Swift should treat common Unicode substitutions as their ASCII equivalents
