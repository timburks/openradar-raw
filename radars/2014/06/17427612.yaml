apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17427612"
    labels:
        datastore_id: "4515036185755648"
data:
    classification: Serious Bug
    created: "2014-06-23T23:34:16.054663Z"
    description: |-
        Summary:
        The lack of conditional compilation makes it more difficult to implement common debugging idioms such as logging in debug builds. For example, it isn’t clear how one would implement Swift.assert without this.


        Steps to Reproduce:
        1. Try to write an inline unit testing library.


        Expected Results:
        I expected (hoped) to find an easy, obvious, and well-documented way to exclude unit test cases from release builds.


        Actual Results:
        I realized that although I can definitely add tests, and I can probably even run them, it’s rather more difficult to see how to ensure they get compiled out of release builds.


        Regression:
        N/A


        Notes:
        It may be that this is possible to ensure via linker flags or some such. If so, I’d sure like to know about it :) My project Lagrangian ( https://github.com/robrix/Lagrangian ) looks like it should adapt very elegantly to Swift despite the lack of macros, due primarily to Swift’s function & operator overloading (and possibly a bit to reflect()/Mirror, but I doubt I’ll even need that). This appears to be the only missing ingredient—colour me delighted!
    email: rix.rob@gmail.com
    modified: "2014-06-23T23:34:16.054847Z"
    number: "17427612"
    number_intvalue: 17427612
    originated: 23-Jun-2014 07:34 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode6-Beta2 (6A216f)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift: Lack of conditional compilation makes common debugging idioms more difficult'
