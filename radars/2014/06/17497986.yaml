apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17497986"
    labels:
        datastore_id: "5247246505345024"
data:
    classification: Feature (New)
    created: "2014-06-29T05:00:02.885631Z"
    description: "Summary:\nDiscussion on the developer forums indicated that the recommended singleton pattern in Swift is to simply declare a class constant, and, if the object might be encoded using NSCoding, use awakeAfterUsingCoder to replace it:\n\n    class Foo {\n        class let sharedFoo = Foo()    // once class vars are supported; there are getter-based workarounds too\n        \n        func awakeAfterUsingCoder(aDecoder: NSCoder!) -> AnyObject! {\n            return Foo.sharedFoo\n        }\n    }\n\nThis pattern is not discussed in any documentation. I believe it should be.\n\nSteps to Reproduce:\n1. Search “The Swift Programming Language” for the word “singleton”.\n\nExpected Results:\nA section discussing how singletons should be implemented in Swift, and how this pattern may or may not differ from Objective-C’s techniques.\n\nActual Results:\nNo such section is included.\n\nNotes:\nI’m not a huge fan of allowing multiple instances of a singleton to be allocated in any way, but the pattern mentioned above is at least acceptable. However, it’s not an obvious thing to do, and it’d be helpful if the documentation pointed it out."
    email: brent@architechies.com
    modified: "2014-06-29T05:00:02.88579Z"
    number: "17497986"
    number_intvalue: 17497986
    originated: 28-Jun-2014 09:59 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode6-Beta2 (6A216f)
    reproducible: Always
    resolved: ""
    status: Open
    title: Swift singleton pattern is not documented
