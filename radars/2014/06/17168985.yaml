apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17168985"
    labels:
        datastore_id: "5008576246448128"
data:
    classification: Performance
    created: "2014-06-05T04:24:03.223195Z"
    description: "// relative timing of loops in Swift REPL\r\n\r\nimport Cocoa\r\n\r\nfunc timetask(task: () -> ()) -> Double {\r\n\tlet t1 = CFAbsoluteTimeGetCurrent()\r\n\ttask()\r\n\tlet t2 = CFAbsoluteTimeGetCurrent()\r\n\tprintln(\"Took \\(t2-t1) s\")\r\n\treturn Double(t2-t1)\r\n}\r\n\r\ntimetask { for var i = 0; i < 1000000; ++i { } }\r\n// Took 0.0195080041885376 s\r\n\r\ntimetask { for var i = 0; i < 1000000; i += 1 { } }\r\n// Took 0.0038759708404541 s\r\n\r\ntimetask { var i = 0; for i in 0..1000000 { } }\r\n// Took 3.78008300065994 s\r\n\r\nSummary:\r\nfor..in with a range takes 1260x longer than an Int loop using += 1. The equivalent Objective-C looping through an NSRange would be nearly as fast as an int loop.\r\n\r\nRelated: ++i is 6.5x slower than i += 1.\r\n\r\nUnrelated: The syntax `for var i in 0..1000000` does not work, but `for var i = 0; i < 1000000; i += 1` does."
    email: kamikaze.mark@gmail.com
    modified: "2014-06-05T04:24:03.223355Z"
    number: "17168985"
    number_intvalue: 17168985
    originated: "2014-06-04"
    parent_number: '&{NULL_VALUE}'
    product: OS X SDK
    product_version: Xcode 6 beta
    reproducible: Always
    resolved: ""
    status: Open
    title: Swift for loops exhibit poor performance
