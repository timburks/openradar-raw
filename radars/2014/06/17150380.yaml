apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17150380"
    labels:
        datastore_id: "5794778599915520"
data:
    classification: ""
    created: "2014-06-04T15:04:46.670611Z"
    description: "Summary:\r\nArrays created with \"let\" should not allow their elements to change. Doing so breaks the principle of least surprise and is likely to cause bugs in concurrent code.\r\n\r\nSteps to Reproduce:\r\n1. Open an Xcode playground.\r\n2. Type the following:\r\n\r\n        let array = [\"a\"]\r\n        array[0] = \"b\"\r\n\r\nExpected Results:\r\nA \"Cannot assign to the result of this expression\" error.\r\n\r\nActual Results:\r\nThe array is mutated.\r\n\r\nVersion:\r\nXcode 6A215l, swift-600.0.34.4.5\r\n\r\nNotes:\r\nI understand that Swift can perform optimizations on semi-mutable arrays that it can't perform on fully mutable ones.\r\n\r\nBut that doesn't mean you should overload \"let\"—which for all other struct types means \"this is immutable\"—to indicate an array is semi-mutable. When I pass an immutable array to another function—or, God forbid, to a block on another queue—I need to be able to trust that the array won't change behind my back.\r\n\r\nAnd importantly, rdar://17136760 is wrong: the Swift book says you *can't* call `unshare()` on constant arrays. That leaves *no way* to use constant arrays safely in Swift."
    email: chris@chrisdzombak.net
    modified: "2016-01-07T16:36:53.93269Z"
    number: "17150380"
    number_intvalue: 17150380
    originated: 04-Jun-2014
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 6A215l, swift-600.0.34.4.5
    reproducible: Always
    resolved: 10-Jun-2014
    status: 'Closed: Duplicate of 17192555'
    title: Swift
