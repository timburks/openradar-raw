apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17129390"
    labels:
        datastore_id: "5773638368231424"
data:
    classification: Feature (new)
    created: "2014-06-03T21:32:01.761827Z"
    description: "Apple's response:\r\n\r\nWe made a very conscious decision not to do this.  The savings is very trivial compared to the loss of clarity.\r\n\r\n###\r\n\r\nSummary:\r\nClosures in Swift allow an implicit return if the body is a single expression. In multiline closures and named functions, the `return` keyword is currently required. This doesn't seem necessary.\r\n\r\nSteps to Reproduce:\r\n1. Write a function like this:\r\nfunc square(val: Int) -> Int {\r\n  val * val\r\n}\r\n2. Or write a closure like this (wrapped in the \"addSome\" function for demonstration purposes only):\r\nfunc addSome(addend: Int) -> (Int -> Int) {\r\n  return {(val: Int) -> Int in\r\n    let foo = \"bar\"\r\n    val + a\r\n  }\r\n}\r\n\r\nExpected Results:\r\nBoth functions should compile correctly.\r\n\r\nActual Results:\r\nIn example 1, we receive a \"Missing return in a function expected to return 'Int'\" compiler error, and in example 2, we receive a \"Missing return in a closure expected to return 'Int'\" compiler error.\r\n\r\nVersion:\r\nXcode 6.0 beta (6A215I)\r\n\r\nNotes:\r\nBasically, I feel that the `return` keyword is unnecessary in many cases. It doesn't need to be removed from the language, as it's useful for short-circuiting in edge cases (as one example), but it shouldn't be needed in normal usage."
    email: listrophy@gmail.com
    modified: "2014-06-06T20:01:14.888644Z"
    number: "17129390"
    number_intvalue: 17129390
    originated: 6/3/2014
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: Always
    resolved: WONTFIX
    status: Closed
    title: Allow implicit returns in all functions in Swift
