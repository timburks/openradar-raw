apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17301343"
    labels:
        datastore_id: "5278790892650496"
data:
    classification: ""
    created: "2014-06-13T13:19:38.160267Z"
    description: "Accessing an object's own properties and methods should require prefixing with \"self.\" The current implicit addition of self makes code more difficult to understand and maintain.\r\n\r\nWhen faced with a line of code like:\r\n\r\n    speed = speed + acceleration\r\n\r\nIt is very unclear that this line may involve up to three function calls, and that the value of speed after this executes may not equal speed+acceleration (consider the case of SpeedLimitedCar from The Swift Programming Guide).\r\n\r\nIf this were explicit:\r\n\r\n    self.speed = self.speed + acceleration\r\n\r\nThen you would know that there may be implicit functions hiding in this statement.\r\n\r\nSimilarly, faced with a line like\r\n\r\n    sort(myElements)\r\n\r\nIt is very unclear whether this refers to the stdlib function sort, or to an implicit self.sort(). In the presence of subclasses, this can become even more confusing.\r\n\r\nMethod calls in ObjC have always required self, and best practice for accessing properties in ObjC is to use self. Swift should continue this practice.\r\n\r\n\r\n<strike>In the initializer, self should not be allowed, since the initializer directly accesses properties and does not use accessors. This makes the difference between initializers and methods clear.</strike>\r\n\r\n---\r\n\r\nAmended: Having written more Swift code, I would amend this Radar to say that self. should be required in init() as well.\r\n\r\n---\r\n\r\nSome additional confusions that come when self is not required:\r\n\r\nhttps://gist.github.com/rnapier/4213dc64206b17df6935\r\nhttps://gist.github.com/rnapier/478465d1b15e95b98b42\r\n\r\nIt is very easy to create spooky action at a distance when methods call functions if self is not required to indicate methods. Since Swift encourages the use of extensions for implementing various kinds of functionality, it is even more likely that these kinds of collisions will occur, and as shown, sometimes with non-deterministic results depending on how things compile. Unlike method/extension conflicts, the compiler cannot easily detect method/function conflicts.\r\n\r\n---\r\n\r\nUpdated radar to indicate a new syntax:\r\n\r\nself.x should be equivalent to .x rather than just x. This would fit in with enum syntax and would clear up the ambiguity."
    email: robnapier@gmail.com
    modified: "2014-07-27T14:09:39.098061Z"
    number: "17301343"
    number_intvalue: 17301343
    originated: 13-Jun-2014 09:18 AM
    parent_number: '&{NULL_VALUE}'
    product: Swift SDK
    product_version: ""
    reproducible: ""
    resolved: ""
    status: ""
    title: self should be mandatory in Swift
