apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17304784"
    labels:
        datastore_id: "5821073463443456"
data:
    classification: ""
    created: "2014-06-13T19:31:35.740594Z"
    description: "One of Swift's more powerful features is operator overloading. It is clear from studying the language and its standard library that operator overloading is key to making much of the language work. Unfortunately, over a decade of experience with crafting and maintaining C++ code has taught me that it is a power best reserved for the authors of the system libraries. \r\n\r\nThis is more than a nit. Giving \"everyday\" programmers the power to overload operators invariably leads to poorly considered difficult to maintain code. True, the intention is to allow more straightforward APIs to things like vector and matrix math libraries, but even within that case operator overloading can be and frequently is abused.\r\n\r\nA very common and simple example from C++, overloading the * operator for vectors:\r\n\r\nresult = vectorA * vectorB;\r\n\r\nInitially, this looks fine, but... What operation is actually taking place here? The cross product or the dot product? You can't tell without further investigation - is result a vector type or a scalar type? And so on. And this is an example of what is typically considered a sane, sensible use of operator overloading. \r\n\r\nSwift's operator overloading is more flexible and powerful than C++'s, and the above example could probably be expressed in a better, more readable way with Swift, but that isn't the point. As long as programmers have the ability to overload operators, there will always be ambiguity (for the programmer) about what an operator does at each site where it is used. And with the added flexibility of Swift's operator overloading comes more ambiguity, not less. Swift programmers will quickly find themselves wondering what the heck their colleagues intended when encountering the inevitable questionable use of some operator overload.\r\n\r\nNow, consider how this might be done without operator overloading:\r\n\r\nresult = cross(vectorA, vectorB)\r\n\r\nor perhaps (though I wouldn't recommend it):\r\n\r\nresult = vectorA.cross(vectorB) \r\n\r\nIn these cases, the intent of the original programmer is clear the moment you lay eyes on it. There is no ambiguity - this is calculating the cross product of two vectors. It may take 0.5 seconds longer to type (less, probably, with modern code completion) but will save significantly more time during future maintenance.\r\n\r\nThe desire to be terse is incompatible with the goal of writing lasting, maintainable code.\r\n\r\nPlease consider reserving the use of operator overloading to the authors of the system library. Programmers tasked with updating and maintaining other peoples' code (where \"other people\" includes themselves six months prior) will thank you.\r\n\r\nSteps to Reproduce\r\nN/A\r\n\r\nExpected Results\r\nN/A\r\n\r\nActual Results\r\nN/A\r\n\r\nConfiguration\r\nAny\r\n\r\nXcode Version\r\nXcode 6 Beta 1\r\n\r\nAdditional Notes"
    email: amolloy@gmail.com
    modified: "2014-07-08T22:16:43.127028Z"
    number: "17304784"
    number_intvalue: 17304784
    originated: 6/13/14
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: ""
    resolved: As Intended
    status: Closed
    title: '[Swift] Disallow operator overloading outside of system libraries'
