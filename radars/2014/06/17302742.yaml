apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17302742"
    labels:
        datastore_id: "6339579095285760"
data:
    classification: ""
    created: "2014-06-13T15:58:51.094093Z"
    description: "Summary:\r\nAccessing an object's own properties and methods should require prefixing with \"self.\" The current implicit addition of self makes code more difficult to understand and maintain.\r\n\r\nConsider a class like\r\n\r\n   class Foo {\r\n     var a:String = \"Bob\"\r\n     func printInfo(a:String) -> () { \r\n       println(a) \r\n     }\r\n   }\r\n\r\nWhen looking at the line \"println(a)\" in isolation, it is not self-evident if I am accessing self.a or the local argument a, which shadows it. \r\n\r\nSimilarly, faced with a line like\r\n\r\n    sort(myElements)\r\n\r\nIt is unclear whether this refers to the stdlib function sort, or to an implicit self.sort(). In the presence of subclasses, this can become even more confusing.\r\n\r\nMethod calls in ObjC have always required self, and best practice for accessing properties in ObjC is to use self. Swift should continue this practice.\r\n\r\nIn addition, I would suggest that explicit self is even *more* valuable in Swift than in ObjC, because Swift has many features which will make it more likely that people will define functions, variables, and constants in the top-level scope, outside of type definitions. I'm thinking of namespaces, its support for directly running .swift files, its REPL, and general support for functional programming idioms (where generic top-level functions typically act on objects, as opposed to being narrowly scoped as methods).\r\n\r\nWhen people define more functions identifiers at the top-level, it becomes more crucial that code distinguish between top-level identifiers and type-scoped identifiers.\r\n\r\nSteps to Reproduce:\r\n1. define a type with a property and/or method\r\n2. access the property and/or method\r\n\r\nExpected Results:\r\n3. I use a \"self.\" prefix to access the property and/or method\r\n\r\nActual Results:\r\n3. I can implicitly access the property and/or method\r\n\r\nVersion:\r\nXcode6-Beta\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:\r\nalways\r\n\r\nAttachments:"
    email: alexisgallagher@gmail.com
    modified: "2014-06-13T15:58:51.094257Z"
    number: "17302742"
    number_intvalue: 17302742
    originated: "2014-06-13"
    parent_number: '&{NULL_VALUE}'
    product: Swift SDK
    product_version: Xcode6-Beta
    reproducible: ""
    resolved: ""
    status: Open
    title: In Swift, "self" should be mandatory for accessing instance members
