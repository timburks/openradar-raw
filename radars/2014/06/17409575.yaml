apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17409575"
    labels:
        datastore_id: "6065828617256960"
data:
    classification: Feature (New)
    created: "2014-06-22T02:22:09.210411Z"
    description: "Summary:\nThe HKUnit and HKQuantity classes in HealthKit have the potential to be extremely useful in non-health-related applications. They should be moved to Foundation and enhanced to allow use in a wider variety of applications. The new NSUnit should be extended to allow additional units and types of units to be added by developers, and NSQuantity should allow 64-bit integer and NSDecimal representations in addition to doubles.\n\nSteps to Reproduce:\n1. Open a Playground and input something like:\n\n    import Foundation\n    \n    let inches = NSUnit.inchesUnit()\n    let centimeters = NSUnit.meterUnitWithMetricPrefix(.Centi)\n    \n    let rulerLength = NSQuantity(unit:inches doubleValue:12.0)\n    println(\"\\(rulerLength.doubleValueForUnit(centimeters)) cm\")\n\nExpected Results:\nThe output “30.48 cm”.\n\nActual Results:\nA variety of compiler errors.\n\nNotes:\nReasoning about units is a common thing for apps to do. Even leaving aside app-specific concerns, we see this within the frameworks themselves:\n\n* Core Location uses meters to measure distance, but many users want them displayed in Imperial units.\n* Core Location and NSBezierPath use degrees to measure angles, but UIBezierPath and CGPath use radians.\n* Most time-related APIs use NSTimeInterval’s floating-point seconds representation, but some use microseconds or nanoseconds.\n* Data size APIs use integer numbers of bytes—sometimes extremely large numbers.\n\nThe frameworks use a variety of approaches to handle these mismatches. MKDistanceFormatter and NSByteCountFormatter handle conversions internally, but other formatters do not. For time, you must usually multiply or divide by an appropriate constant. For degrees and radians, you must memorize a small formula to use at appropriate points.\n\nHealthKit contains the beginnings of a solution: a pair of classes that allow the programmer to work with units in a simple way, without having to memorize anything or use a formatter intended for end users. At first glance, they even seem to support dimensional analysis, which has the potential to expose unit errors when programming. I think these classes should be hoisted out of HealthKit and into Foundation, where they can benefit all sorts of code, not just health apps."
    email: brent@architechies.com
    modified: "2014-06-22T02:22:09.21059Z"
    number: "17409575"
    number_intvalue: 17409575
    originated: 21-Jun-2014 07:22 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode6-Beta2 (6A216f)
    reproducible: Always
    resolved: ""
    status: Open
    title: HKUnit and HKQuantity should be moved to Foundation
