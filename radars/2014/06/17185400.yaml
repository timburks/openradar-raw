apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17185400"
    labels:
        datastore_id: "6303508886192128"
data:
    classification: Enhancement
    created: "2014-06-05T21:39:23.997473Z"
    description: "(Caveat: I have not yet implemented anything significant in Swift)\r\n\r\nI think Swift could do with making more of the parenthesis and commas optional except when absolutely needed and for that style to become the official “Swift Style.” I think it would feel a lot cleaner (to me and probably others).\r\n\r\nI’ve also noticed that it seems to be “Swift Style” to put spaces after colons on named parameters. I feel as if this is wrong as it creates a visual separation between the label for the value and what the value actually is. In my mind, the label/name for a parameter is an annotation added to the value. I consider the name of the parameter almost as if it were wrapping an aspect or trait around the value itself before sending it off to the method. It’s as if I am saying, “In this context, this value is a ‘width’.” Personally, I think it should be a syntax error to have a space between the name and the value - but maybe that’s just me!\r\n\r\nHere’s some examples for how I’d transform the syntax:\r\n\r\n// Swift\r\nvar containerView = UIView(frame: (CGRect(x: 0, y: 0, width: 100, height: 200)))\r\ncontainerView.addSubview(resultView)\r\ncontainerView.insertSubview(backgroundView, atIndex: 0)\r\nresultView.value = pow(sqrt(42), 2)\r\n\r\n\r\n// MySwift\r\nvar containerView = UIView frame:(CGRect x:0 y:0 width:100 height:200)\r\ncontainerView.addSubview resultView\r\ncontainerView.insertSubview backgroundView atIndex:0\r\nresultView.value = pow (sqrt 42) 2\r\n\r\n\r\nI haven’t thought this all the way through, of course, but not only is this syntax shorter in places, but it doesn’t have nearly as much visual noise (IMO) with the parenthesis and commas floating around. Parenthesis now have only two purposes - to group units of thought, and to declare order of operation.\r\n\r\nFunction application becomes the default “action” at the start of every statement with parameters separated by spaces (even control-flow constructs like “if” or “for” would look and feel a lot like normal functions as a result).\r\n\r\nFor functions with unnamed parameters (such as pow), commas could be optional if they might help visually communicate that multiple parameters are being chained together:\r\n\r\nresultView.value = pow (sqrt 42), 2\r\n\r\n\r\nYou could even continue to write code in the more “familiar” way with this approach because the parens are only grouping constructs and don’t carry any other implicit meaning for function application, so you can add them anywhere, really:\r\n\r\nresultView.value = pow (sqrt (42), 2)\r\n\r\n\r\nAnd of course assuming the spacing wasn’t enforced, you end up with traditional syntax:\r\n\r\nresultView.value = pow(sqrt(42), 2)\r\n\r\n\r\nOr even wrap the all functions in parens all the time if you like LISP and/or miss Objective-C’s groupings of things together:\r\n\r\nresultView.value = (pow (sqrt 42) 2)\r\n(containerView.insertSubview backgroundView atIndex:0)\r\n\r\n\r\nAnother advantage is that custom control-flow constructs would then look exactly like the ones built into the language itself. It was demonstrated a few times during WWDC sessions how you can add extensions to classes or structures and create what amount to custom control-flow, but current Swift syntax is such that your custom control flow will never feel as natural as the built in control flow because you cannot omit some of the parenthesis. Let’s say we have a function named “repeat” which takes a block and it will call the block the given number of times:\r\n\r\nrepeat(42, { /* block */ })\r\n\r\n\r\nYou can also write it like this which is looking very close to control-flow:\r\n\r\nrepeat(42) { /* block */ }\r\n\r\n\r\nBut it’s not *quite* control-flow because it looks like this with built-in control-flow:\r\n\r\nfor 0..42 { /* block */ }\r\n\r\n\r\nSo, if you dropped the parenthesis for function calls, the repeat function could in fact end up looking just like it:\r\n\r\nrepeat 42 { /* block */ }\r\n\r\n\r\nI find that highly appealing!\r\n\r\nIf you have a function which takes no parameters and you want to call it, then to distinguish between actually calling it vs. referencing it, you add an old-fashioned semicolon to the end (which would be optional whenever you have a function with parameters):\r\n\r\nresultsView.layoutIfNeeded;\r\n\r\n\r\nWhereas if this appeared on it’s own, it would just be a reference to the function layoutIfNeeded and would generate an error:\r\n\r\nresultsView.layoutIfNeeded\r\n\r\n\r\nHowever this would work and call the layoutIfNeeded function on the resultsView 42 times:\r\n\r\nrepeat 42 resultsView.layoutIfNeeded\r\n\r\n\r\nAnd this would be potentially ambiguous, but is probably solvable by messing with the precedence of the semicolon so that it would do the same as the above line:\r\n\r\nrepeat 42 resultsView.layoutIfNeeded;\r\n\r\n\r\nWhereas this would be an error because layoutIfNeeded doesn’t return a block:\r\n\r\nrepeat 42 resultsView.layoutIfNeeded;;\r\n\r\n\r\nEtc. etc. Anyway, I think it’s worth considering this. Perhaps you already have - but I really dislike the idea of trading one kind of visual noise (square brackets everywhere) for another (parenthesis and commas and unattached named parameter labels everywhere).\r\n\r\nThanks for listening. :)"
    email: bigzaphod@gmail.com
    modified: "2014-06-05T21:39:23.997597Z"
    number: "17185400"
    number_intvalue: 17185400
    originated: June 5, 2014
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Open
    title: Swift's syntax could have fewer parenthesis and commas
