apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17300839"
    labels:
        datastore_id: "5830797269401600"
data:
    classification: ""
    created: "2014-06-13T12:36:25.578053Z"
    description: "Summary:\r\nAs a C# programmer with some (little) experience in functional languages (F#, a little SML), I find typealias/generics dichotomy in protocols confusing.\r\n\r\nRelated:\r\n\r\nhttps://devforums.apple.com/thread/230611?tstart=0\r\nhttp://stackoverflow.com/questions/24137062/how-do-i-return-a-sequence-in-swift\r\nhttp://schani.wordpress.com/2014/06/11/associated-types-considered-weird/\r\n\r\nSequenceOf feels very hackish.\r\n\r\nIf you're sure about this direction, please document the hell out of it.\r\nIt doesn't help that Swift library is closed source and I can't learn from it.\r\n\r\nSteps to Reproduce:\r\n1. Try to write a generator function\r\n2. Try to make it compile\r\n\r\nExpected Results:\r\nIt's cool and the signature makes sense\r\n\r\nActual Results:\r\nI have to use SequenceOf. This is just as annoying as early C# versions where we had to create delegate types."
    email: dan.abramov@gmail.com
    modified: "2014-06-13T12:36:25.57817Z"
    number: "17300839"
    number_intvalue: 17300839
    originated: 06/13/14
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: ""
    resolved: ""
    status: ""
    title: Swift typealias/generics protocol dichotomy is very confusing
