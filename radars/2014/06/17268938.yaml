apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17268938"
    labels:
        datastore_id: "6458022482149376"
data:
    classification: Serious Bug
    created: "2014-06-11T15:04:14.894325Z"
    description: "Summary:\r\nRan across a bug yesterday where data was being written to the wrong property in our Core Data store. Turned out to be a typo with the one of the keys we were using to save data. \r\n\r\nI found this in the docs:\r\n“Primitive accessor methods are only supported on modeled properties. If you invoke a primitive accessor on an unmodeled property, it will instead operate upon a random modeled property. (The debug libraries and frameworks from (available from the Apple Developer Website) have assertions to test for passing unmodeled keys to these methods.)”\r\n\r\nSeems inconsistent from other Apple APIs which would return an error, or trigger an assertion or give some sort of immediate feedback. Writing data to a random modeled property seems odd.\r\n\r\nSteps to Reproduce:\r\nHave a typo in one of the keys used when calling setPrimitiveValue:forKey: It will eventually start writing over stuff you care about. \r\n\r\nExpected Results:\r\nI’d expect some sort of assertion telling me that I did something stupid and that property is not a modeled property. Even a warning would be nice. \r\n\r\nActual Results:\r\nData was written to a random property. This was fun to track down. \r\n\r\nRegression:\r\nNoticed this in iOS 7\r\n\r\nNotes:"
    email: rwgrier@gmail.com
    modified: "2015-02-24T15:13:27.409409Z"
    number: "17268938"
    number_intvalue: 17268938
    originated: 11-Jun-2014 11:04 AM
    parent_number: "12470079"
    product: Developer Tools
    product_version: Xcode 5.1.1 (5B1008)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Xcode 5.1.1: Core Data NSManagedObjectContext setPrimitiveValue:forKey:'
