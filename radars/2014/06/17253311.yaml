apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17253311"
    labels:
        datastore_id: "6434428079308800"
data:
    classification: Enhancement
    created: "2014-06-10T17:36:52.988806Z"
    description: |-
        Summary:
        Currently, the rules for when a function requires an argument to be named are needlessly complex. Global functions don’t require named arguments by default, local functions (scoped to a class or struct) only require that arguments after the first one are named, and constructors require all arguments to be named.

        It seems like simplifying the rules to match the local function’s behavior of requiring the naming of all arguments after the first one would cut down on some of this confusion, and lead to a more consistent API design.

        Steps to Reproduce:
        Write the following functions:

        ```swift
        func globalFunc(string: String, otherString: String) {
        }

        class Foo {
            func localFunc(string: String, otherString: String) {
            }
        }
        ```

        Expected Results:
        Expect that the naming rules are consistent when calling the 2 functions

        Actual Results:
        The naming rules are inconsistent:

        ```swift
        globalFunc("foo", "bar")

        Foo().localFunc("foo", otherString: "bar")
        ```
    email: gordon@thoughtbot.com
    modified: "2014-06-10T17:36:52.988956Z"
    number: "17253311"
    number_intvalue: 17253311
    originated: 10-Jun-2014 10:36 AM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: "1"
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift: Rules for named arguments should be consistant'
