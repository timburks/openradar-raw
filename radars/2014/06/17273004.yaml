apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17273004"
    labels:
        datastore_id: "5265773920518144"
data:
    classification: ""
    created: "2014-06-11T18:54:11.765922Z"
    description: "Some languages, including GNU C, support a shorthand version of the ternary operator (?:) where the second operand is optional. This implicitly uses the first operand as the second operand also. It is often used when a check is required before returning a value, returning a default value instead when the check fails.\r\n\r\nIn Swift, optional chaining is one use case where this seems especially useful. For example, currently you need to repeat the chain in the second operand and remember to unwrap the resulting value:\r\n\r\noverride func intrinsicContentSize() -> CGSize {\r\n  return user.image ? user.image!.size : CGSize(width: 100, height: 100)\r\n}\r\n\r\nSupporting a shorthand ternary operator would simplify this code:\r\n\r\noverride func intrinsicContentSize() -> CGSize {\r\n  return user.image?.size ?: CGSize(width: 100, height: 100)\r\n}\r\n\r\nIt might also be more efficient, as the chain only needs to be traversed once, making it functionally similar to:\r\n\r\noverride func intrinsicContentSize() -> CGSize {\r\n  if let size = user.image?.size {\r\n    return size\r\n  } else {\r\n    return CGSize(width: 100, height: 100)\r\n  }\r\n }"
    email: martijn@martijnwalraven.com
    modified: "2014-06-11T18:54:11.766043Z"
    number: "17273004"
    number_intvalue: 17273004
    originated: 6/11/2014
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Open
    title: '[Swift] Support shorthand ternary operator'
