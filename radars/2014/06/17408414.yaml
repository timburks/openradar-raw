apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17408414"
    labels:
        datastore_id: "6404186140835840"
data:
    classification: Enhancement
    created: "2014-06-21T20:10:17.33202Z"
    description: "Enums with associated values can be tested and decomposed through switch statements. However, there are situations where simpler equality tests are important, such as in unit tests.  \r\n\r\nAt present, Swift does not automatically implement an equality operator for enums, even when the associated values are all supported by the equality operator.  For example, the code:\r\n\r\nenum SimpleToken {\r\n    case Name(String)\r\n    case Number(Int)\r\n}\r\nlet t1 = SimpleToken.Number(123)\r\nlet t2 = SimpleToken.Number(123)\r\nXCTAssert(t1 == t2)\r\n\r\nfails with the error:\r\nerror: could not find an overload for '==' that accepts the supplied arguments\r\n    XCTAssert(t1 == t2)\r\n    ^~~~~~~~~~~~~~~~~~~\r\n\r\nThe programmer can manually implement an overload of the equality operator, but the code is 100% boilerplate.  \r\n\r\nI propose that the compiler generate an equality test for enums when all associated values support equality tests.  I believe this is a type-safe operation, as other functional languages like Scala and Ocaml support equality tests of their sum types.  It should not add any overhead to programs that don't need equality tests.  If there is a concern about that, it would be accessible for the program to opt-in to equality tests via some source code declaration (e.g. implementing a protocol or including and attribute like @eqtype)."
    email: jlieske@gmail.com
    modified: "2015-03-07T06:03:50.90154Z"
    number: "17408414"
    number_intvalue: 17408414
    originated: 21-Jun-2014 01:09 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: 'Xcode6 beta: Version 6.0 (6A216f)'
    reproducible: Always
    resolved: ""
    status: Duplicate
    title: Swift should allow equality tests of enums with associated values
