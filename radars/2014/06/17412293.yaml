apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17412293"
    labels:
        datastore_id: "5286515391332352"
data:
    classification: Feature (New)
    created: "2014-06-22T21:27:42.370318Z"
    description: "On Swift programming language:\r\n\r\nMy use case: see also https://devforums.apple.com/message/991691\r\n\r\nGiven a protocol 'Specification'\r\nprotocol Specification {\r\n    typealias MatchType\r\n    func matches(matchObject: MatchType) -> Bool\r\n}\r\n\r\nand an implementation\r\nstruct AndSpecification<L : Specification, R: Specification where L.MatchType == R.MatchType>  : Specification {\r\n    var left : L\r\n    var right : R\r\n    func matches(matchObject: L.MatchType) -> Bool {...}\r\n}\r\n\r\nI would like to be able to define a function\r\n\r\n@infix func && <L: Specification, R: Specification where L.MatchType == R.MatchType> (left: L, right: R) -> protocol<S: Specification where S.MatchType == L.MatchType>  {\r\n    return AndSpecification(left: left, right: right)\r\n}\r\n\r\nI could specify an AndSpecification as a result type, but I would prefer to hide this 'AndSpecification' type, and only expose a more abstract type to my callers. The Specification protocol is too generic here, caller should know that the MatchType is same as the MatchType of the arguments"
    email: jan.sabbe@gmail.com
    modified: "2014-06-22T22:00:32.47064Z"
    number: "17412293"
    number_intvalue: 17412293
    originated: 2014/06/22
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: Always
    resolved: ""
    status: Open
    title: Swift - Syntax to create a type that implements a protocol using a certain associated type
