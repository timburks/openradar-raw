apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17141206"
    labels:
        datastore_id: "5799001626509312"
data:
    classification: New Feature
    created: "2014-06-16T22:26:46.782072Z"
    description: "Swift objects that inherit from Objective-C objects can make use of NSSelectorFromString, but pure-Swift objects cannot. Since Swift functions are strongly-typed, a Swift-native NSSelectorFromString would need to take additional arguments for return and parameter types. At the worst, that information would need to be encoded in the string.\r\n\r\nThe reverse (function to string) would also be useful for debugging.\r\n\r\nThere are probably multiple use cases for this, but for me, this functionality is useful for implementing a remote procedure interface. The client sends string messages to the server, and the server decides which function to call based on the message (this is done in a secure way). There are thousands of these messages, and putting them in a dictionary takes too much memory, and a massive if-else statement takes too long to execute. In Objective-C, NSSelectorFromString and NSInvocation have been fast and memory efficient."
    email: thebuckley@gmail.com
    modified: "2014-06-16T22:26:46.782243Z"
    number: "17141206"
    number_intvalue: 17141206
    originated: 03-Jun-2014 10:39 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: N/A
    resolved: ""
    status: Open
    title: 'Swift: String to function and vice versa'
