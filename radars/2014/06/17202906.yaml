apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17202906"
    labels:
        datastore_id: "4755396514283520"
data:
    classification: ""
    created: "2014-06-06T19:00:53.161596Z"
    description: "Summary:\r\nIn Swift, it is possible to adopt a protocol on a structure as follows:\r\n\r\n````\r\nprotocol Sig {\r\n    typealias A\r\n    let value : A\r\n}\r\n\r\nstruct X : Sig {\r\n    typealias A = String\r\n    let value = \"hello, world\"\r\n}\r\n````\r\n\r\nIt is not possible, however, to erase all the ways in which a structure extends a signature. So, for instance, we have the definitional equality `X.A == String`; it is important for abstraction & modularity to be able to erase this information when desirable.\r\n\r\nSteps to Reproduce:\r\nIn the following (hypothetical) syntax, we can get this Ã  la Standard ML:\r\n\r\n````\r\nstruct X :< Sig {\r\n    typealias A = String\r\n    let value = \"hello, world\"\r\n}\r\n````\r\n\r\n\r\nExpected Results:\r\nNow, for any `x:X`, we don't have `x.value : String` but rather only `x.value : X.A`. This becomes particularly useful when you have further constraints in the protocol on the abstract type member (like `Equatable` or something).\r\n\r\nActual Results:\r\nLacking an opaque protocol ascription feature, this kind of abstraction may only be got from upcasting `x:X` to `x:Sig`. It would be ideal if we could enforce abstraction at the level of structures as well.\r\n\r\nFor a good explanation of how this is useful, Bob Harper's Introduction to Standard ML is a very good text."
    email: jonsterling@gmail.com
    modified: "2014-06-06T19:00:53.161756Z"
    number: "17202906"
    number_intvalue: 17202906
    originated: ""
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Open
    title: Opaque protocol ascription in Swift
