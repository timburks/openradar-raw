apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17165464"
    labels:
        datastore_id: "5892219596701696"
data:
    classification: New Feature
    created: "2014-06-16T17:12:16.93013Z"
    description: "Partial mocking is very, very useful for writing unit tests. Partial mocking is the ability to replace the implementation of a function of a specific instance with a stub that tracks the parameters passed in and returns a convenient value for testing. You can also add expectations on how many times the function is called for a set of parameters.\r\n\r\nIn C++, we accomplish this either by subclassing the class to be mocked, or by creating a proxy class. There are problems with both of these approaches. First, subclassing does more than a simple mock, so the subclassed object does not function 100% identically to the original (aside from the mocked object). Proxy objects need to implement forwarding for every non-mocked function of the original object, except for the mocked functions. This means you have to update the proxy class to keep it in perfect sync with the original. In C++, you sometimes need multiple proxy classes, but I don't think that's needed in Swift, since functions are first-class objects.\r\n\r\nNeither of these solutions are great, and it would be very helpful if Swift just natively supported partial mocks."
    email: thebuckley@gmail.com
    modified: "2014-06-16T17:12:16.930336Z"
    number: "17165464"
    number_intvalue: 17165464
    originated: 04-Jun-2014 05:32 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: N/A
    resolved: ""
    status: Open
    title: 'Swift: Support partial mocking'
