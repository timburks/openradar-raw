apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "19114187"
    labels:
        datastore_id: "6108090491469824"
data:
    classification: Security
    created: "2014-12-02T13:59:47.829377Z"
    description: |-
        Often one has a class that obtains an object via a property and internally mutates it. The na√Øve approach would be:

        @interface MyClass

        @property (copy) NSMutableString* targetString;

        @end

        However, this is invalid because this calls -copy on the NSMutableString, producing an NSString, which is then assigned to the ivar (this should really be a compile-time error, but is sadly only detected at runtime).

        However, it's not that important, as it also violates encapsulation. What the designer probably wanted to do was make the object immutable to the outside, but mutable internally:

        @interface MyClass

        @property (copy) NSString* targetString;

        @end

        @interface MyClass ()

        @property (mutableCopy) NSMutableString *targetString;

        @end

        It would be cool if you could support this common pattern:

        1) If a property is declared as "copy" and conforms to NSMutableCopying
        2) If an extension to the class holding that property redeclares the property as a subclass and qualifies it as "mutableCopy" instead

        Expected result:

        Permit this seeming contradiction, declare the property's backing store as the subclass from the extension, not the base class from the header, and implement the setter so it calls -mutableCopy.
    email: kusterer@gmail.com
    modified: "2014-12-02T13:59:47.829524Z"
    number: "19114187"
    number_intvalue: 19114187
    originated: 02-Dec-2014 02:59 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 6.1 (6A1052d)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Xcode 6.1: Need a ''mutableCopy'' property qualifier for mutable objects'
