apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "19357437"
    labels:
        datastore_id: "6135699614990336"
data:
    classification: Serious Bug
    created: "2014-12-29T20:51:36.136505Z"
    description: "Summary:\r\n\r\nThe attached code contains a generic function which should be specialised by return type. Unfortunately, despite the type parameter T referencing the subclass Sub, the instantiated object will be of the base type Base. Swiftâ€™s type inference is not aware of this fact which leads to runtime crashes.\r\n\r\nSteps to Reproduce:\r\n\r\n$ ./generics.swift \r\n\r\nExpected Results:\r\n\r\nOutput of the program:\r\n\r\nparam is: generics.Sub\r\nresult is: generics.Sub\r\n\r\no1 should be of type Sub. Optionally, the program should not compile because the result of the create() function has the wrong type.\r\n\r\nActual Results:\r\n\r\nparam is: generics.Sub\r\nresult is: generics.Base\r\n\r\no1 is of the wrong type. This can easily lead to runtime crashes, e.g. when calling functions of type Sub which do not exist in type Base.\r\n\r\nRegression: -\r\n\r\nNotes:\r\n\r\nCode sample is attached."
    email: neocool2@googlemail.com
    modified: "2015-01-19T15:35:58.149149Z"
    number: "19357437"
    number_intvalue: 19357437
    originated: 29-Dec-2014 09:51 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Swift 1.1.1
    reproducible: Always
    resolved: ""
    status: Duplicate of 18537723
    title: 'Swift: Instantiating an object of a generic function''s type parameter yields base class instead of sub class'
