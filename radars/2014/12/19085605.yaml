apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "19085605"
    labels:
        datastore_id: "5295478384099328"
data:
    classification: Serious Bug
    created: "2014-12-02T21:22:16.700945Z"
    description: "Summary:\r\nScardStatus calls return bad length for reader (first call with NULL buffer) and then failed with SCARD_E_INSUFFICIENT_BUFFER (0x80100008)\r\n\r\nSteps to Reproduce:\r\n1. Install Xcode 6.1\r\n2. Create a new Command-Line Project\r\n3. Add main.c into Project\r\n4. Plug an USB smartcard reader and insert a smartcard\r\n5. Compile & Run project\r\n\r\nExpected Results:\r\nProgram should print information about the card\r\n\r\nActual Results:\r\nWhen allocating a buffer of size specified by the first SCardStatus call, the second call to SCardStatus failed with SCARD_E_INSUFFICIENT_BUFFER (0x80100008)\r\n\r\nfile : main.c\r\n#include <stdio.h>\r\n#include <strings.h>\r\n#include <stdlib.h>\r\n#include <PCSC/wintypes.h>\r\n#include <PCSC/winscard.h>\r\n\r\nint main(int argc, const char * argv[]) {\r\n    SCARDCONTEXT hContext;\r\n    char *szChosenReader;\r\n    char *mszReaders;\r\n    DWORD err = SCardEstablishContext(SCARD_SCOPE_SYSTEM, NULL, NULL, &hContext);\r\n    if (err != 0) {\r\n        printf(\"SCardEstablishContext : %08x\\n\", err);\r\n    } else {\r\n        DWORD cchReaders = 0;\r\n        err = SCardListReaders(hContext, \"SCard$AllReaders\", NULL, &cchReaders);\r\n        if (err != 0) {\r\n            printf(\"SCardListReaders : %08x\\n\", err);\r\n        } else {\r\n            mszReaders = calloc(cchReaders, sizeof(char));\r\n            if (mszReaders == NULL) {\r\n                perror(\"calloc for SCardListReaders\");\r\n            } else {\r\n                err = SCardListReaders(hContext, \"SCard$AllReaders\", mszReaders, &cchReaders);\r\n                if (err != 0) {\r\n                    printf(\"SCardListReaders : %08x\\n\", err);\r\n                } else if ('\\0' == *mszReaders) {\r\n                    printf(\"There are no smart card readers. Please plug one in.\\n\");\r\n                } else {\r\n                    DWORD cReaders = 0;\r\n                    for (char *readerName = mszReaders; *readerName != '\\0'; readerName += strlen(readerName) + 1) {\r\n                        printf(\"Found reader %s\\n\", readerName);\r\n                        cReaders++;\r\n                    }\r\n                    szChosenReader = mszReaders;\r\n                    SCARD_READERSTATE readerState;\r\n                    memset(&readerState, 0, sizeof(SCARD_READERSTATE));\r\n                    readerState.szReader = szChosenReader;\r\n                    readerState.dwCurrentState = SCARD_STATE_UNAWARE;\r\n                    err = SCardGetStatusChange(hContext, 0, &readerState, 1);\r\n                    if (err != 0) {\r\n                        printf(\"SCardGetStatusChange : %08x\\n\", err);\r\n                    } else if (! (SCARD_STATE_PRESENT & readerState.dwEventState)) {\r\n                        printf(\"Card is not present in %s. Please insert smart card.\\n\", szChosenReader);\r\n                    } else {\r\n                        SCARDHANDLE hCard;\r\n                        DWORD dwActiveProtocol;\r\n                        err = SCardConnect(hContext, szChosenReader, SCARD_SHARE_SHARED, SCARD_PROTOCOL_ANY, &hCard, &dwActiveProtocol);\r\n                        if (err != 0) {\r\n                            printf(\"SCardConnect: %08x\\n\", err);\r\n                        } else {\r\n                            DWORD chReaderLen;\r\n                            err = SCardStatus(hCard, NULL, &chReaderLen, NULL, NULL, NULL, NULL);\r\n                            if (err != 0) {\r\n                                printf(\"SCardStatus without buf: %08x\\n\", err);\r\n                            } else {\r\n                                LPTSTR mszReaderNames = calloc(chReaderLen, sizeof(char));\r\n                                if (NULL == mszReaderNames) {\r\n                                    perror(\"calloc for SCardStatus\");\r\n                                } else {\r\n                                    DWORD dwState;\r\n                                    DWORD dwProtocol;\r\n                                    BYTE atr[32];\r\n                                    DWORD cbAtrLen = 32;\r\n                                    err = SCardStatus(hCard, mszReaderNames, &chReaderLen, &dwState, &dwProtocol, atr, &cbAtrLen);\r\n                                    if (err != 0) {\r\n                                        printf(\"SCardStatus with buf: %08x\\n\", err);\r\n                                    } else {\r\n                                        printf(\"State: %d, protocol: %d, ATR length: %d\\n\", dwState, dwProtocol, cbAtrLen);\r\n                                        BOOL gotMultiStringEnd = 0;\r\n                                        for (DWORD i = 0; i < chReaderLen; i += strlen(mszReaderNames + i) + 1) {\r\n                                            char *readerName = mszReaderNames + i;\r\n                                            if ('\\0' == *readerName) {\r\n                                                gotMultiStringEnd = 1;\r\n                                                break;\r\n                                            }\r\n                                            printf(\"Name of reader: %s\\n\", readerName);\r\n                                        }\r\n                                        if (! gotMultiStringEnd) {\r\n                                            fprintf(stderr, \"SCardStatus reader names multistring did not end with empty string!\\n\");\r\n                                        }\r\n                                    }\r\n                                    free(mszReaderNames);\r\n                                }\r\n                            }\r\n                            err = SCardDisconnect(hCard, SCARD_LEAVE_CARD);\r\n                            if (err != 0) {\r\n                                printf(\"SCardDisconnect: %08x\\n\", err);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                free(mszReaders);\r\n            }\r\n        }\r\n    }\r\n    err = SCardReleaseContext(hContext);\r\n    if (err != 0) printf(\"SCardReleaseContext: %08x\\n\", err);\r\n    return 0;\r\n}"
    email: vincent.sourin@gmail.com
    modified: "2014-12-02T21:22:16.701104Z"
    number: "19085605"
    number_intvalue: 19085605
    originated: 26-Nov-2014 04:30 PM
    parent_number: '&{NULL_VALUE}'
    product: OS X
    product_version: "10.10"
    reproducible: Always
    resolved: ""
    status: Open
    title: OS X Yosemite PCSC SCardStatus Problem
