apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "19349390"
    labels:
        datastore_id: "5223719144259584"
data:
    classification: Crash/Hang/Data Loss
    created: "2014-12-26T18:19:53.776534Z"
    description: "Summary:\r\nI have an Xcode project with a Cocoa framework and unit tests. When I run the unit tests with a Debug configuration or with a Release configuration with [-Onone] set for the Swift optimizer option, then it works. However, if I use the [-O] (fastest) optimizer option, then the unit test crashes with an EXC_BAD_ACCESS exception in swift_getTupleTypeMetadata.\r\n\r\nThe stack trace is:\r\n\r\n- libswiftCore.dylib`std::__1::__function::__func<swift::swift_getTupleTypeMetadata::$_2, std::__1::allocator<swift::swift_getTupleTypeMetadata::$_2>, (anonymous namespace)::TupleCacheEntry* ()>::operator()()\r\n\r\n- libswiftCore.dylib`swift_getTupleTypeMetadata2\r\n\r\n- finchlib`finchlib.parse (my code)\r\n\r\nIf I change the Swift optimizer setting to -Onone, then the crash doesn't happen.\r\n\r\nIf I put all the source code into a single .swift file, then the crash doesn't happen.\r\n\r\nSteps to Reproduce:\r\nThe attached Xcode project demonstrates the issue. The project has two schemes: finchlib_Optimized and finchlib_Unoptimized. The only difference between the schemes is that the former specifies the \"Fastest [-O]\" Swift optimizer option and the latter specifies \"None [-Onone]\"\r\n\r\nOpen the project in Xcode and select the finchlib_Unoptimized scheme and run unit tests. The test will pass.\r\n\r\nThen select the finchlib_Optimized scheme and run unit tests. It will crash with EXC_BAD_ACCESS in swift_getTupleTypeMetadata.\r\n\r\nExpected Results:\r\nOptimized code should run like unoptimized code\r\n\r\nActual Results:\r\nOptimized code crashes\r\n\r\nVersion:\r\n6.1.1 (6A2008a)\r\n\r\nNotes:\r\nAs noted in the description, the crash won't happen if all the code is in a single file. That is, if you remove all the parse<>() functions from my parse.swift file and put them in Interpreter.swift, then the code seems to run fine when optimized.\r\n\r\nConfiguration:\r\nOS X Yosemite\r\n\r\nAttachments:\r\n'finchbasic_crash_swift_getTupleTypeMetadata.zip' was successfully uploaded.\r\n\r\n(Available at https://dl.dropboxusercontent.com/u/1437706/finchbasic_crash_swift_getTupleTypeMetadata.zip)"
    email: kristopherdjohnson@gmail.com
    modified: "2015-03-23T22:50:16.813761Z"
    number: "19349390"
    number_intvalue: 19349390
    originated: 26-Dec-2014 01:17 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: 6.1.1 (6A2008a)
    reproducible: Always
    resolved: Fixed in Xcode 6.3 beta
    status: Closed
    title: Optimized Swift program crashes in swift_getTupleTypeMetadata
