apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17823187"
    labels:
        datastore_id: "5834249617801216"
data:
    classification: Enhancement
    created: "2014-07-27T15:19:07.381228Z"
    description: "Summary:\r\nIf I try to compare a double of Ints, the compiler gives an error.\r\n\r\nSteps to Reproduce:\r\n// this method makes it compile\r\n//private func ==(first:(quotient:Int, modulus:Int), second:(quotient:Int, modulus:Int)) -> Bool {\r\n//    return (first.0 == second.0) && (first.1 == second.1)\r\n//}\r\n\r\ninternal extension Int {\r\n    \r\n    func divMod(other:Int) -> (quotient:Int, modulus:Int) {\r\n        let remainder = self % other\r\n        let quotient = self / (other - remainder)\r\n        return (quotient, remainder)\r\n    }\r\n    \r\n    public func testDivMod() -> Bool {\r\n        var success = true\r\n        success =  success || (13.divMod(4) == (quotient:3, modulus:1))\r\n        \r\n        return success\r\n    }\r\n}\r\n\r\nExpected Results:\r\nI shouldn't need the implementation for ==(a:(Int, Int), b:(Int, Int))->Bool\r\n\r\nActual Results:\r\nI do need the implementation for ==(a:(Int, Int), b:(Int, Int))->Bool\r\n\r\nVersion:\r\nVersion 6.0 (6A267n)\r\n\r\nNotes: I think that Comparability could also be inferred.\r\n\r\n\r\nConfiguration:\r\n\r\n\r\nAttachments:"
    email: GriotSpeak@gmail.com
    modified: "2014-07-27T15:19:07.381385Z"
    number: "17823187"
    number_intvalue: 17823187
    originated: "2014-07-27"
    parent_number: '&{NULL_VALUE}'
    product: Swift
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Open
    title: Tuples composed of Equatable types should automatically be equatable
