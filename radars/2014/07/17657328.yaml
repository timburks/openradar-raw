apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17657328"
    labels:
        datastore_id: "5791576164925440"
data:
    classification: Serious Bug
    created: "2014-07-14T01:02:33.165525Z"
    description: |-
        Summary:
        This is a wooly one that I can‘t really describe more succinctly, so just write these files and compile them and enjoy the stack trace.


        File one:

        protocol C : Collection {}

        extension Array : C {}


        File two:

        struct A<T> {
        	let a: B<Array<T>>
        	
        	init() {
        		a = B()
        	}
        }

        struct B<T : Collection> {}


        Weirdest corner case I’ve seen yet, but not the only one I’ve seen involving Collection.


        Steps to Reproduce:
        Put these two files in a project and build.


        Expected Results:
        I expected it to compile.


        Actual Results:
        The compiler crashed.


        Regression:
        There are many workarounds:

        1. Put these both into a single file
        2. Don’t constrain B<T>’s parameter to Collection
        3. Remove A’s property a
        4. Parameterize A’s property a by any other type conformed to C
        5. Don’t write the init method for A
        6. Conform C to Printable instead
        7. Don’t conform C to any protocol
        8. Don’t extend Array to conform to C


        Notes:
        Sample project will be uploaded shortly. Thank you for bearing with me.
    email: rix.rob@gmail.com
    modified: "2014-07-14T01:02:33.16563Z"
    number: "17657328"
    number_intvalue: 17657328
    originated: 13-Jul-2014 09:02 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode6-Beta3 (6A254o)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift: Crash with a protocol & Array in one file, two generic structs in another'
