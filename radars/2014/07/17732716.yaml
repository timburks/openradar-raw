apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17732716"
    labels:
        datastore_id: "4927982795751424"
data:
    classification: No Rank
    created: "2014-07-18T22:39:50.751529Z"
    description: "Summary:\r\nFor example, UICollectionView has 6 unique identifiers all registered for a UICollectionViewCell and it has exactly 6 cells, each has a unique identifier. \r\n\r\nWhen you're running an automation test, the collection view will not properly dequeue cells and would create new instances more than required. Eventually, there might be thousands of cell instances - all living in memory and not being deallocated.\r\n\r\nSteps to Reproduce:\r\n1. Compile and run CollectionViewTest on an iPhone running iOS 7\r\n2. Start UI Automation + Allocations test with Instruments using a monkey test script (attached in the zip).\r\n3. Verify that the number of objects is more than 6. <----- BUG\r\n4. Run the test again, but now disable the UI Automation test. \r\n5. Scroll the collection view up and down few times.\r\n6. There will be exactly 6 instances.\r\n\r\nExpected Results:\r\nThere are 6 cells and exactly 6 identifiers. Instruments should show that there are 6 objects allocated.\r\n\r\nActual Results:\r\nUICollectionView keeps creating new cells and not reusing the existing cells. Moreover, if you run this test for a long time (a few hours) the numbers of cells will grow exponentially with every scroll and the old cells won't be deallocated which would lead to an out of memory crash.\r\n\r\nVersion:\r\niOS 7.1.2\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:\r\niPhone 5s 64GB Verizon, Wi-Fi"
    email: romefimov@gmail.com
    modified: "2014-09-25T23:18:18.194577Z"
    number: "17732716"
    number_intvalue: 17732716
    originated: 18-Jul-2014 03:37 PM
    parent_number: '&{NULL_VALUE}'
    product: iOS
    product_version: 7.1.2, 8.0
    reproducible: Always
    resolved: ""
    status: Open
    title: UICollectionView doesn't properly dequeue cells when UI Automation is running with Instruments, causing a memory leak
