apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17654929"
    labels:
        datastore_id: "5904925720576000"
data:
    classification: Enhancement
    created: "2014-07-13T08:41:34.342343Z"
    description: "Summary:\r\nBy using type inference and method overloading, CGFloat will be a lot easier to handle with 64bit compatibility.\r\n\r\nSteps to Reproduce:\r\nTo compute the distance between two CGPoint instances, it is useful to use hypot()/hypotf() from <math.h>.\r\n\r\nRight now, one has to write this code to make sure both 32bit and 64bit builds work well:\r\nI want to calculate the distance between two CGPoint with hypot():\r\nlet distance : CGFloat = hypot(from.x - to.x, from.y - to.y)\r\n\r\nExpected Results:\r\nThere are two overloaded global functions called “hypot()”:\r\nfunc hypot (x: Double, y: Double) -> Double\r\nfunc hypot (x: Float, y: Float) -> Float\r\n\r\nUsing type inference and overloaded methods like these, the difference between 64bit and 32bit architectures will blur and be a lot easier to manage.\r\n\r\nActual Results:\r\nPeople have to create their own wrappers to make sure, they don't have to spread 32bit-vs-64-bit code everwhere in the code base.\r\n\r\n#if arch(arm64)\r\nlet my_hypot : (CGFloat, CGFloat) -> CGFloat = hypot\r\n#else\r\nlet my_hypot : (CGFloat, CGFloat) -> CGFloat = hypotf\r\n#endif\r\n\r\nNotes:\r\nThis also applies to several other functions such as sin/sinf, cos/cosf, etc."
    email: herzberg.sven@googlemail.com
    modified: "2014-07-13T08:41:34.342576Z"
    number: "17654929"
    number_intvalue: 17654929
    originated: "2014-07-13"
    parent_number: '&{NULL_VALUE}'
    product: iOS SDK
    product_version: XCode 6 Beta 3
    reproducible: Always
    resolved: ""
    status: Open
    title: '[Swift] Provide overloaded functions for float/double functions in C'
