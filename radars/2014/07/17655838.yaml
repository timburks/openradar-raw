apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17655838"
    labels:
        datastore_id: "5884072580612096"
data:
    classification: Enhancement
    created: "2014-07-13T17:27:38.799672Z"
    description: |-
        Summary:
        `find` takes a Collection of Equatable Elements and an example Element and returns the index of the first one which is equal to the passed Element. This is valuable as an `indexOf` case, but it would be more valuable for it to take a predicate instead of an element (or for an overload to exist which does this.

        For example:

        func find<C : Swift.Collection>(domain: C, predicate: C.GeneratorType.Element -> Bool) -> C.IndexType? {
        	for index in domain.startIndex..<domain.endIndex {
        		if predicate(domain[index]) { return index }
        	}
        	return nil
        }

        This returns the index of the first member of the collection for whom the predicate returns `true`, or else it returns `nil`.

        I can use this `find` to do a linear search through an array of tuples looking for one whose first element is equal to something, whereas the existing one won’t work for two reasons:

        1. Tuples aren’t Equatable
        2. I want to match only on the tuple’s first element, not the whole tuple


        Steps to Reproduce:
        N/A


        Expected Results:
        N/A


        Actual Results:
        N/A


        Regression:
        N/A


        Notes:
        <3
    email: rix.rob@gmail.com
    modified: "2014-07-13T17:27:38.799842Z"
    number: "17655838"
    number_intvalue: 17655838
    originated: 13-Jul-2014 01:27 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode6-Beta3 (6A254o)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift: stdlib’s `find` should take a predicate'
