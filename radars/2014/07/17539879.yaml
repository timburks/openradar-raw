apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17539879"
    labels:
        datastore_id: "5234320264396800"
data:
    classification: ""
    created: "2014-07-02T19:18:05.253922Z"
    description: "I think it’d be nice if Swift had a partially-bridged NSNotificationCenter ability built in. Then we could easily make type-safe observers that have nice function names and type-checked parameters rather than unpacking stuff from an NSNotification or rolling our own implementations that try to do something similar, but badly. I believe that C# has something like this which they call “delegates” and you declare individual methods in the class as being a delegate method, which can then be subscribed to externally. In Swift, I imagine something similar but with a different name such as:\r\n\r\nclass FancyThing {\r\n  notification somethingDidHappen(result:Int)\r\n\r\n  init() {\r\n  }\r\n\r\n  func doSomething() {\r\n    somethingDidHappen(result:42)\r\n  }\r\n}\r\n\r\nvar thing = FancyThing()\r\nthing.somethingDidHappen += (block or function reference or selector name?)\r\n\r\nNotifications would always be functions and would always have a Void return type and they can always be directly called from within the class instance (or subclasses) without doing any optional checks even if there are no subscribers - but they could not be called from outside the class instance. So for example, this would not be allowed since attempts to send the notification from outside of the instance is probably unsafe and wrong anyway:\r\n\r\nthing.somethingDidHappen(result:1000)\r\n\r\nIt’d also be rather cool if this could bridge to Objective-C and NSNotificationCenter automagically: So given the above example, the call to somethingDidHappen(result:42) in the doSomething() function would translate to a notification named FancyThingSomethingDidHappen with a userInfo value of @{“result” : @(42)} and appropriate object pointer being sent through the default notification center so that Objective-C code can observe the notifications easily in the usual ways.\r\n\r\nI don’t think it would be necessary to bridge in the opposite direction, nor would this necessarily replace NSNotificationCenter in a Swift-only app - but it seems like the kind of thing that’d be very nice to have as I’m honestly not sure how to make notifications like these feel nice and clean and type safe and protocol-y in Swift without some first-class support. Perhaps there’s a way to do it using generics/meta stuff, but if it’s not straightforward then I don’t consider that a good sign."
    email: bigzaphod@gmail.com
    modified: "2014-07-02T19:18:05.254073Z"
    number: "17539879"
    number_intvalue: 17539879
    originated: July 2, 2014
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Open
    title: Swift should directly support notifications
