apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17651011"
    labels:
        datastore_id: "4948986259570688"
data:
    classification: Enhancement
    created: "2014-07-12T08:30:57.240816Z"
    description: "Summary:\r\nThe Swift standard library is rife with generic types like T, U, C, and S. Due to the complexity of some of the declarations—I’ve seen some cases where the angle brackets are more than 70 characters apart—it’s often easy to forget what a given type means by the time you reach it. The standard library should instead favor longer names that better describe the type when viewed in isolation.\r\n\r\nSteps to Reproduce:\r\n1. Start typing join().\r\n2. Forget what order the arguments go in.\r\n3. Command-click to view the declaration.\r\n4. Try to read the parameter list.\r\n\r\nExpected Results:\r\nThe names of the types in the parameter list make it reasonably clear what each parameter’s type is—for instance, CollectionType and SequenceType, or even CollectionType and SequenceOfCollectionsType.\r\n\r\nActual Results:\r\nThe names of the types are C and S, which is briefer but more opaque.\r\n\r\nNotes:\r\nThe specific convention I use here—CollectionType, for instance—might be rejected because it’s too similar to “Collection.Type”, but if so, please don’t throw out the baby with the bathwater. This is a case where brevity is hurting clarity.\r\n\r\n--------------------------------------------------------------------------------\r\n\r\nEngineering has determined that this issue behaves as intended based on the following:\r\n\r\nWe don't think verbosity of the sort requested improves things at all:\r\n\r\nfunc join<\r\n  ExtensibleCollectionType : ExtensibleCollection, \r\n  SequenceType : Sequence where SequenceType.GeneratorType.Element == ExtensibleCollectionType>\r\n(separator: ExtensibleCollectionType, elements: SequenceType) -> ExtensibleCollectionType\r\n\r\nNaming things according to their role is arguably less-bad, but we still don't think it helps with overall readability.  Others may disagree; this is a judgement call.\r\n \r\nfunc join<\r\n  Separator : ExtensibleCollection, \r\n  Fragments : Sequence where Fragments.GeneratorType.Element == Separator>\r\n(separator: Separator, fragments: Fragments) -> Separator\r\n\r\nWe are now closing this bug report.\r\n\r\nIf you have questions regarding the resolution of this issue, please update your bug report with that information.\r\n\r\nPlease be sure to regularly check new Apple releases for any updates that might affect this issue."
    email: brent@architechies.com
    modified: "2014-07-15T22:50:36.842648Z"
    number: "17651011"
    number_intvalue: 17651011
    originated: 12-Jul-2014 01:30 AM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode6-Beta3 (6A254o)
    reproducible: Always
    resolved: 15-Jul-2014 09:09 AM
    status: Closed/Behaves Correctly
    title: Swift standard libary should use more verbose generic type names
