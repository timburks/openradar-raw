apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17515370"
    labels:
        datastore_id: "6110809809747968"
data:
    classification: Serious Bug
    created: "2014-07-01T01:56:28.852941Z"
    description: |-
        Summary:
        Enumerations’ cases can specify the structure of data (the fields of the tuple they’re associated with, if any) and functionality (the cases interior to switch/case statements in functions taking the enumeration); i.e. they define limitations on what can be an element of that case and provide a hook for behaviour. This is pretty much what types are.

        But since they’re not types, just tagged unions, they’re a weaker, runtime standin for an actual type and you can‘t do pattern matching against them in the type system, only in switch/case. Likewise, you can’t do type checking in switch/case, only in the type system; they ought to be one and the same.

        If they were, I would be able to define my program parametrically bringing the full force of the language to bear on things like unwrapping cyclic graphs. Since they’re not, I have a small number of much less convenient options available to me, which typically run into other problems (like the lack of type-parameterized protocols).


        Steps to Reproduce:
        N/A


        Expected Results:
        N/A


        Actual Results:
        N/A


        Regression:
        N/A


        Notes:
        N/A
    email: rix.rob@gmail.com
    modified: "2014-07-01T01:56:28.853058Z"
    number: "17515370"
    number_intvalue: 17515370
    originated: 30-Jun-2014 09:56 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode6-Beta2 (6A216f)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift: enum cases should be types'
