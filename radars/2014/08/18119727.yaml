apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18119727"
    labels:
        datastore_id: "5583042349367296"
data:
    classification: Enhancement
    created: "2014-08-25T16:04:34.603399Z"
    description: "Summary:\r\nParameters of Objective-C methods are converted into assumed variables, which might increase the risk of crashes significantly.\r\ntake for example the UIApplication delegate methods looks as such:\r\nfunc application(application: UIApplication!, didFinishLaunchingWithOptions launchOptions: NSDictionary!) -> Bool\r\n\r\nNow launchOptions is in many cases a nil value, which will crash when accessed incorrectly. In fact it cannot be \"assumed\" that the parameter is not nil!\r\n\r\nI would expect methods from Cocoa to either use optional or unpacked parameters and converted Objective-C methods to always use optionals.\r\n\r\nSame goes for return-types.\r\nIt is in fact a common use case in objective-c to return nil, which\r\n\r\nSteps to Reproduce:\r\n1. Write this method in an objecive-c protocol\r\n- (NSArray*)parseWithText:(NSString*)text;\r\n2. Add protocol to bridging header\r\n3. Implement function in a class\r\n\r\n\r\n\r\nExpected Results:\r\nFunc should ideally look like this:\r\nfunc parseWithText(text: String?) -> [AnyObject]?\r\n\r\n\r\nActual Results:\r\nfunc parseWithText(text: String!) -> [AnyObject]!"
    email: kahlert@gmail.com
    modified: "2014-08-27T13:34:28.507329Z"
    number: "18119727"
    number_intvalue: 18119727
    originated: 25-Aug-2014
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: XCode6-beta6
    reproducible: Always
    resolved: ""
    status: Duplicate of 17693528 (Open)
    title: Objective-C parameters converted to assumed (!) variables instead of optionals (?)
