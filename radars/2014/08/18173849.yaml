apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18173849"
    labels:
        datastore_id: "5317280510509056"
data:
    classification: Enhancement
    created: "2014-08-29T10:34:18.770321Z"
    description: |-
        Summary:
        Each IntegerType-conforming type implements a set of endian-handling features: big-endian and little-endian initializers and properties, plus a byteSwapped property. These should be declared in a protocol they all conform to.

        Steps to Reproduce:
        1. Declare a generic function that takes IntegerTypes:

            func readIntegerFromPacket<Integer: IntegerType> (packet: [UInt8]) -> Integer {
                let integerSizedThing: Integer = readRawIntegerFromPacket(packet)

        2. Try to use one of the endianness features:

                return integerSizedThing.bigEndian
            }

        Expected Results:
        You can.

        Actual Results:
        You canâ€™t. This behavior is not part of any protocol, even though all integer types have identically-named and identically-functioning members for this function.

        Notes:
        This could be part of the IntegerType protocol, but it might actually make sense to put it in a separate protocol that both IntegerType and FloatingPointType conform to, and to add endian-handling functionality to the floating-point types.
    email: brent@architechies.com
    modified: "2014-08-29T10:34:18.77051Z"
    number: "18173849"
    number_intvalue: 18173849
    originated: 29-Aug-2014 03:34 AM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode6-Beta6 (6A280e)
    reproducible: Always
    resolved: ""
    status: Open
    title: Swift.IntegerType should include endian handling stuff
