apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18141648"
    labels:
        datastore_id: "5491679805046784"
data:
    classification: Enhancement
    created: "2014-08-26T23:48:13.622583Z"
    description: |-
        Summary:
        It’s often convenient to wrap functions in a structure of some description which operates like the function while maintaining some state or associated behaviour.

        Actually calling the wrapped behaviour would be much more convenient if function call syntax were overloadable similarly to read-only subscripting or operator overloading:

        struct F<T, U> {
        	let f: T -> U

        	call(x: T) -> U { // subscript–style syntax
        		return f(x)
        	}
        }

        postfix func ()<T, U> (f: F<T, U>, x: T) -> U { // operator–style syntax
        	return f.f(x)
        }


        One can already define a method named `call` or similar, but it’s rather noisier syntactically.


        Steps to Reproduce:
        N/A


        Expected Results:
        N/A


        Actual Results:
        N/A


        Regression:
        N/A


        Notes:
        N/A
    email: rix.rob@gmail.com
    modified: "2014-08-26T23:48:13.622763Z"
    number: "18141648"
    number_intvalue: 18141648
    originated: 26-Aug-2014 07:47 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode6-Beta6 (6A280e)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift: Overload function call syntax'
