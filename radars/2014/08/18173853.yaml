apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18173853"
    labels:
        datastore_id: "5245571736535040"
data:
    classification: Enhancement
    created: "2014-08-29T10:34:51.072212Z"
    description: |-
        Summary:
        SignedIntegerType and UnsignedIntegerType have a mechanism to convert between their various types: all of them can be converted to, and constructed from, a 64-bit type, which is typealiased to IntMax or UIntMax. FloatingPointType should have a similar mechanism to convert via Float80.

        Steps to Reproduce:
        1. Declare a generic function (here, an operator) that converts between any two floating-point types:

            prefix func ^^ <FromFloat: FloatingPointType, ToFloat: FloatingPointType> (x: FromFloat) -> ToFloat {

        2. Try to define it:

                return ToFloat.from(x.toFloatMax())

        Expected Results:
        You can.

        Actual Results:
        You can’t. This behavior is available on integers but not on floats.

        Notes:
        I encountered the need for this feature while trying to implement an explicit conversion operator. (The idea is, when you’re writing a math operation, you mark which operands should be converted, but let Swift infer the exact types it should convert them to.)
    email: brent@architechies.com
    modified: "2014-08-29T10:34:51.072414Z"
    number: "18173853"
    number_intvalue: 18173853
    originated: 29-Aug-2014 03:34 AM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode6-Beta6 (6A280e)
    reproducible: Always
    resolved: ""
    status: Open
    title: Swift.FloatingPointType needs toFloatMax() and from()
