apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17892696"
    labels:
        datastore_id: "5001257890611200"
data:
    classification: Enhancement
    created: "2014-08-02T01:29:07.228494Z"
    description: |-
        Summary:
        Protocol methods can use Self to refer to the type which is conforming to the protocol. But you can’t copy/paste method declarations using Self into your type and just implement them, because Self is disallowed outside of protocols.

        It would be very convenient to have Self be an alias for the specific type being implemented. For example, if I’m implementing a struct named Natural, then Self would refer to Natural:

        struct Natural {
            let value: Int
            func succ() -> Self { … }
        }

        But it’s more interesting for parameterized types, where Self would implicitly include those. For example, an enum Result<T> would alias Self to Result<T>:

        enum Result<T> {
            case Success(T)
            case Failure

            func and(other: Self) -> Self { … }
        }

        This would be exactly equivalent to explicitly providing a typealias named Self:

        enum Result<T> {
            case Success(T)
            case Failure

            typealias Self = Result<T>
            func and(other: Self) -> Self { … }
        }


        Steps to Reproduce:
        N/A

        Expected Results:
        N/A

        Actual Results:
        N/A

        Regression:
        N/A

        Notes:
        N/A
    email: rix.rob@gmail.com
    modified: "2014-08-02T01:29:07.228609Z"
    number: "17892696"
    number_intvalue: 17892696
    originated: 01-Aug-2014 09:28 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode6-Beta4 (6A267n)
    reproducible: Not Applicable
    resolved: ""
    status: Open
    title: 'Swift: Allow Self as an alias for the scope’s type'
