apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "17893483"
    labels:
        datastore_id: "5800426750345216"
data:
    classification: Enhancement
    created: "2014-08-02T04:06:43.497557Z"
    description: |-
        Summary:
        It would be extremely convenient to be able to define type aliases in the type parameters/constraints list.

        For example, I’m implementing a polynomial algebra and I have the following definition for multiplication:

        func * <Constant : Ring, Variable> (x: Term<Constant, Variable>, y: Term<Constant, Variable>) -> Term<Constant, Variable> {
        	return Term(multiplication: x, y)
        }

        I’m having to repeat Term<Constant, Variable> quite a lot. It would be really nice to be able to define an alias:

        func * <Constant : Ring, Variable, typealias Expression = Term<Constant, Variable>> (x: Expression, y: Expression) -> Expression {
        	return Term(multiplication: x, y)
        }

        An alternative syntax would be to allow = to define an alias in a constraint:

        func * <Constant : Ring, Variable, Expression where Expression = Term<Constant, Variable>> (x: Expression, y: Expression) -> Expression

        Or just use ==, and make non-generic type constraints define typealiases instead of throwing errors.


        Steps to Reproduce:
        N/A

        Expected Results:
        N/A

        Actual Results:
        N/A

        Regression:
        N/A

        Notes:
        N/A
    email: rix.rob@gmail.com
    modified: "2014-08-02T04:06:43.49773Z"
    number: "17893483"
    number_intvalue: 17893483
    originated: 02-Aug-2014 12:06 AM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode6-Beta4 (6A267n)
    reproducible: Not Applicable
    resolved: ""
    status: Open
    title: 'Swift: Define type aliases among type constraints'
