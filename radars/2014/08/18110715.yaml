apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18110715"
    labels:
        datastore_id: "5000954021675008"
data:
    classification: Bug
    created: "2014-08-23T14:59:48.031343Z"
    description: "Summary:\r\nXCTestAssertNil cannot be used to check Swift structs to not be nil because Swift structs do not conform to AnyObject\r\n\r\nSteps to Reproduce:\r\n1. Create a new Xcode Swift project that uses unit tests\r\n2. Create a new test case\r\n3. In the test case declare a new struct like the following: struct StructA {}\r\n4. In a test method create a new instance of StructA\r\n5. Try to assert that the instance is not nil using XCTAssertNil\r\n\r\nExpected Results:\r\nThe test should pass because the instance is not nil\r\n\r\nActual Results:\r\nThe compiler fails because XCTAssertNil expects an auto closure returning an instance of AnyObject? but StructA does not conform to AnyObject\r\n\r\nVersion:\r\nXcode 6.0 (6A280e)\r\n\r\nNotes:\r\nChanging the return type of the auto closure from AnyObject? to Any? should fix the problem\r\nOne can also declare a custom version of XCTAssertNil that takes an auto closure returning Any? as the first argument and does exactly the job. A version like this should be included in the XCTest Framework:\r\nfunc XCTAssertNil(expression: @autoclosure () -> Any?, _ message: String? = nil) {\r\n\tif let message = message {\r\n\t\tXCTAssert(expression() == nil, message)\r\n\t} else {\r\n\t\tXCTAssert(expression() == nil)\r\n\t}\r\n}"
    email: alex@hoppen-koeln.de
    modified: "2015-02-27T12:54:14.133716Z"
    number: "18110715"
    number_intvalue: 18110715
    originated: 23-Aug-2014
    parent_number: "18063644"
    product: Developer Tools
    product_version: Xcode 6 beta-6
    reproducible: Always
    resolved: ""
    status: Duplicate/18063644
    title: XCTestAssertNil cannot be used with Swift struct
