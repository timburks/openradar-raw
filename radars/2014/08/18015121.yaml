apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18015121"
    labels:
        datastore_id: "5906891473420288"
data:
    classification: Serious Bug
    created: "2014-08-14T04:09:26.072914Z"
    description: "Summary:\r\nUsing a type as generic parameter causes a runtime error when one of the other parameters is a tuple, depending on what the tuple contains.\r\n\r\nMaking the parameter non-generic does not trigger the issue.\r\n\r\nMaking the parameter accept an instance instead of a type does not trigger the issue.\r\n\r\nSteps to Reproduce:\r\n1. Create a new playground.\r\n2. Define a struct that has 2 generic parameters; one of type T.Type and another of type U\r\n3. Define a second, empty struct.\r\n4. Define a function.\r\n5. Within the function, assign a tuple that contains a string to a constant.\r\n6. Assign a new instance of the first struct to a constant by passing in the type of the second struct and the tuple respectively.\r\n\r\nExpected Results:\r\nThe parameters are passed without issue and are accessible inside of the function.\r\n\r\nActual Results:\r\nExecution was interrupted, reason: EXC_BAD_ACCESS (code=EXC_I386_GPFLT).\r\n\r\nVersion:\r\nXcode6-Beta5 (6A279r)\r\n\r\nAttachments:\r\n'SwiftGenericTypeParamTupleBug.playground.zip', 'SwiftGenericTypeParamTupleBug.png', 'SwiftGenericTypeParamTupleBug2.png' and 'SwiftGenericTypeParamTupleBug3.png' were successfully uploaded."
    email: paulyoungonline@gmail.com
    modified: "2014-10-29T23:40:36.02119Z"
    number: "18015121"
    number_intvalue: 18015121
    originated: 14-Aug-2014 00:07 AM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode6-Beta5
    reproducible: Always
    resolved: Yes
    status: Closed
    title: 'Swift: Using a type as a generic parameter causes EXC_BAD_ACCESS when also passing a tuple as a parameter, depending on its contents'
