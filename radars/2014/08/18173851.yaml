apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18173851"
    labels:
        datastore_id: "5788558681964544"
data:
    classification: Enhancement
    created: "2014-08-29T10:34:38.495055Z"
    description: |-
        Summary:
        Swift.SignedIntegerType should include an Unsigned typealias, and Swift.UnsignedInteger should include a Signed typealias. This typealias would lead to that type’s same-sized counterpart.

        Steps to Reproduce:
        1. Write a generic function that takes, say, SignedIntegerType:

           func doSomeBitTwiddling <SignedInteger: SignedIntegerType> (x: SignedInteger)

        2. Try to make it return a matching unsigned integer:

            -> SignedInteger.Unsigned

        Expected Results:
        You can.

        Actual Results:
        You can’t. The typealias doesn’t exist.

        Notes:
        In my case, I’m trying to avoid sign extension during resizing by converting to unsigned before doing certain bit-twiddling operations. This is impossible to do generically.

        To that end, SignedIntegerType and UnsignedIntegerType should also include init(bitPattern: Self.Unsigned) or init(bitPattern: Self.Signed).
    email: brent@architechies.com
    modified: "2014-08-29T10:34:38.495185Z"
    number: "18173851"
    number_intvalue: 18173851
    originated: 29-Aug-2014 03:34 AM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode6-Beta6 (6A280e)
    reproducible: Always
    resolved: ""
    status: Open
    title: Swift integer protocols should include typealias for signedness counterpart
