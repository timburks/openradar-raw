apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18895280"
    labels:
        datastore_id: "6410819650715648"
data:
    classification: Enhancement
    created: "2014-11-06T17:41:05.48419Z"
    description: |-
        Summary:
        Swift provides the ‘is’ and ‘as’ operators to select behaviour based on the type of an object received at runtime. However, the type selected on itself can only be specified statically at compile time. For example, we might want an extension on UIView helps with loading from a nib. The code might be:

        extension UIView {
            class func loadFromNib(name: String) -> Self? {
                var items = UINib(nibName: name, bundle:nil).instantiateWithOwner(self, options: nil)
                for obj in items {
                    if obj is Self {return obj}
                }
                return nil
            }
        }

        This is not currently possible with the Swift operators. It is possible with the isKindOfClass() function, but this is not applicable to all types. This also requires returning type UIView specifically, like this:

        extension UIView {
            class func loadFromNib(name: String) -> UIView? {
                var items = UINib(nibName: name, bundle:nil).instantiateWithOwner(self, options: nil)
                for obj in items {
                    if obj.isKindOfClass(self) {return obj as? UIView}
                }
                return nil
            }
        }

        Steps to Reproduce:
        Use the ‘is’ or ‘as’ operator to check for a type known dynamically

        Expected Results:
        Code compiles, runtime type comparison is made.

        Actual Results:
        Compilation error.
    email: vic.gbsmith@gmail.com
    modified: "2014-11-06T17:41:05.484333Z"
    number: "18895280"
    number_intvalue: 18895280
    originated: 06-Nov-2014 05:40 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 6.1 (6A1052d)
    reproducible: Always
    resolved: ""
    status: Open
    title: 'Swift: is and as operators should accept runtime type arguments'
