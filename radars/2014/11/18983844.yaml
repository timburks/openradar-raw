apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "18983844"
    labels:
        datastore_id: "6341423716630528"
data:
    classification: ""
    created: "2014-11-14T16:19:59.459066Z"
    description: "Summary:\r\nIn Swift, the convention for naming method arguments is that the first argument name is part of the method name, e.g.\r\n\r\nfunc doSomethingWithFoo(foo: Int) { }\r\n\r\nSuch that the method will be called like this:\r\n\r\nself.doSomethingWithFoo(5)\r\n\r\nFor that reason, the compiler warns you not to name your first parameter using \"with\", so declaring your method like this raises a warning:\r\n\r\nfunc doSomething(withFoo: Int) { }\r\n\r\nBecause then it won't be clear what you mean when you call\r\n\r\nself.doSomething(5)\r\n\r\nThis is all fine so far. The problem is that if the first parameter is optional, then the calling convention is different. Suppose that I declare my method like this:\r\n\r\nfunc doSomething(withFoo foo: Int = 5) { }\r\n\r\nI can call it like this:\r\n\r\nself.doSomething() // foo defaults to 5\r\n\r\nOr like this:\r\n\r\nself.doSomething(withFoo: 7) // foo is 7\r\n\r\nThe problem is that the compiler doesn't want me to name my first parameter with a \"with\" prefix, and so still complains, even though it makes the code clearer in this case.\r\n\r\nSteps to Reproduce:\r\nRun sample project. Observe spurious warning.\r\n\r\nExpected Results:\r\nCompiler should recognise that use of withX for first param is appropriate if parameter is optional\r\n\r\nActual Results:\r\nCompiler complains that \"with is implied for first parameter\"\r\n\r\nVersion:\r\n6.1"
    email: nicklockwood81@gmail.com
    modified: "2014-11-14T16:19:59.459299Z"
    number: "18983844"
    number_intvalue: 18983844
    originated: 14/11/2014
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Open
    title: Overzealous warning about swift optional argument naming
