apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "7400284"
    labels:
        datastore_id: "114404"
data:
    classification: UI/Usability
    created: "2009-11-17T15:57:45.019338Z"
    description: "17-Nov-2009 02:03 PM Emanuele Vulcano:\r\nI will refrain from introducing the problem of background apps on iPhone since you probably have already attacked the problem in a large number of ways as of now. I will simply mention that background apps can be useful in many cases where push notifications cannot (the two most glaring cases being music playback in third-party apps and VoIP).\r\n\r\nWhat follows is a proposal on how to fix this problem that has the characteristic of altering the iPhone's UI and user experience/mental model minimally by exploiting UI paths already used for push notifications.\r\n\r\nThe experience -- FROM THE USER POINT OF VIEW -- for third-party apps in the background would, in this proposal, be as follows:\r\n• The first time the application wishes to run in the background, an alert is displayed with the following text:\r\n[ Application %@ would like to continue running when hidden. This may reduce the iPhone's battery life. ]\r\nbuttons: < Don't allow > < OK >\r\n\r\nThis is intended to mimic the GPS authorization alert.\r\n\r\n• When the application is doing something that is useful to background (for example: while logged on to VoIP; or while playing music), pressing the Home button does not stop that operation. The Home screen icon is augmented by showing a blue or green dot (maybe reminiscent of the glowing dot on Mac OS X's 10.5+ Dock) at the right or left of the app name beneath its icon.\r\n\r\nSo, for example, if say Pandora backgrounds, the name is shown as \"• Pandora\" with the dot glowing blue.\r\n\r\n• When the user taps the running application's icon in the Home screen, the app is as she had left it.\r\n\r\n• When the user taps and holds on the running application's icon in the Home screen, triggering Home icon reordering (wobbly icons), the following alert appears immediately:\r\n\r\n[ %@ is running. Do you want to quit it? ]\r\nbuttons: < Cancel > < Quit >\r\n\r\nTouching Quit cancels app icon reordering and causes the application to quit. The dot disappears (fades?). The background operation is no longer performed. Touching Cancel causes the screen to remain in Home icon reordering mode and does not stop the application.\r\n\r\n• While Home icon reordering has already been triggered (wobbly icons), performing a touch on a running app's icon without dragging causes the above alert to appear and behave in the exact same way, except touching Quit does not stop Home icon reordering mode.\r\n\r\n• The OS may automatically quit apps to keep memory usage low, or when the app would cause phone performance to degrade (eg phone calls).\r\n\r\n• The user can revoke the permission to run in background via a switch in what is today the Notifications section of the Settings application, alongside \"Sound\", \"Badge\" and \"Alert\". It may also have the option to remove all such permissions in the Reset pane of General settings, just like GPS permissions.\r\n\r\n-- END USER PERSPECTIVE --\r\n\r\nBy default, applications in this model would behave as they do today (being quit when touching Home). If the developer wishes to enable background processing in her application, she would need to instrument it as follows:\r\n\r\n- The user asks UIApplication asynchronously for permission to enable background processing. For example:\r\n[[UIApplication sharedApplication] beginBackgroundProcessing];\r\n\r\nThe application triggers a delegate method when background processing has been enabled or refused, for example:\r\n- application:(UIApplication*) app didFinishEnablingBackgroundProcessingWithError:(NSError*) e; // if e == nil, background processing is on.\r\n\r\nFrom when the app receives the above method (successful), the application has background processing enabled. Background processing remains enabled until the application relinquishes it, for example via:\r\n[[UIApplication sharedApplication] endBackgroundProcessing];\r\n\r\nWhile background processing is off, the Home button quits the application. While background processing is enabled, the Home button causes the application to resign main and run in the background. While the application runs in the background, it can receive the signal to terminate at any time for any reason (for example, not enough memory; or the user having triggered app quit via the above Home screen gesture sequence).\r\n\r\nThis may warrant additional integration for media applications which may tap into the preexisting next/previous gestures (for example, double-tapping Home to show iPod controls or clicking the headset button would send appropriate messages to the media application, and a play symbol would be shown in the status bar as the app plays music). This integration is made desirable by the fact that the app can now run in the background.\r\n\r\nIt may also warrant additional integration for those apps who want to display notifications to the user to direct his attention to events in the app, in a way similar to today's push notifications.\r\n\r\nThe above has the following qualities:\r\n• User experience is not greatly impacted or not at all impacted by the introduction of background processing.\r\n• The user is in control on whether he wants to have better battery life or a more useful device.\r\n• The default is safe.\r\n• It's perfectly compatible with apps as they are today on the Store.\r\n• UI has to be only minimally modified.\r\n• It's easy to implement for app developers.\r\n\r\nI hope you consider this proposal as a useful data point.\r\n\r\n\r\n17-Nov-2009 02:11 PM Emanuele Vulcano:\r\n'mockup.png' was successfully uploaded\r\n\r\n17-Nov-2009 02:11 PM Emanuele Vulcano:\r\nAttached to this update is a small mockup of what the visual background processing indicator (the dot) could look like.\r\n\r\n17-Nov-2009 02:15 PM Emanuele Vulcano:\r\nAn additional node: in the above, it's unclear that enabled background processing is intended to last until the developer relinquishes it or the app quits, whichever comes first. When the application later restarts, it has again background processing disabled until it's explicitly enabled again. The permission alert only comes up the first time the app tries to enable or if the user previously removed the permission and the app asks again for background processing.\r\n\r\n17-Nov-2009 02:17 PM Emanuele Vulcano:\r\nA last note: it is implied in the above but not explicitly stated that the OS is intended to be as aggressive as possible in quitting applications. For example, an application that relinquishes background processing while already in the background is immediately terminated."
    email: millenomi@gmail.com
    modified: "2011-08-28T05:43:31.678022Z"
    number: "7400284"
    number_intvalue: 7400284
    originated: ""
    parent_number: '&{NULL_VALUE}'
    product: iPhone
    product_version: 3.1.2
    reproducible: Always
    resolved: No
    status: Open
    title: Background processing is unavailable on iPhone for third-party apps.
