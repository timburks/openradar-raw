apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "7223948"
    labels:
        datastore_id: "82417"
data:
    classification: ""
    created: "2009-10-01T09:07:10.043883Z"
    description: "15-Sep-2009 04:49 AM Alexander Potapenko:\r\nThreadSanitizer, a data race detector, reports a number of data races in the Google Chromium media_tests, which rely on the CoreAudio framework.\r\n\r\nTo reproduce:\r\n1. Check out and build ThreadSanitizer as shown at http://code.google.com/p/data-race-test/wiki/ThreadSanitizer:\r\n\r\nVALGRIND_REV=10880\r\nVEX_REV=1914\r\nTSAN_REV=1129\r\nsvn co -r $VALGRIND_REV svn://svn.valgrind.org/valgrind/trunk valgrind\r\ncd valgrind\r\nsvn up -r $VEX_REV      VEX/\r\nsvn co -r $TSAN_REV     http://data-race-test.googlecode.com/svn/trunk/tsan tsan\r\nmkdir tsan/tests\r\ntouch tsan/tests/Makefile.am # Valgrind needs this file.\r\npatch -p 0 < tsan/valgrind.patch\r\n./autogen.sh && ./configure --prefix=`pwd`/inst && make -j 8 && make install\r\n\r\n2. Run ThreadSanitizer on a program that exploits CoreAudio (e.g. say):\r\n$ inst/bin/valgrind --tool=tsan say a\r\n\r\nAttached is the log produced by running ThreadSanitizer on \"say a\".\r\nThe same warnings inside HALRunLoop::* and CAPThread::* are reported when running other CoreAudio-dependent binaries, e.g. Google Chromium tests.\r\n\r\nConsider the following warning (one of those generated by ThreadSanitizer):\r\n==80527== WARNING: Possible data race during write of size 4 at 0x21744448: {{{\r\n==80527==    T0 (locks held: {L74}):\r\n==80527==     #0  CFSetAddValue /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\r\n==80527==     #1  CFRunLoopAddSource /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\r\n==80527==     #2  __CFRunLoopAddItemToCommonModes /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\r\n==80527==     #3  CFSetApplyFunction /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\r\n==80527==     #4  CFRunLoopAddSource /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\r\n==80527==     #5  HALRunLoop::SetCFRunLoop(__CFRunLoop*) /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio\r\n==80527==     #6  HALRunLoop::Start() /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio\r\n...\r\n==80527==   Concurrent read(s) happened at (OR AFTER) these points:\r\n==80527==    T4 (locks held: {}):\r\n==80527==     #0  CFSetGetCount /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\r\n==80527==     #1  CFRunLoopRunSpecific /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\r\n==80527==     #2  CFRunLoopRunInMode /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\r\n==80527==     #3  HALRunLoop::OwnThread(void*) /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio\r\n==80527==     #4  CAPThread::Entry(CAPThread*) /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio\r\n==80527==     #5  ThreadSanitizerStartThread tsan/ts_valgrind_intercepts.c:504\r\n...\r\n}}}\r\n\r\nThis possibly means that a single instance of CFMutableSet is accessed by two concurrent threads without a lock. Such issue may lead to crashes and/or data losses.\r\n\r\n\r\n'tsan-coreaudio.log.txt' was successfully uploaded"
    email: ramosian.glider@gmail.com
    modified: "2011-08-28T05:44:36.317264Z"
    number: "7223948"
    number_intvalue: 7223948
    originated: 15-Sep-2009 04:49 PM
    parent_number: '&{NULL_VALUE}'
    product: ""
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Open
    title: Many possible data races in the CoreAudio framework
