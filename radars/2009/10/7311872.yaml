apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "7311872"
    labels:
        datastore_id: "94406"
data:
    classification: enhancement
    created: "2009-10-17T01:22:34.950149Z"
    description: "Summary:\r\n\r\nInteractions between various graphic technologies (Core Graphics, Core Animation, normal NSViews etc)\r\nis severely hampered by type definitions which are byte-identical but have different names.\r\nFor example:\r\n\r\nCGRect is a struct with two structs, each with two floats.\r\nNSRect is a struct with two structs, each with two floats.\r\n\r\nHowever, a CGRect returned by one object can't be directly used as a an NSRect - simply because they have different typedefs. Casting them doesn't work either, gcc just produces the error: conversion to non-scalar type requested.\r\n\r\nNSColor & CGColor is another example.\r\n\r\nIncompatibilities like this, especially when using NSView, CALayer, CGLayer etc. are just unnecessary and seriously annoying.\r\n\r\nIn addition I noticed that they already have been made equivalent for some environments, here's the #if statement from NSGeometry.h: (extract)\r\n\r\n#if __LP64__ || TARGET_OS_EMBEDDED || TARGET_OS_IPHONE || TARGET_OS_WIN32 || NS_BUILD_32_LIKE_64\r\n\r\ntypedef CGRect NSrect;\r\n\r\n#else\r\n\r\ntypedef struct _NSRect {\r\n   NSPoint origin;\r\n   NSSize size;\r\n} NSRect;\r\n\r\n#endif"
    email: mgprot@opensauce.de
    modified: "2011-08-28T05:44:01.844811Z"
    number: "7311872"
    number_intvalue: 7311872
    originated: 17.10.2009
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: "3.2"
    reproducible: always
    resolved: ""
    status: Open
    title: Incompatible but binary identical typedefs
