apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "3513632"
    labels:
        datastore_id: "71430"
data:
    classification: Serious Bug
    created: "2009-09-01T06:40:00.367041Z"
    description: "17-Dec-2003 08:03 PM W Lewis:\r\n* SUMMARY \r\n\r\nCreating an NSNumber using the +numberWithUnsignedInt: treats its argument as a signed integer, not as an unsigned integer. If the argument is a positive number greater than (2^31-1), then the NSNumber that is created contains a negative number.\r\n\r\n* STEPS TO REPRODUCE \r\n\r\nCreate an NSNumber by calling [NSNumber numberWithUnsignedInt:] with a (positive) value larger than INT_MAX but smaller than UINT_MAX. Examine the returned object by calling -description, -longLongValue, etc., and observe that it actually contains a negative number. The following short C program will demonstrate this:\r\n\r\n\r\n\r\n#import <Foundation/Foundation.h>\r\nint main()\r\n{\r\n  NSAutoreleasePool *pool;\r\n  NSNumber *num;\r\n  unsigned int ui;\r\n  long long ll;\r\n  int i;\r\n\r\n  printf(\"Foundation: %g CoreFoundation: %g\\n\", \r\n        NSFoundationVersionNumber,\r\n        kCFCoreFoundationVersionNumber);\r\n\r\n  pool = [[NSAutoreleasePool alloc] init];\r\n\r\n  ui = 1;\r\n  for(i = 0; i < 20; i++) {\r\n    num = [NSNumber numberWithUnsignedInt:ui];\r\n    ll = [num longLongValue];\r\n    printf(\"i=%2d ui=%12u (0x%08x) num=%12s ll=%12lld\\n\", i, ui, ui, [[num description] cString], ll);\r\n    ui *= 10;\r\n  }\r\n\r\n  [pool release];\r\n}\r\n\r\n\r\n* RESULTS / REGRESSION\r\n\r\nOn my 10.1.x test system, the program behaves as expected. On my 10.2.x and 10.3.x test systems, the program behaves incorrectly.\r\n\r\nHere is sample output from the above program when run on four different systems. The first system is running 10.1.5 (5S66) and the program behaves correctly. Notice that on each line, the three decimal representations are all the same:\r\n\r\nFoundation: 425 CoreFoundation: 227.3\r\ni= 0 ui=           1 (0x00000001) num=           1 ll=           1\r\ni= 1 ui=          10 (0x0000000a) num=          10 ll=          10\r\ni= 2 ui=         100 (0x00000064) num=         100 ll=         100\r\ni= 3 ui=        1000 (0x000003e8) num=        1000 ll=        1000\r\ni= 4 ui=       10000 (0x00002710) num=       10000 ll=       10000\r\ni= 5 ui=      100000 (0x000186a0) num=      100000 ll=      100000\r\ni= 6 ui=     1000000 (0x000f4240) num=     1000000 ll=     1000000\r\ni= 7 ui=    10000000 (0x00989680) num=    10000000 ll=    10000000\r\ni= 8 ui=   100000000 (0x05f5e100) num=   100000000 ll=   100000000\r\ni= 9 ui=  1000000000 (0x3b9aca00) num=  1000000000 ll=  1000000000\r\ni=10 ui=  1410065408 (0x540be400) num=  1410065408 ll=  1410065408\r\ni=11 ui=  1215752192 (0x4876e800) num=  1215752192 ll=  1215752192\r\ni=12 ui=  3567587328 (0xd4a51000) num=  3567587328 ll=  3567587328\r\ni=13 ui=  1316134912 (0x4e72a000) num=  1316134912 ll=  1316134912\r\ni=14 ui=   276447232 (0x107a4000) num=   276447232 ll=   276447232\r\ni=15 ui=  2764472320 (0xa4c68000) num=  2764472320 ll=  2764472320\r\ni=16 ui=  1874919424 (0x6fc10000) num=  1874919424 ll=  1874919424\r\ni=17 ui=  1569325056 (0x5d8a0000) num=  1569325056 ll=  1569325056\r\ni=18 ui=  2808348672 (0xa7640000) num=  2808348672 ll=  2808348672\r\ni=19 ui=  2313682944 (0x89e80000) num=  2313682944 ll=  2313682944\r\n\r\n\r\nHere is the output from two different systems running 10.2.8 (6R73) (presumably at different SoftwareUpdate levels --- note the different framework versions). Notice that any integers with the high bit set are misinterpreted as being negative numbers when converted to an NSNumber.\r\n\r\nFoundation: 462.7 CoreFoundation: 263.5\r\ni= 0 ui=           1 (0x00000001) num=           1 ll=           1\r\ni= 1 ui=          10 (0x0000000a) num=          10 ll=          10\r\ni= 2 ui=         100 (0x00000064) num=         100 ll=         100\r\ni= 3 ui=        1000 (0x000003e8) num=        1000 ll=        1000\r\ni= 4 ui=       10000 (0x00002710) num=       10000 ll=       10000\r\ni= 5 ui=      100000 (0x000186a0) num=      100000 ll=      100000\r\ni= 6 ui=     1000000 (0x000f4240) num=     1000000 ll=     1000000\r\ni= 7 ui=    10000000 (0x00989680) num=    10000000 ll=    10000000\r\ni= 8 ui=   100000000 (0x05f5e100) num=   100000000 ll=   100000000\r\ni= 9 ui=  1000000000 (0x3b9aca00) num=  1000000000 ll=  1000000000\r\ni=10 ui=  1410065408 (0x540be400) num=  1410065408 ll=  1410065408\r\ni=11 ui=  1215752192 (0x4876e800) num=  1215752192 ll=  1215752192\r\ni=12 ui=  3567587328 (0xd4a51000) num=  -727379968 ll=  -727379968\r\ni=13 ui=  1316134912 (0x4e72a000) num=  1316134912 ll=  1316134912\r\ni=14 ui=   276447232 (0x107a4000) num=   276447232 ll=   276447232\r\ni=15 ui=  2764472320 (0xa4c68000) num= -1530494976 ll= -1530494976\r\ni=16 ui=  1874919424 (0x6fc10000) num=  1874919424 ll=  1874919424\r\ni=17 ui=  1569325056 (0x5d8a0000) num=  1569325056 ll=  1569325056\r\ni=18 ui=  2808348672 (0xa7640000) num= -1486618624 ll= -1486618624\r\ni=19 ui=  2313682944 (0x89e80000) num= -1981284352 ll= -1981284352\r\n\r\nFoundation: 462.8 CoreFoundation: 263.5\r\ni= 0 ui=           1 (0x00000001) num=           1 ll=           1\r\ni= 1 ui=          10 (0x0000000a) num=          10 ll=          10\r\ni= 2 ui=         100 (0x00000064) num=         100 ll=         100\r\ni= 3 ui=        1000 (0x000003e8) num=        1000 ll=        1000\r\ni= 4 ui=       10000 (0x00002710) num=       10000 ll=       10000\r\ni= 5 ui=      100000 (0x000186a0) num=      100000 ll=      100000\r\ni= 6 ui=     1000000 (0x000f4240) num=     1000000 ll=     1000000\r\ni= 7 ui=    10000000 (0x00989680) num=    10000000 ll=    10000000\r\ni= 8 ui=   100000000 (0x05f5e100) num=   100000000 ll=   100000000\r\ni= 9 ui=  1000000000 (0x3b9aca00) num=  1000000000 ll=  1000000000\r\ni=10 ui=  1410065408 (0x540be400) num=  1410065408 ll=  1410065408\r\ni=11 ui=  1215752192 (0x4876e800) num=  1215752192 ll=  1215752192\r\ni=12 ui=  3567587328 (0xd4a51000) num=  -727379968 ll=  -727379968\r\ni=13 ui=  1316134912 (0x4e72a000) num=  1316134912 ll=  1316134912\r\ni=14 ui=   276447232 (0x107a4000) num=   276447232 ll=   276447232\r\ni=15 ui=  2764472320 (0xa4c68000) num= -1530494976 ll= -1530494976\r\ni=16 ui=  1874919424 (0x6fc10000) num=  1874919424 ll=  1874919424\r\ni=17 ui=  1569325056 (0x5d8a0000) num=  1569325056 ll=  1569325056\r\ni=18 ui=  2808348672 (0xa7640000) num= -1486618624 ll= -1486618624\r\ni=19 ui=  2313682944 (0x89e80000) num= -1981284352 ll= -1981284352\r\n\r\nAnd finally, here is output from a system running 10.3.2 (7D24). It behaves the same as the 10.2.x systems:\r\n\r\nFoundation: 500.3 CoreFoundation: 299\r\ni= 0 ui=           1 (0x00000001) num=           1 ll=           1\r\ni= 1 ui=          10 (0x0000000a) num=          10 ll=          10\r\ni= 2 ui=         100 (0x00000064) num=         100 ll=         100\r\ni= 3 ui=        1000 (0x000003e8) num=        1000 ll=        1000\r\ni= 4 ui=       10000 (0x00002710) num=       10000 ll=       10000\r\ni= 5 ui=      100000 (0x000186a0) num=      100000 ll=      100000\r\ni= 6 ui=     1000000 (0x000f4240) num=     1000000 ll=     1000000\r\ni= 7 ui=    10000000 (0x00989680) num=    10000000 ll=    10000000\r\ni= 8 ui=   100000000 (0x05f5e100) num=   100000000 ll=   100000000\r\ni= 9 ui=  1000000000 (0x3b9aca00) num=  1000000000 ll=  1000000000\r\ni=10 ui=  1410065408 (0x540be400) num=  1410065408 ll=  1410065408\r\ni=11 ui=  1215752192 (0x4876e800) num=  1215752192 ll=  1215752192\r\ni=12 ui=  3567587328 (0xd4a51000) num=  -727379968 ll=  -727379968\r\ni=13 ui=  1316134912 (0x4e72a000) num=  1316134912 ll=  1316134912\r\ni=14 ui=   276447232 (0x107a4000) num=   276447232 ll=   276447232\r\ni=15 ui=  2764472320 (0xa4c68000) num= -1530494976 ll= -1530494976\r\ni=16 ui=  1874919424 (0x6fc10000) num=  1874919424 ll=  1874919424\r\ni=17 ui=  1569325056 (0x5d8a0000) num=  1569325056 ll=  1569325056\r\ni=18 ui=  2808348672 (0xa7640000) num= -1486618624 ll= -1486618624\r\ni=19 ui=  2313682944 (0x89e80000) num= -1981284352 ll= -1981284352\r\n\r\n\r\n* NOTES\r\n\r\n\r\n\r\n\r\n31-Aug-2005 03:26 PM W Lewis:\r\nThe problem persists on 10.4. What, does nobody use NSNumber?\r\n\r\nFoundation: 567 CoreFoundation: 368.1\r\ni= 0 ui=           1 (0x00000001) num=           1 ll=           1\r\ni= 1 ui=          10 (0x0000000a) num=          10 ll=          10\r\ni= 2 ui=         100 (0x00000064) num=         100 ll=         100\r\ni= 3 ui=        1000 (0x000003e8) num=        1000 ll=        1000\r\ni= 4 ui=       10000 (0x00002710) num=       10000 ll=       10000\r\ni= 5 ui=      100000 (0x000186a0) num=      100000 ll=      100000\r\ni= 6 ui=     1000000 (0x000f4240) num=     1000000 ll=     1000000\r\ni= 7 ui=    10000000 (0x00989680) num=    10000000 ll=    10000000\r\ni= 8 ui=   100000000 (0x05f5e100) num=   100000000 ll=   100000000\r\ni= 9 ui=  1000000000 (0x3b9aca00) num=  1000000000 ll=  1000000000\r\ni=10 ui=  1410065408 (0x540be400) num=  1410065408 ll=  1410065408\r\ni=11 ui=  1215752192 (0x4876e800) num=  1215752192 ll=  1215752192\r\ni=12 ui=  3567587328 (0xd4a51000) num=  -727379968 ll=  -727379968\r\ni=13 ui=  1316134912 (0x4e72a000) num=  1316134912 ll=  1316134912\r\ni=14 ui=   276447232 (0x107a4000) num=   276447232 ll=   276447232\r\ni=15 ui=  2764472320 (0xa4c68000) num= -1530494976 ll= -1530494976\r\ni=16 ui=  1874919424 (0x6fc10000) num=  1874919424 ll=  1874919424\r\ni=17 ui=  1569325056 (0x5d8a0000) num=  1569325056 ll=  1569325056\r\ni=18 ui=  2808348672 (0xa7640000) num= -1486618624 ll= -1486618624\r\ni=19 ui=  2313682944 (0x89e80000) num= -1981284352 ll= -1981284352\r\n\r\n\r\n27-Feb-2006 06:22 PM W Lewis:\r\nThe problem persists unchanged on:\r\n   10.4.4 (8G32) ppc, Foundation: 567.21 CoreFoundation: 368.25\r\n   10.4.5 (8G1454), intel, Foundation: 567.25 CoreFoundation: 368.26, test application compiled for ppc\r\n   10.4.5 (8G1454), intel, Foundation: 567.25 CoreFoundation: 368.26, test application compiled for intel\r\n\r\n\r\n\r\n06-Dec-2006 05:58 PM W Lewis:\r\nStill broken on Leopard 9A303. C'mon, guys, this isn't rocket science.\r\n#import <Foundation/Foundation.h>\r\n\r\nchar *compstr(NSNumber *a, NSNumber *b)\r\n{\r\n  switch([a compare:b]) {\r\n    case NSOrderedDescending: return \"NSOrderedDescending\";\r\n    case NSOrderedSame: return \"NSOrderedSame\";\r\n    case NSOrderedAscending: return \"NSOrderedAscending\";\r\n  }\r\n}\r\n\r\n\r\nint main()\r\n{\r\n  NSAutoreleasePool *pool;\r\n  NSNumber *num;\r\n  unsigned int ui;\r\n  long long ll;\r\n  int i;\r\n\r\n  printf(\"Foundation: %g CoreFoundation: %g\\n\", \r\n        NSFoundationVersionNumber,\r\n        kCFCoreFoundationVersionNumber);\r\n\r\n  pool = [[NSAutoreleasePool alloc] init];\r\n\r\n  unsigned int v1, v2, v3, vZero;\r\n  v1 = 2147483640;\r\n  v2 = v1 + 20;\r\n  v3 = UINT_MAX;\r\n  vZero = 0;\r\n\r\n  printf(\"%u < %u  -->  %d\\n\", v1, v2, v1<v2);\r\n  printf(\"%u < %u  -->  %d\\n\", v1, v3, v1<v3);\r\n\r\n  NSNumber *n1, *n2, *n3, *nZero;\r\n  n1 = [NSNumber numberWithUnsignedInt:v1];\r\n  n2 = [NSNumber numberWithUnsignedInt:v2];\r\n  n3 = [NSNumber numberWithUnsignedInt:v3];\r\n  nZero = [NSNumber numberWithUnsignedInt:0];\r\n\r\n  printf(\"%u -> \\\"%s\\\"\\n\", v1, [[n1 description] cString]);\r\n  printf(\"%u -> \\\"%s\\\"\\n\", v2, [[n2 description] cString]);\r\n  printf(\"%u -> \\\"%s\\\"\\n\", v3, [[n3 description] cString]);\r\n\r\n  printf(\"(%u or %s) compare: (%u or %s)  --> %s\\n\", v1, [[n1 description] cString], v2, [[n2 description] cString], compstr(n1, n2));\r\n  printf(\"(%u or %s) compare: (%u or %s)  --> %s\\n\", v1, [[n1 description] cString], v3, [[n3 description] cString], compstr(n1, n3));\r\n  printf(\"(%u or %s) compare: (%u or %s)  --> %s\\n\", v1, [[n1 description] cString], vZero, [[nZero description] cString], compstr(n1, nZero));\r\n  printf(\"(%u or %s) compare: (%u or %s)  --> %s\\n\", v2, [[n2 description] cString], vZero, [[nZero description] cString], compstr(n2, nZero));\r\n\r\n  [pool release];\r\n}\r\n\r\nFoundation: 619.2 CoreFoundation: 418\r\n2147483640 < 2147483660  -->  1\r\n2147483640 < 4294967295  -->  1\r\n2147483640 -> \"2147483640\"\r\n2147483660 -> \"-2147483636\"\r\n4294967295 -> \"-1\"\r\n(2147483640 or 2147483640) compare: (2147483660 or -2147483636)  --> NSOrderedDescending\r\n(2147483640 or 2147483640) compare: (4294967295 or -1)  --> NSOrderedDescending\r\n(2147483640 or 2147483640) compare: (0 or 0)  --> NSOrderedDescending\r\n(2147483660 or -2147483636) compare: (0 or 0)  --> NSOrderedAscending\r\n\r\n\r\n\r\n\r\n25-Apr-2007 04:04 PM W Lewis:\r\n[Fixed in Leopard 9A410 / Foundation 635.1 / CoreFoundation 435 ]"
    email: wiml@omnigroup.com
    modified: "2011-08-28T05:51:41.853004Z"
    number: "3513632"
    number_intvalue: 3513632
    originated: 17-Dec-2003 08:03 PM
    parent_number: '&{NULL_VALUE}'
    product: Mac OS X
    product_version: 10.2.0-10.5.0
    reproducible: Yes
    resolved: 25-Apr-2007
    status: Closed
    title: 'NSNumber numberWithUnsignedInt: treats its arg as a signed int'
