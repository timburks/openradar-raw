apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "7230346"
    labels:
        datastore_id: "75402"
data:
    classification: Crash/Hang/Data Loss
    created: "2009-09-17T01:36:20.621125Z"
    description: "Summary:\r\nCalling ExtAudioFileDispose() on a sufficiently large MP4 audio file causes a crash. All crash reports have the same final several stack frames within the AudioToolbox.\r\n\r\nThe salient details are:\r\n  * ExtAudioFileDispose() calls AudioFileClose()\r\n  * AudioFileClose() calls MP4AudioFile::Close()\r\n  * As part of closing the mp4 file, MP4AudioFile::FillGaplessString() is called\r\n  * MP4AudioFile::FillGaplessString() calls UInt32ToHexString with a sufficiently large value (value >= 0x10000000; see NOTES below)\r\n  * UInt32ToHexString() calls sprintf() with a too-small stack-allocated buffer\r\n  * At the end of UInt32ToHexString(), __stack_chk_guard is found to have been altered, and __stack_chk_fail() is called.\r\n  * __stack_chk_fail() logs a message and calls __abort(), which terminates the process.\r\n\r\nSee NOTES for the corresponding excerpt from a crash report and the attached crash reports for all details.\r\n\r\nThis bug affects the AudioToolbox framework distributed with both Mac OS X 10.6 and 10.6.1.\r\n\r\n\r\nSteps to Reproduce:\r\n  1. Download ProfCast (see http://www.profcast.com/downloads/)\r\n  2. Install ProfCast.\r\n  3. Launch ProfCast.\r\n  4. Select Create a New Recording from the initial window (or hit Cmd-N, or choose File > New Recording).\r\n  5. Click the Start Recording button in the upper left portion of the window that appears.\r\n  6. Record for a long time â€“ 2 hours works, 45 minutes does not.\r\n  7. Click \"Pause Recording\".\r\n\r\n\r\nExpected Results:\r\nRecording pauses and the button changes to say \"Resume Recording\". Clicking the button resumes recording.\r\n\r\n\r\nActual Results:\r\nThe application crashes while attempting to write the audio file. The audio file is incomplete and unusable, leading to total data loss.\r\n\r\n\r\nRegression:\r\nThe code involved has worked fine for years for users running Mac OS X 10.4 and 10.5. MP4AudioFile::FillGaplessString and UInt32ToHexString do not exist in Mac OS X 10.5's AudioToolbox framework. This is a new bug introduced with Mac OS X 10.6 and still present in Mac OS X 10.6.1.\r\n\r\n\r\nNotes:\r\nSince upgrading to Mac OS X 10.6, some users of ProfCast have reported crashes leading to loss of the entire recording when they pause recording. Their crash reports are all due to this issue. This is a serious problem for institutional users of ProfCast who rely on the application to record lectures or other events.\r\n\r\nOne workaround might be breaking up a long recording session into several smaller sessions, but this is less than ideal.\r\n\r\nThe crash report stack frames within the AudioToolbox are these:\r\nThread 0 Crashed:  Dispatch queue: com.apple.main-thread\r\n0   libSystem.B.dylib             \t0x965e0972 __kill + 10\r\n1   libSystem.B.dylib             \t0x965e0964 kill$UNIX2003 + 32\r\n2   libSystem.B.dylib             \t0x96673ba5 raise + 26\r\n3   libSystem.B.dylib             \t0x96689bf1 __abort + 124\r\n4   libSystem.B.dylib             \t0x9666c934 release_file_streams_for_task + 0\r\n5   ....audio.toolbox.AudioToolbox\t0x98267497 UInt32ToHexString(char*, unsigned long, unsigned long) + 183\r\n6   ....audio.toolbox.AudioToolbox\t0x98267556 MP4AudioFile::FillGaplessString(char*) + 110\r\n7   ....audio.toolbox.AudioToolbox\t0x9826a3ed MP4AudioFile::Close() + 627\r\n8   ....audio.toolbox.AudioToolbox\t0x981c7a25 AudioFileClose + 77\r\n9   ....audio.toolbox.AudioToolbox\t0x9822aef6 ExtAudioFile::Close() + 206\r\n10  ....audio.toolbox.AudioToolbox\t0x9822b03e ExtAudioFile::~ExtAudioFile() + 40\r\n11  ....audio.toolbox.AudioToolbox\t0x9822089c XExtAudioFile::~XExtAudioFile() + 92\r\n12  ....audio.toolbox.AudioToolbox\t0x98220554 ExtAudioFileDispose + 37\r\n\r\nNote that release_file_streams_for_task + 0 is the instruction following the last instruction of __stack_chk_fail, which jumps directly to __abort and never returns.\r\n\r\nThe stack check failure in UInt32ToHexString() is easy to trigger directly. It occurs whenever the most-significant half-byte of the UInt32 value supplied for conversion to a hex string is non-null, that is, for all UInt32 values >= 0x10000000 (1 + 7 zeros). This appears to be because the function supplies an 8-byte stack buffer to sprintf together with a \"%X\" format string. The crashing values require 9 characters: 8 characters to represent the value itself plus 1 string-final NUL byte. Using a 9-byte buffer in UInt32ToHexString() would fix the problem. Using snprintf() instead of sprintf() would mask the problem by failing to write the least significant hex digit.\r\n\r\nAttachments:\r\n  * Crash Reports.zip: 4 different crash reports encountered by users of ProfCast, 3 under 10.6.0 and 1 under 10.6.1\r\n  * smash_test.zip: source code demonstrating UInt32ToHexString's stack-smashing and a crash report produced under 10.6.1 by compiling and running a messier ancestor of the supplied source code\r\n\r\nCalling UInt32ToHexString(buffer, buffer_length, 0x10000000) is enough to trigger the crash, but getting access to UInt32ToHexString, a private symbol, requires jumping through some hoops."
    email: jeremyw.sherman@gmail.com
    modified: "2015-10-22T02:54:48.65175Z"
    number: "7230346"
    number_intvalue: 7230346
    originated: 16-Sep-2009 08:25 PM
    parent_number: "7100093"
    product: Mac OS X
    product_version: 10.6/10A432
    reproducible: Always
    resolved: Closed
    status: Duplicate/7100093
    title: '[AudioToolbox] MP4AudioFile::Close crashes writing large files'
