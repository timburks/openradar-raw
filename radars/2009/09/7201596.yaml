apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "7201596"
    labels:
        datastore_id: "73417"
data:
    classification: Other bug
    created: "2009-09-05T15:31:34.618826Z"
    description: "* Summary\r\n\r\nCurrently, the automatically activated data reordering functionality from Xcode 3.2's ld64 causes programs generated by our compiler to crash.\r\n\r\nTo solve this problem, and to prevent similar problems from happening in the future, I would like to ask for an assembler directive to either designate\r\na) symbols that must not be reordered by the linker, or\r\nb) a group of symbols that must remain together in the original order at all times\r\n\r\nFurthermore, and this is very important to us, it should be possible to use something like the following:\r\n\r\n.if __NO_REORDER_SYM_SUPPORTED__\r\n.noreorder sym1\r\n.noreorder sym2\r\n.noreorder sym3\r\n.endif\r\n\r\nThis way, we can output code that will correctly assemble no matter which version of \"as\" our user is using.\r\n\r\n\r\nExplanation:\r\n\r\nOur compiler has support for a language features called \"resource strings\". Each string has a unique identifier, which makes them easy to replace with translated versions (much like the translation strings in plists).\r\n\r\nThe resource strings themselves are collected per unit in a table with the following structure in the assembler file:\r\n\r\n***\r\n.data\r\n global_unitx_start_label:\r\n [metadata]\r\n\r\n global_string1_label:\r\n [string 1 data]\r\n\r\n global_string2_label:\r\n [string 2 data]\r\n\r\n global_unitx_end_label:\r\n***\r\n\r\nI.e., there are global start and end symbols, and in between each string is also identified by a global symbol. This enables easily referring the string values from inside other compilation units.\r\n\r\nThe compiler also adds an array to the main program that collects references to all of these start and end labels:\r\n\r\n.globl  FPC_RESOURCESTRINGTABLES\r\nFPC_RESOURCESTRINGTABLES:\r\n       .long   1                        // number of start/end pairs\r\n       .long   global_unitx_start_label\r\n       .long   global_unitx_end_label\r\n\r\nWhen the program ends, code walks over this array and subsequently over all resource strings between the start and end labels to finalise the values assigned during run time.\r\n\r\nIt is clear that for this to work, the start and end labels as well as the individual resource string symbols must remain in their original order.\r\n\r\nWhen compiling a dynamic library under Mac OS X 10.6, ld notices that the data following the start label and all string labels contains relocations and hence moves them to the start of the data section (as explained in the ld man page comments for the -no_order_data option). The end label remains behind, and as a result the code crashes when it walks over the array to finalise it.\r\n\r\nWhat I therefore would need is a way to specify in the assembler file that particular symbols must not be reordered by the linker.\r\n\r\nI can work around this particular problem by simply adding a dummy relocated value after the end label (then it will be moved along with the rest). I assume however that LD will become more aggressive regarding all kinds of reordering in the future, and this workaround will probably break at that moment.\r\n\r\nI know about the \"-order_file\" linker parameter, but it is too blunt: I'm not interested in telling the linker *where* it should put this data, only that it should either leave it alone or keep it together.\r\n\r\n\r\n* Steps to reproduce\r\n\r\nUnpack the attached archive, then (x86_64 code)\r\n1) cd ldreorderdata\r\n2) ./build.sh -no_order_data\r\n3) nm liblib.dylib |grep '_RESSTR_P\\$TEST'|sort\r\n4) ./prog\r\n5) ./build.sh\r\n6) nm liblib.dylib |grep '_RESSTR_P\\$TEST'|sort\r\n7) ./prog\r\n\r\n\r\n* Expected results\r\n\r\nThe symbols displayed by nm should all be exactly 32 bytes (0x20 bytes) apart.\r\n\r\nFurthermore, twice the following output from \"prog\":\r\n\r\nfirststring\r\nsecondstring\r\n\r\n\r\n* Actual results\r\n\r\nWhen linked with -no_order_data, everything is fine.\r\n\r\nWhen linked without -no_order_data, the address for the end symbol is wrong:\r\n\r\n00000000000269c0 D _RESSTR_P$TEST_START\r\n00000000000269e0 D _RESSTR_P$TEST_FIRSTSTRING\r\n0000000000026a00 D _RESSTR_P$TEST_SECONDSTRING\r\n0000000000026c50 D _RESSTR_P$TEST_END\r\n\r\n(0x26c50 - 0x26a00 == 0x250 != 0x20)\r\n\r\nDue to this problem, the program crashes with a bus error:\r\n\r\n$ ./prog \r\nfirststring\r\nsecondstring\r\nBus error\r\n\r\n\r\n* Regression\r\n\r\nThe problem does not occur with versions of Xcode before 3.2 (except possibly in the iPhone SDK), because they did not reorder data.\r\n\r\n\r\n* Notes\r\n\r\nI've worked around it in a currently unreleased version of our compiler by adding a relocated value after the end label. As mentioned in the summary, I assume things may however break again if ld starts reordering more aggressively.\r\n\r\nAnother possible workaround, as demonstrated in above, is to use -no_reorder_data. Since our compiler also runs on Mac OS X 10.3, that is not a very inviting approach since we'd somehow have to detect first whether the linker supports this option."
    email: jmaebe@gmail.com
    modified: "2011-08-28T05:44:53.974814Z"
    number: "7201596"
    number_intvalue: 7201596
    originated: 05-Sep-2009 05:30 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: 3.2/ld64-95.2.12/cctools-750~70
    reproducible: Always
    resolved: ""
    status: Open
    title: '[ld/as] Data reordering cannot be selectively disabled'
