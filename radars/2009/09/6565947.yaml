apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "6565947"
    labels:
        datastore_id: "74406"
data:
    classification: Enhancement
    created: "2009-09-04T05:57:46.186667Z"
    description: "06-Feb-2009 10:52 PM Brent Fulgham:\r\nSUMMARY:\r\nThe attached patch (opencflite.diff) contains the changes we made to the CF-476.17 sources to get them to build and run on Windows, Linux, as well as the original Mac OS X.\r\n\r\nIf we can get even some of these changes into the official CF-lite sources, it will make it much easier to\r\nstay in sync.\r\n\r\nSTEPS TO REPRODUCE:\r\nn/a\r\n\r\nEXPECTED RESULT:\r\nn/a\r\n\r\nACTUAL RESULTS:\r\nn/a\r\n\r\nREGRESSION:\r\nn/a\r\n\r\nNOTES:\r\nSome Windows implementations that had existed in earlier releases were merged in and hopefully brought in line with the Mac OS X code.\r\n\r\nChanges were as follows:\r\n\r\n1.  Generally changed bzero to memset wherever this was found.  I had\r\nfiled an old bug about this:  (separately filed as rdar://problem/6372068.)\r\n2.  I found I had to add a lot of casts to get Visual Studio 2005 to compile the code, so many changes are just casts to silence the compiler.\r\n3.  The sources look like they had been 'sanitized' before shipping  DEPLOYMENT_TARGET_WINDOWS was replaced by 0.  In some cases, other platforms appear to have been removed.  We have replaced these guards with DEPLOYMENT_TARGET_WINDOWS and DEPLOYMENT_TARGET_LINUX as needed.  This was originally documented (as rdar://problem/6386417).  We have provided implementations for these, which are probably not as full featured, correct, or efficient as the 'real' implementations.\r\n\r\nMore specifically:\r\n\r\n* CFBase.h:  The objective-C stuff gave Visual Studio fits, resulting in some ugly macro hacks.\r\n* CFBase.c:  We had to define HALT differently for Linux, with two underscores, so that code that references the symbol with only two underscores match the symbol.\r\n\r\n* CFBundle.c:\r\n (a) Added some macros for Windows versions of the POSIX file calls.\r\n (b) While Linux does have DLFCN support it does NOT define RTLD_FIRST as Mac OS X and Solaris do. To avoid making a mess of #ifdefs in the code, we defined CF_RTLD_FIRST to be RTLD_FIRST for platforms that have it; otherwise, define it to 0.\r\n\r\n* CFDate.c: Added lots of time/date handling using internal windows routines.  Some of this used to exist but was stripped out in later CF releases.\r\n\r\n* CFFileUtilities.c:  Linux directory entry structures do not have the 'd_namlen' field. However, as this is identical to namelen = strlen(dp->d_name) and this was already calculated in the routine, we\r\nmodified the logic to just past 'namelen'.  Otherwise, we'd have to do some #ifdef around this logic, which seems silly for this case.\r\n\r\n* CFInternal.h:\r\n(a)  An equivalent STACK_BUFFER_DECL implementation for Windows is provided.\r\n(b)  Here we added a group of common helper routines to handle some platform-specific calls that were handled different ways throughout the sources:\r\n    (1) _CFAtomicCompareAndSwap32Barrier\r\n    (2) _CFAtomicCompareAndSwapPtrBarrier\r\n    (3) _CFAtomicIncrement32\r\n    (4) _CFMemoryBarrier\r\n    (5) _CFIsSetUgid\r\n(c)  Provided Linux spinlock implementation.\r\n(d)  I just noticed there's some Cocotron stuff in here that you can ignore.\r\n\r\n* CFPort and CFPortSet in CFRunLoop.c:  While the typedefs will be different, we observed that Windows and Linux could share much of the CFPortSet implementation simply by being more judicious about typedefs. Basically:\r\n\r\n      typedef HANDLE __CFPort;\r\n      #define CFPORT_NULL NULL\r\n\r\n      // A simple dynamic array of HANDLEs, which grows to a high-water mark\r\n      typedef struct ___CFPortSet {\r\n          uint16_t    used;\r\n          uint16_t    size;\r\n          HANDLE  *handles;\r\n          CFSpinLock_t lock;      // insert and remove must be thread safe\r\n      } *__CFPortSet;\r\n\r\n      Because __CFPort is already typedefed as handle, then the structure field:\r\n\r\n          HANDLE  *handles;\r\n\r\n      can instead be:\r\n\r\n          __CFPort *handles;\r\n\r\n      Likewise, any (HANDLE) or (HANDLE *) casts can be (__CFPort) and (__CFPort *).\r\n\r\n\r\n'opencflite.diff' was successfully uploaded"
    email: bfulgham@gmail.com
    modified: "2011-08-28T05:48:09.339958Z"
    number: "6565947"
    number_intvalue: 6565947
    originated: 06-Feb-2009
    parent_number: '&{NULL_VALUE}'
    product: Mac OS X
    product_version: CF-476.17
    reproducible: ""
    resolved: ""
    status: Open
    title: Linux, Windows, and Mac OS X CF-lite (Patch)
