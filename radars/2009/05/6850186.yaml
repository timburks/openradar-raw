apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "6850186"
    labels:
        datastore_id: "36414"
data:
    classification: Serious Bug
    created: "2009-05-02T17:45:48.123965Z"
    description: "02-May-2009 10:39 AM Kyle McKay:\r\n-------\r\nSummary\r\n-------\r\ngdb fails to interrupt the program being debugged if the program is blocking SIGINT.\r\n\r\nWhen using the sigwait function to retrieve signals, the program is expected to block them.  SIGINT is a commonly handled signal.  Any program using sigwait to retrieve signals and handling SIGINT this way will not be interruptible by gdb.\r\n\r\nThe Xcode debugger is also affected by this problem since it uses gdb.\r\n\r\n------------------\r\nSteps to Reproduce\r\n------------------\r\n1. Save this file as noint.c:\r\n\r\n  #include <stddef.h>\r\n  #include <unistd.h>\r\n  #include <signal.h>\r\n  \r\n  int main(int argc, char *argv[])\r\n  {\r\n    sigset_t sigs;\r\n    sigfillset(&sigs);\r\n    sigprocmask(SIG_SETMASK, &sigs, NULL);\r\n    for (;;) {\r\n      pause();\r\n      write(STDERR_FILENO, \"Nope\\n\", 5);\r\n    }\r\n    return 0;\r\n  }\r\n\r\n2. Compile it like this:\r\n\r\n  gcc -o noint -O0 -g noint.c\r\n\r\n3. Load it under gdb like so:\r\n\r\n  gdb -t /dev/null noint\r\n\r\n4. Then run it with the \"run\" gdb command\r\n\r\n5. Now attempt to interrupt it by pressing Ctrl-C\r\n\r\n6. Notice it's not interruptible and gdb does not regain control\r\n\r\n----------------\r\nExpected Results\r\n----------------\r\nThe expectation is that gdb will regain control when Ctrl-C is pressed.  Commenting out the call to sigprocmask and repeating the steps will result in gdb gaining control when Ctrl-C is pressed.\r\n\r\n-----\r\nNotes\r\n-----\r\nAlthough Xcode runs gdb using the mi interpreter (as opposed to the console interpreter), Xcode has the same problem interrupting the sample code above -- pressing the \"Pause\" button in the Xcode debugger does nothing.\r\n\r\nPatching the gdb source (current as of Mac OS X 10.5.6) found here:\r\n\r\n  http://opensource.apple.com/darwinsource/tarballs/other/gdb-768.tar.gz\r\n\r\nwith the attached interrupt_fix.patch eliminates the problem.\r\n\r\nThe patch makes minor changes to the macosx_child_stop and mi_cmd_exec_interrupt functions.\r\n\r\nHere are the contents of interrupt_fix.patch:\r\n\r\n  --- gdb/macosx/macosx-nat-inferior.c\t2007-09-19 19:03:27.000000000 -0700\r\n  +++ gdb/macosx/macosx-nat-inferior.c\t2009-05-01 10:25:02.000000000 -0700\r\n  @@ -1085,7 +1085,7 @@\r\n     extern pid_t inferior_process_group;\r\n     int ret;\r\n   \r\n  -  ret = kill (inferior_process_group, SIGINT);\r\n  +  ret = kill (inferior_process_group, SIGSTOP);\r\n   }\r\n   \r\n   static void\r\n  --- gdb/mi/mi-main.c\t2007-06-21 18:28:02.000000000 -0700\r\n  +++ gdb/mi/mi-main.c\t2009-05-01 21:38:47.000000000 -0700\r\n  @@ -296,7 +296,7 @@\r\n     else\r\n       {\r\n         int pid = PIDGET (inferior_ptid);\r\n  -      kill (pid, SIGINT);\r\n  +      kill (pid, SIGSTOP);\r\n       }\r\n   \r\n     if (current_command_token) {\r\n\r\n\r\n\r\n'interrupt_fix.patch' was successfully uploaded\r\n\r\n13-May-2009 12:28 AM Kyle McKay:\r\nUpdated patch file (interrupt_fix_963.patch) attached for the most recent Apple gdb sources found here:\r\n\r\n  http://www.opensource.apple.com/tarballs/gdb/gdb-963.tar.gz\r\n\r\nHere are the contents of interrupt_fix_963.patch:\r\n\r\n  --- gdb/infrun.c  2008-03-06 11:18:32.000000000 -0800\r\n  +++ gdb/infrun.c  2009-05-12 23:25:55.000000000 -0700\r\n  @@ -4072,7 +4072,7 @@\r\n             switch ((enum target_signal) signum)\r\n               {\r\n               case TARGET_SIGNAL_TRAP:\r\n  -            case TARGET_SIGNAL_INT:\r\n  +            case TARGET_SIGNAL_STOP:\r\n                 if (!allsigs && !sigs[signum])\r\n                   {\r\n                     if (query (\"%s is used by the debugger.\\n\\\r\n  @@ -4652,7 +4652,7 @@\r\n     /* Signals caused by debugger's own actions\r\n        should not be given to the program afterwards.  */\r\n     signal_program[TARGET_SIGNAL_TRAP] = 0;\r\n  -  signal_program[TARGET_SIGNAL_INT] = 0;\r\n  +  signal_program[TARGET_SIGNAL_STOP] = 0;\r\n   \r\n     /* Signals that are not errors should not normally enter the debugger.  */\r\n     signal_stop[TARGET_SIGNAL_ALRM] = 0;\r\n  --- gdb/macosx/macosx-nat-inferior.c  2008-09-26 15:02:53.000000000 -0700\r\n  +++ gdb/macosx/macosx-nat-inferior.c  2009-05-12 23:10:18.000000000 -0700\r\n  @@ -1107,7 +1107,7 @@\r\n     pid_t pid = PIDGET (inferior_ptid);\r\n     int ret;\r\n   \r\n  -  ret = kill (pid, SIGINT);\r\n  +  ret = kill (pid, SIGSTOP);\r\n   }\r\n   \r\n   static void\r\n\r\n\r\n\r\n'interrupt_fix_963.patch' was successfully uploaded\r\n\r\n13-May-2009 11:31 AM KIT CHEUNG :\r\nThis bug has been closed as Duplicate. We are tracking this known issue under the Bug ID listed above in the bug State (Duplicate/XXXX)."
    email: mackyle@gmail.com
    modified: "2011-08-28T05:46:56.210764Z"
    number: "6850186"
    number_intvalue: 6850186
    originated: 02-May-2009 10:39 AM
    parent_number: "6844166"
    product: Developer Tools
    product_version: xcode312_2621_developerdvd
    reproducible: Always
    resolved: ""
    status: Duplicate/6844166
    title: gdb fails to interrupt program being debugged
