apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "5643496"
    labels:
        datastore_id: "69409"
data:
    classification: Serious Bug
    created: "2009-08-17T09:06:50.973191Z"
    description: "12-Dec-2007 09:13 PM Jonas Maebe:\r\n* Summary\r\n\r\nThe dsymutil part of Xcode 3.0 discards all dwarf-2 debug information generated by our compiler for global variables. It does not do this for gcc-compiled files, and dsymutil part of Xcode 2.5 does not do this either for files compiled by our compiler (at least not under Tiger, I don't have Xcode 2.5 installed under Leopard).\r\n\r\n\r\n* Steps to reproduce (the attached program is compiled for i386)\r\n\r\n1) tar xjf tt.tbz\r\n2) cd globals\r\n3) ./ppas.sh\r\n4) gdb tt\r\n5) b PASCALMAIN\r\n6) run\r\n7) next\r\n8) p mylongvar\r\n9) continue\r\n10) quit\r\n11) dsymutil tt\r\n12) repeat steps 4 till 8\r\n\r\n \r\n* Expected results\r\n\r\nThe value 5 in step 8), both before and after running dsymutil\r\n\r\n\r\n* Actual results\r\n\r\nBefore running dsymutil gdb prints 5 (ok), after running it gdb can no longer find the variable named mylongvar\r\n\r\n\r\n* Regression\r\n\r\nIt works fine when the above steps are carried out under Mac OS X 10.4.11 with Xcode 2.5 installed.\r\n\r\n\r\n* Notes\r\n\r\ndwarfdump confirms the debug information for mylongvar is not present in tt.dSYM/Contents/Resources/DWARF/tt after running dsymutil\r\n\r\n12-Dec-2007 09:15 PM Jonas Maebe:\r\n'tt.tbz' was successfully uploaded\r\n\r\n12-Dec-2007 09:17 PM Jonas Maebe:\r\nNote that due to the case-insensitivity of Pascal, the debug info for mylongvar actually reads MYLONGVAR (and the symbol name is U_P$PROGRAM_MYLONGVAR).\r\n\r\n\r\n14-Dec-2007 04:39 AM <Apple feedback>:\r\nEngineering has determined that this issue behaves as intended based on the following information:\r\n\r\nThere is no debug map entry for MYLONGVAR in the 'tt' executable, there in an nlist entry, but no debug map (N_GSYM) entry. In order for dsymutil to correctly link your global variable, it requires a N_GSYM debug map entry. The names must match in the object file (tt.o) and in the executable with the debug map (tt).\r\n\r\nThe address needn't be correct in the N_GSYM debug map entry (it can be zero). See the existing debug map entry for __stklen for an example:\r\n\r\ndsymutil -s tt | grep __stklen\r\n[    15] 0000c763 20 (N_GSYM       ) 04     0000   0000000000000000 '__stklen'\r\n[  1583] 0000b029 0f (     SECT EXT) 04     0000   000000000001c034 '__stklen'\r\n\r\nThis is necessary due to the fact that the name in the DWARF can be totally different from the name in the linker symbol table (as we are running into in this case). You variable name in code is \"mylongvar\", in the DWARF it is \"MYLONGVAR\" and in the linker symbol table it is \"U_P$PROGRAM_MYLONGVAR\".\r\n\r\nDebug map entries are scoped to the .o file as we can see by dumping the symbol table:\r\n\r\n% dsymutil -s tt\r\n\r\n[     0] 0000c6dd 64 (N_SO         ) 00     0000   0000000000000000 '/Data/dev/fpc/test/dwarf/globals/'\r\n[     1] 0000c6ff 64 (N_SO         ) 00     0000   0000000000000000 'tt.pp'\r\n[     2] 0000c705 66 (N_OSO        ) 00     0001   00000000476187c6 '/Volumes/work/gclayton/Documents/radar/5643496/globals/tt.o'\r\n[     3] 00000001 2e (N_BNSYM      ) 01     0000   0000000000001770\r\n[     4] 0000c741 24 (N_FUN        ) 01     0000   0000000000001770 '_PASCALMAIN'\r\n[     5] 00000001 24 (N_FUN        ) 00     0000   0000000000000029\r\n[     6] 00000001 4e (N_ENSYM      ) 01     0000   0000000000000029\r\n[     7] 00000001 2e (N_BNSYM      ) 01     0000   0000000000001799\r\n[     8] 0000c74d 24 (N_FUN        ) 01     0000   0000000000001799 '_main'\r\n[     9] 00000001 24 (N_FUN        ) 00     0000   0000000000000005\r\n[    10] 00000001 4e (N_ENSYM      ) 01     0000   0000000000000005\r\n[    11] 00000001 2e (N_BNSYM      ) 01     0000   00000000000017a0\r\n[    12] 0000c753 24 (N_FUN        ) 01     0000   00000000000017a0 'fpc_geteipasebx'\r\n[    13] 00000001 24 (N_FUN        ) 00     0000   0000000000000004\r\n[    14] 00000001 4e (N_ENSYM      ) 01     0000   0000000000000004\r\n[    15] 0000c763 20 (N_GSYM       ) 04     0000   0000000000000000 '__stklen'\r\n[    16] 0000c76c 20 (N_GSYM       ) 04     0000   0000000000000000 '__heapsize'\r\n[    17] 0000c777 20 (N_GSYM       ) 04     0000   0000000000000000 '__fpc_valgrind'\r\n[    18] 00000001 64 (N_SO         ) 01     0000   0000000000000000\r\n...\r\n\r\n\r\nWe will need a N_GSYM entry so the output looks something like:\r\n\r\n% dsymutil -s tt | grep MYLONGVAR\r\n[    18] 0000a80e 20 (N_GSYM       ) 04     0000   0000000000000000 'U_P$PROGRAM_MYLONGVAR'\r\n[  1479] 0000a80e 0f (     SECT EXT) 08     0000   000000000001fbd0 'U_P$PROGRAM_MYLONGVAR'\r\n\r\n\r\n\r\n14-Dec-2007 07:48 PM Jonas Maebe:\r\nWe use plain ld, which is responsible for adding these N_GSYM entries. After some debugging I discovered that Leopard's ld does not add an N_GSYM entry for our symbols because they do not necessarily start with an underscore. From ld64-77/ld.cpp line 2559:\r\n\r\n// Synthesize GSYM stab for other globals (but not .eh exception frame symbols)\r\nconst char* name = atom->getName();\r\nif ( (name[0] == '_') && (strcmp(atom->getSectionName(), \"__eh_frame\") != 0) ) {\r\n  globalsStab.atom\t\t= atom;\r\n  globalsStab.type\t\t= N_GSYM;\r\n\r\nSee the first check on the third pasted line. I guess it's more appropriate to change our compiler so it emits all symbol names with a starting underscore than to change ld in this regard (given that we already have to prepend an underscore in case a symbol name starts with L, because otherwise it's interpreted as a local label).\r\n\r\nThanks for pointing me in the right direction regarding the missing N_GSYM stab.\r\n\r\n14-Dec-2007 08:31 PM Jonas Maebe:\r\nFor the record: changing the compiler to add the underscores everywhere indeed solves the problem. Thanks again (and please consider this as another request to open up the source of dsymutil, as in that case I could hopefully have figured this out without needing to bother you; not that I do not appreciate your helpfulness in this, on the contrary)."
    email: jmaebe@gmail.com
    modified: "2011-08-28T05:50:44.705401Z"
    number: "5643496"
    number_intvalue: 5643496
    originated: 12-Dec-2007 09:13 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: "3.0"
    reproducible: Always
    resolved: 14-Dec-2007 04:39 AM
    status: Behaves correctly
    title: '[dsymutil] dsymutil sometimes discards debug information for global variables'
