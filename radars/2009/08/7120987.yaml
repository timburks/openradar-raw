apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "7120987"
    labels:
        datastore_id: "69403"
data:
    classification: Serious Bug
    created: "2009-08-17T08:48:24.723066Z"
    description: "05-Aug-2009 11:08 PM Jonas Maebe:\r\n* Summary\r\n\r\nIf all of the following conditions are true at the same time, the ARM linker assigns a wrong address to the  \"_calledfrominit\" symbol:\r\na) there is a .mod_init_term section pointing to a function, e.g. _initfunc\r\nb) this _initfunc calls another function, e.g. _calledfrominit\r\nc) the call from _initfun to _calledfrominit occurs via a symbol stub\r\nd) there is (at least?) one other global symbol with the same address as _calledfrominit\r\n\r\nI have however attached a simple, artificial test case that demonstrates this problem.\r\n\r\nI don't know how to make GCC generate such code (maybe using C++ with static initialisers in combination with some gcc extension to define symbol aliases), but the Free Pascal Compiler does generate such code (http://www.freepascal.org). If you want to see this bug in a real world example, you can download/install the Free Pascal Compiler for iPhone SDK from http://wiki.freepascal.org/iPhone/iPod_development (note that it always installs globally under /usr/local), create a new Xcode project using the \"iPhone (FPC)\" -> \"OpenGL ES App\" template, and build/run it. It will crash in the _start function.\r\n\r\n\r\n* Steps to reproduce (replace \"/iphone3.0\" in the commands below with whichever iPhoneSDK version you want to test)\r\n1) tar xjf iphonelinkerbug.tbz\r\n2) cd iphonelinkerbug\r\n3) /iphone3.0/Platforms/iPhoneOS.platform/Developer/usr/bin/gcc-4.0 -arch armv6 -isysroot /iphone3.0/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS2.2.1.sdk main.s -o main\r\n4) otool -tV main|less\r\n\r\n* Expected result\r\n\r\nSomething like this:\r\n\r\nmain:\r\n(__TEXT,__text) section\r\n_calledfrominitfuncalias:\r\n00002000        e92d4080        stmdb   sp!, {r7, lr}\r\n00002004        e28d7000        add     r7, sp, #0      ; 0x0\r\n00002008        e59f300c        ldr     r3, [pc, #12]   ; 0x201c\r\n0000200c        e08f3003        add     r3, pc, r3\r\n00002010        e1a00003        mov     r0, r3\r\n00002014        eb00002d        bl      0x20d0  ; symbol stub for: _printf\r\n00002018        e8bd8080        ldmia   sp!, {r7, pc}\r\n0000201c        000000d4        ldreqd  r0, [r0], -r4\r\n_initfunc:\r\n00002020        e92d4080        stmdb   sp!, {r7, lr}\r\n00002024        e28d7000        add     r7, sp, #0      ; 0x0\r\n00002028        e59f3010        ldr     r3, [pc, #16]   ; 0x2040\r\n0000202c        e08f3003        add     r3, pc, r3\r\n00002030        e1a00003        mov     r0, r3\r\n00002034        eb000028        bl      0x20dc  ; symbol stub for: _puts\r\n00002038        ebfffff0        bl      _calledfrominitfuncalias\r\n0000203c        e8bd8080        ldmia   sp!, {r7, pc}\r\n00002040        000000d0        ldreqd  r0, [r0], -r0\r\nstart:\r\n00002044        e59d0000        ldr     r0, [sp]\r\n\r\n\r\n* Actual result\r\n\r\n(__TEXT,__text) section\r\n_calledfrominitfunc:\r\n00002000        e92d4080        stmdb   sp!, {r7, lr}\r\n00002004        e28d7000        add     r7, sp, #0      ; 0x0\r\n00002008        e59f3010        ldr     r3, [pc, #16]   ; 0x2020\r\n0000200c        e08f3003        add     r3, pc, r3\r\n00002010        e1a00003        mov     r0, r3\r\n00002014        eb000030        bl      0x20dc  ; symbol stub for: _puts\r\n00002018        ebfffff8        bl      _calledfrominitfunc\r\n0000201c        e8bd8080        ldmia   sp!, {r7, pc}\r\n00002020        000000f0        streqd  r0, [r0], -r0\r\nstart:\r\n00002024        e59d0000        ldr     r0, [sp]\r\n[snip]\r\n_calledfrominitfuncalias:\r\n0000209c        e92d4080        stmdb   sp!, {r7, lr}\r\n000020a0        e28d7000        add     r7, sp, #0      ; 0x0\r\n000020a4        e59f300c        ldr     r3, [pc, #12]   ; 0x20b8\r\n000020a8        e08f3003        add     r3, pc, r3\r\n000020ac        e1a00003        mov     r0, r3\r\n000020b0        eb000006        bl      0x20d0  ; symbol stub for: _printf\r\n000020b4        e8bd8080        ldmia   sp!, {r7, pc}\r\n000020b8        00000038        andeq   r0, r0, r8, lsr r0\r\n\r\notool displays _calledfrominitfunc  as the symbol name for address 00002000, but nm shows that _initfunc also is at that address. So effectively, _calledfrominitfunc has now become an alias for _initfunc rather than for _calledfrominitfuncalias\r\n\r\n\r\n* Regression\r\n\r\nThe above works fine with the tools from the iPhone SDK 2.2.1/9m2621a (final).\r\n\r\nIt is still broken with the tools from the iPhone SDK 3.1 beta 3\r\n\r\n(all under Leopartd/10.5.7)\r\n\r\n\r\n* Notes\r\n\r\nThe main.c file included in the archive is the C file from which I started. I compiled it with -S and made a few changes to the generated assembler code (marked by \"# added\").\r\n\r\nIf you replace the \"bl      L_calledfrominitfunc$stub\" with \"bl      _calledfrominitfunc\" in the assembler code  so that the stub is no longer used, then\r\na) the code for _calledfrominitfunc is properly referenced from _initfunc, but\r\nb) the symbol alias _calledfrominitfuncalias now gets the same address as the \"_main\" symbol\r\n\r\nThis, too, is wrong (but causes no immediate problems in our case).\r\n\r\n\r\n'iphonelinkerbug.tbz' was successfully uploaded"
    email: jmaebe@gmail.com
    modified: "2011-08-28T05:45:31.063963Z"
    number: "7120987"
    number_intvalue: 7120987
    originated: 05-Aug-2009 11:08 PM
    parent_number: '&{NULL_VALUE}'
    product: iPhone SDK
    product_version: "3.0"
    reproducible: Always
    resolved: ""
    status: Open
    title: ARM linker bug when global aliased symbols are called from .mod_init_func code
