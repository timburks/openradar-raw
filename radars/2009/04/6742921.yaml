apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "6742921"
    labels:
        datastore_id: "22424"
data:
    classification: Crash/Hang/Data Loss
    created: "2009-04-04T03:49:39.069551Z"
    description: "Summary:\r\nOpening up a JPEG2000 file which has been corrupted by fuzzing leads to a crash inside the ImageIO framework, with possible security implications.\r\n\r\n\r\nSteps to Reproduce:\r\n1.  Open Safari.\r\n2.  Open up the attached file 74th-byte-17.jp2.\r\n\r\n\r\nExpected Results:\r\nI expected to see a relaxing waterfall which would soothe my frazzled nerves.\r\n\r\n\r\nActual Results:\r\nSee attached \"crash-report.txt\"\r\n\r\n\r\nRegression:\r\nI have no access to other configurations with which to test against.\r\n\r\n\r\nNotes:\r\nThe attached files gdb-74th-byte-17.txt and gdb-74th-byte-19.txt show what happens when you load the respective files into Safari with GuardMalloc enabled.  Note that in the first case, you see an attempted allocation of 385876256 bytes.  In the second case, you see an attempted allocation of 419430688 bytes.  Also note that:\r\n\r\n385876256 = 0x17000120\r\n419430688 = 0x19000120\r\n\r\nThis would tend to suggest that we partially control the size of a parameter to memcpy(), which probably has security implications."
    email: jeffcz@gmail.com
    modified: "2011-08-28T05:47:19.675775Z"
    number: "6742921"
    number_intvalue: 6742921
    originated: 3/31/2009
    parent_number: '&{NULL_VALUE}'
    product: Mac OS X
    product_version: 10.5.6
    reproducible: Yes
    resolved: ""
    status: Closed
    title: ImageIO crash due to corrupted JPEG2000 file (j2_icc_profile::init())
