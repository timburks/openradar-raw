apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "6178564"
    labels:
        datastore_id: "2430"
data:
    classification: Other Bug
    created: "2009-01-13T03:24:16.516335Z"
    description: "26-Aug-2008 08:35 PM Dave Dribin:\r\nSummary: \r\nThe NSCell class does not expose a \"value\" binding like most NSCell subclasses.  Though NSCell is not documented in the Cocoa Bindings Reference, you can retrieve the available bindings by calling -exposedBindings.\r\n\r\nSteps to Reproduce:\r\n1. Create an NSCell instance.\r\n2. Call -exposedBindings.\r\n3. Log the array to the console.\r\n\r\nExpected Results:\r\nI expect to see \"value\" among one of the exposed items.\r\n\r\nActual Results:\r\n\"value\" is missing.\r\n\r\nRegression:\r\nI have tested only on 10.5.4.\r\n\r\nNotes:\r\nIf you compare the results of -exposedBindings to NSActionCell, for example, the exposed bindings are the same except that NSCell is missing \"value\" while NSActionCell has it.  The workaround is to subclass NSActionCell instead of NSCell, even if you are not interacting with the user and supplying an action.\r\n\r\n\r\n\r\n27-Aug-2008 08:34 PM Dave Dribin:\r\nI am attempting to create a cell that works like a determinate, circular (pie) progress indicator in a table column.  (Think iTunes' \"Podcast\" outline view, except a determinate progress indicator instead of the indeterminate orange chasing arrow spinner).  Since I do not need any user interaction and just need to draw, NSCell seems like the best class to subclass.  I'm currently using the objectValue (interpreted as an NSNumber) to determine what to draw:\r\n\r\n- nil means draw nothing\r\n- 0 means draw a special \"starting\" image\r\n- when > 0 and <= 1.0 it displays circular progress\r\n\r\nI figured that binding to \"value\" is what gets set to \"objectValue\" as that's how other AppKit cells work.  In fact the drawing all works when subclassing NSCell, but I ran into other problems (rdar://problem/6178538 and rdar://problem/6178546).  If I subclass NSActionCell, then objectValue gets set properly for drawing, and the two bindings issues went away.  My guess (and reason for filing this bug) was that this works because of the \"value\" binding that NSActionCell has and if NSCell had it, then it would work as well."
    email: ddribin@gmail.com
    modified: "2011-08-28T05:49:47.203241Z"
    number: "6178564"
    number_intvalue: 6178564
    originated: 26-Aug-2008 08:35 PM
    parent_number: '&{NULL_VALUE}'
    product: Mac OS X
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Open
    title: NSCell is missing the "value" binding
