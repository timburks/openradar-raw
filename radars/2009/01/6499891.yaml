apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "6499891"
    labels:
        datastore_id: "2623"
data:
    classification: Crash/Hang/Data Loss
    created: "2009-01-15T21:37:00.557714Z"
    description: "Summary: \r\nUnder certain circumstances, compiling an AppleScript using NSAppleScript causes xmlCleanupParser() to be called.  This deallocates libxml global data that can affect (and apparently crash) any other code that uses libxml.  Here's a backtrace where xmlCleanupParser() is called:\r\n\r\n(gdb) bt\r\n#0  0x93377420 in xmlCleanupParser ()\r\n#1  0x1632f615 in TTerminology::ScanScriptingDefinition ()\r\n#2  0x1632f990 in GetAppTerminology ()\r\n#3  0x163368a9 in TUASApplication::Terminology ()\r\n#4  0x1630e182 in ASCompile ()\r\n#5  0x967c92b4 in CallComponentFunction ()\r\n#6  0x16308a9e in AppleScriptComponent ()\r\n#7  0x163248e3 in AGenericManager::HandleOSACall ()\r\n#8  0x96783a95 in CallComponentDispatch ()\r\n#9  0x952f01c3 in OSACompile ()\r\n#10 0x952e7dc0 in OSADoIt ()\r\n#11 0x952e850d in OSALoadFile ()\r\n#12 0x96d1ee20 in -[NSAppleScript _initWithContentsOfFile:error:] ()\r\n#13 0x00002c4b in -[AppDelegate runAppleScript:] (self=0x135e80, _cmd=0x2f4f, sender=0x126140) at /Users/dave/Desktop/AppleScriptPubSubCrash/AppDelegate.m:112\r\n#14 0x91dc953b in -[NSApplication sendAction:to:from:] ()\r\n#15 0x91dc9478 in -[NSControl sendAction:to:] ()\r\n#16 0x91dc92fe in -[NSCell _sendActionFrom:] ()\r\n#17 0x91dc8957 in -[NSCell trackMouse:inRect:ofView:untilMouseUp:] ()\r\n#18 0x91dc81aa in -[NSButtonCell trackMouse:inRect:ofView:untilMouseUp:] ()\r\n#19 0x91dc7a64 in -[NSControl mouseDown:] ()\r\n#20 0x91dc61a3 in -[NSWindow sendEvent:] ()\r\n#21 0x91d92d49 in -[NSApplication sendEvent:] ()\r\n#22 0x91cf069f in -[NSApplication run] ()\r\n#23 0x91cbd8a4 in NSApplicationMain ()\r\n#24 0x0000278c in main (argc=1, argv=0xbffff200) at /Users/dave/Desktop/AppleScriptPubSubCrash/main.m:13\r\n\r\n\r\nxmlCleanupParser() frees and destroys global state of libxml.  If any other code in an application uses libxml, it could be affected.  From the libxml docs:\r\n\r\n  http://xmlsoft.org/xmlmem.html#cleanup\r\n  \r\n\"xmlCleanupParser() should be called only when the library is not used anymore.\"\r\n  \r\nAnd:\r\n\r\n  http://xmlsoft.org/html/libxml-parser.html#xmlCleanupParser\r\n  \r\n\"One should call xmlCleanupParser() only when the process has finished using the library and all XML/HTML documents built with it.\"\r\n\r\nThus, AppleScript should not ever be calling xmlCleanupParser().  There's just too much chance of it colliding with other libxml users in the same process.\r\n\r\n\r\nSteps to Reproduce:\r\n\r\n1) Create a Cocoa application\r\n2) Add a simple scripting definition (.sdef) and update Info.plist\r\n3) Create a PSFeed using initWithURL:\r\n4) Refresh this feed using refresh:\r\n5) Compile and execute an AppleScript using NSAppleScript\r\n6) Create another PSFeed\r\n7) Refresh this new feed\r\n\r\nExpected Results:\r\nThe application should run without issues.\r\n\r\nActual Results:\r\nStep #7 causes a crash in PubSub.\r\n\r\nRegression:\r\nIn order for this to occur, the application must have an .sdef.  This is presumably what causes AppleScript to use libxml.\r\n\r\nAlso, using a pre-compiled AppleScript seems to cause xmlCleanupParser() to be called.  This *may* be a valid workaround, but I do not know all the places that xmlCleanupParser() can be called from within AppleScript.  There may be other code paths that trigger it.\r\n\r\nFinally, you have to create a new PSFeed before and after the AppleScript.  Reusing the same PSFeed does not trigger the crash.\r\n\r\nNotes:\r\nAs it turns out, this can crash PubSub, which must use libxml to parse its feeds, and is the root cause of rdar://problem/6492070.  The symptom of this crash is PubSub crashing in decodeEntities():\r\n\r\n(gdb) bt\r\n#0  0x00640080 in ?? ()\r\n#1  0x95de2fde in decodeEntities ()\r\n#2  0x95dad72c in PubSub::FeedParser::ContentContext::end ()\r\n#3  0x95d9eb55 in PubSub::FeedParser::Parser::popTopAndHandleIt ()\r\n#4  0x95d9ecca in PubSub::FeedParser::Parser::handleEndElement ()\r\n#5  0x95d9f016 in PubSub::FeedParser::Parser::handleStartElement ()\r\n#6  0x95d9f2bb in PubSub::FeedParser::Parser::attemptParse ()\r\n#7  0x95d9f45d in PubSub::FeedParser::Parser::startParsing ()\r\n#8  0x95d9f57a in PubSub::FeedParser::Parser::Parser ()\r\n#9  0x95d96be4 in PubSub::FeedCore::createFeed ()\r\n#10 0x95dd5853 in -[PSFeed initWithData:URL:] ()\r\n#11 0x000029dd in -[AppDelegate createFeed] (self=0x130b70, _cmd=0x2f23) at /Users/dave/Desktop/AppleScriptPubSubCrash/AppDelegate.m:67\r\n#12 0x00002a5e in -[AppDelegate refreshFeed:] (self=0x130b70, _cmd=0x2f2e, sender=0x123070) at /Users/dave/Desktop/AppleScriptPubSubCrash/AppDelegate.m:79\r\n#13 0x91dc953b in -[NSApplication sendAction:to:from:] ()\r\n#14 0x91dc9478 in -[NSControl sendAction:to:] ()\r\n#15 0x91dc92fe in -[NSCell _sendActionFrom:] ()\r\n#16 0x91dc8957 in -[NSCell trackMouse:inRect:ofView:untilMouseUp:] ()\r\n#17 0x91dc81aa in -[NSButtonCell trackMouse:inRect:ofView:untilMouseUp:] ()\r\n#18 0x91dc7a64 in -[NSControl mouseDown:] ()\r\n#19 0x91dc61a3 in -[NSWindow sendEvent:] ()\r\n#20 0x91d92d49 in -[NSApplication sendEvent:] ()\r\n#21 0x91cf069f in -[NSApplication run] ()\r\n#22 0x91cbd8a4 in NSApplicationMain ()\r\n#23 0x0000278c in main (argc=1, argv=0xbffff634) at /Users/dave/Desktop/AppleScriptPubSubCrash/main.m:13\r\n\r\nAttached is a project that recreates the PubSub crash on demand.  To reproduce:\r\n\r\n- Click 'Refresh'\r\n- Wait for it to finish\r\n- Click 'Run Script'\r\n- Click 'Refresh' again\r\n- Boom\r\n\r\nTrying to use Guard Malloc to trap access to bad memory trigger lots of false positives in XCFBufInitWithUnicode:\r\n\r\n(gdb) bt\r\n#0  0x9525727d in XCFBufInitWithUnicode ()\r\n#1  0x95274b95 in _LSIsKnownExtensionUnicode ()\r\n#2  0x95274adb in _LSCanHideExtension ()\r\n#3  0x95259dcf in _LSCanSetExtensionHidden ()\r\n#4  0x952593be in _LSCopyInfoForNode ()\r\n#5  0x95274a60 in LSCopyItemInfoForRef ()\r\n#6  0x952e0744 in IterateFolder ()\r\n#7  0x952e0f45 in HandleGDUT ()\r\n#8  0x9639bc74 in _fixupAppleEventHandler ()\r\n#9  0x9638d648 in aeDispatchAppleEvent ()\r\n#10 0x963967be in AESendMessage ()\r\n#11 0x963995ab in aeSend ()\r\n#12 0x93e415af in AESend ()\r\n#13 0x15ab317a in AEDefaultSendProc ()\r\n#14 0x15ab6dfd in ComponentSend ()\r\n#15 0x15ab6fc0 in SendSimpleEventWithReply ()\r\n#16 0x15a9ec3d in ScanForScriptingAdditions ()\r\n#17 0x15a9ef07 in ASInitLocal ()\r\n#18 0x15a9efa5 in ASDefaultInit ()\r\n#19 0x15a96a2d in AppleScriptComponent ()\r\n#20 0x96783a95 in CallComponentDispatch ()\r\n#21 0x952deaf8 in OSASetActiveProc ()\r\n#22 0x15ab26c4 in AGenericManager::UpdateInstanceProcs ()\r\n#23 0x15ab27e2 in AGenericManager::ComponentFromSubtype ()\r\n#24 0x15ab2915 in AGenericManager::DefaultComponentInstance ()\r\n#25 0x15ab211c in AGenericCall::PreDelegate ()\r\n#26 0x15ab28c9 in AGenericManager::HandleOSACall ()\r\n#27 0x96783a95 in CallComponentDispatch ()\r\n#28 0x952f01c3 in OSACompile ()\r\n#29 0x952e7dc0 in OSADoIt ()\r\n#30 0x952e850d in OSALoadFile ()\r\n#31 0x96d1ee20 in -[NSAppleScript _initWithContentsOfFile:error:] ()\r\n#32 0x00002c4b in -[AppDelegate runAppleScript:] (self=0xb53c4ff0, _cmd=0x2f4f, sender=0xb3e19fa0) at /Users/dave/Desktop/AppleScriptPubSubCrash/AppDelegate.m:112\r\n#33 0x91dc953b in -[NSApplication sendAction:to:from:] ()\r\n#34 0x91dc9478 in -[NSControl sendAction:to:] ()\r\n#35 0x91dc92fe in -[NSCell _sendActionFrom:] ()\r\n#36 0x91dc8957 in -[NSCell trackMouse:inRect:ofView:untilMouseUp:] ()\r\n#37 0x91dc81aa in -[NSButtonCell trackMouse:inRect:ofView:untilMouseUp:] ()\r\n#38 0x91dc7a64 in -[NSControl mouseDown:] ()\r\n#39 0x91dc61a3 in -[NSWindow sendEvent:] ()\r\n#40 0x91d92d49 in -[NSApplication sendEvent:] ()\r\n#41 0x91cf069f in -[NSApplication run] ()\r\n#42 0x91cbd8a4 in NSApplicationMain ()\r\n#43 0x0000278c in main (argc=1, argv=0xbffff19c) at /Users/dave/Desktop/AppleScriptPubSubCrash/main.m:13\r\n\r\n\r\nBy jumping over these false positives (jump *0x95257281 in gdb), we finally hit the real trigger when PubSub tries to access some libxml functions:\r\n\r\n(gdb) bt\r\n#0  0x95de2fdb in decodeEntities ()\r\n#1  0x95dad72c in PubSub::FeedParser::ContentContext::end ()\r\n#2  0x95d9eb55 in PubSub::FeedParser::Parser::popTopAndHandleIt ()\r\n#3  0x95d9ecca in PubSub::FeedParser::Parser::handleEndElement ()\r\n#4  0x95d9f016 in PubSub::FeedParser::Parser::handleStartElement ()\r\n#5  0x95d9f2bb in PubSub::FeedParser::Parser::attemptParse ()\r\n#6  0x95d9f45d in PubSub::FeedParser::Parser::startParsing ()\r\n#7  0x95d9f57a in PubSub::FeedParser::Parser::Parser ()\r\n#8  0x95d96be4 in PubSub::FeedCore::createFeed ()\r\n#9  0x95dd5853 in -[PSFeed initWithData:URL:] ()\r\n#10 0x000029dd in -[AppDelegate createFeed] (self=0xb4bf9ff0, _cmd=0x2f23) at /Users/dave/Desktop/AppleScriptPubSubCrash/AppDelegate.m:67\r\n#11 0x00002a5e in -[AppDelegate refreshFeed:] (self=0xb4bf9ff0, _cmd=0x2f2e, sender=0xb3b96fa0) at /Users/dave/Desktop/AppleScriptPubSubCrash/AppDelegate.m:79\r\n#12 0x91dc953b in -[NSApplication sendAction:to:from:] ()\r\n#13 0x91dc9478 in -[NSControl sendAction:to:] ()\r\n#14 0x91dc92fe in -[NSCell _sendActionFrom:] ()\r\n#15 0x91dc8957 in -[NSCell trackMouse:inRect:ofView:untilMouseUp:] ()\r\n#16 0x91dc81aa in -[NSButtonCell trackMouse:inRect:ofView:untilMouseUp:] ()\r\n#17 0x91dc7a64 in -[NSControl mouseDown:] ()\r\n#18 0x91dc61a3 in -[NSWindow sendEvent:] ()\r\n#19 0x91d92d49 in -[NSApplication sendEvent:] ()\r\n#20 0x91cf069f in -[NSApplication run] ()\r\n#21 0x91cbd8a4 in NSApplicationMain ()\r\n#22 0x0000278c in main (argc=1, argv=0xbffff19c) at /Users/dave/Desktop/AppleScriptPubSubCrash/main.m:13\r\n\r\nBy disassembling the code just before this, we can see that PubSub is calling \r\nxmlDetectCharEncoding() and xmlGetCharEncodingHandler().  It must be getting bogus data back from these, and then crashes at +0x00055fdb when %eax is bogus:\r\n\r\n+21180  00055f94  e89ac20c00              calll       0x00122233                    _xmlDetectCharEncoding\r\n+21185  00055f99  890424                  movl        %eax,(%esp)\r\n+21188  00055f9c  e8bfc20c00              calll       0x00122260                    _xmlGetCharEncodingHandler\r\n+21193  00055fa1  85c0                    testl       %eax,%eax\r\n+21195  00055fa3  8983b1c80c00            movl        %eax,0x000cc8b1(%ebx)\r\n+21201  00055fa9  0f840c91ffff            jel         0x0004f0bb\r\n+21207  00055faf  8d45dc                  leal        0xdc(%ebp),%eax\r\n+21210  00055fb2  8944240c                movl        %eax,0x0c(%esp)\r\n+21214  00055fb6  8d45e0                  leal        0xe0(%ebp),%eax\r\n+21217  00055fb9  89442404                movl        %eax,0x04(%esp)\r\n+21221  00055fbd  8b83b1c80c00            movl        0x000cc8b1(%ebx),%eax\r\n+21227  00055fc3  8d55e6                  leal        0xe6(%ebp),%edx\r\n+21230  00055fc6  893424                  movl        %esi,(%esp)\r\n+21233  00055fc9  c745e006000000          movl        $0x00000006,0xe0(%ebp)\r\n+21240  00055fd0  c745dc02000000          movl        $0x00000002,0xdc(%ebp)\r\n+21247  00055fd7  89542408                movl        %edx,0x08(%esp)\r\n+21251  00055fdb  ff5004                  call        *0x04(%eax)\r\n\r\n(gdb) info reg\r\neax            0x17fbd0\t1571792\r\necx            0x95e5f02b\t-1780092885\r\nedx            0xbfffe2be\t-1073749314\r\nebx            0x95ddc0af\t-1780629329\r\nesp            0xbfffe290\t0xbfffe290\r\nebp            0xbfffe2d8\t0xbfffe2d8\r\nesi            0x8f2810\t9381904\r\nedi            0x26\t38\r\neip            0x95de2fdb\t0x95de2fdb <decodeEntities+28471>\r\neflags         0x202\t514\r\ncs             0x17\t23\r\nss             0x1f\t31\r\nds             0x1f\t31\r\nes             0x1f\t31\r\nfs             0x0\t0\r\ngs             0x37\t55"
    email: ddribin@gmail.com
    modified: "2011-08-28T05:48:27.084402Z"
    number: "6499891"
    number_intvalue: 6499891
    originated: 15-Jan-2009 01:35 PM
    parent_number: '&{NULL_VALUE}'
    product: Mac OS X
    product_version: 10.5.6/9G55
    reproducible: Always
    resolved: ""
    status: Open
    title: Compiling an AppleScript calls xmlCleanupParser() when it shouldn't, crashes PubSub
