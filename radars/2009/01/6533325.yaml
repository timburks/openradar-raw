apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "6533325"
    labels:
        datastore_id: "2649"
data:
    classification: Feature (New)
    created: "2009-01-27T22:33:40.486612Z"
    description: "Current inter-application communication and integration is limited to triggering protocol handlers.  (The fact that apps can't share generic protocol schemes like \"twitter:\" is another bug altogether).\r\n\r\nThe problem with triggering a protocol is the fact that the calling app quits coupled with the fact that there are no background processes.\r\n\r\n(Two side notes: first, I'm not lamenting the lack of background processes, mobile computing is hard and tradeoffs need to be made.  Second, \"saving state\" is not a scalable option for rich apps.  Saving too much state is infeasible for two reasons: there's potentially too much data to be saved before the system kills you, and too much writing to disk would kill the flash).\r\n\r\nBut back to the point, my proposal is simple: let apps expose small parts of themselves to be displayed modally in other apps.\r\n\r\nYou use this yourself for the Mail compose screen.  As an example, tap \"Share\" in YouTube.  It will bring up a modal view allowing you to compose an email right from the YouTube app - no need to quit YouTube and launch Mail, no need to save tons of state in YouTube. (Note, by \"state\" I mean more than the current view, I mean the whole list of loaded videos, thumbnails, etc).\r\n\r\nExposing a way for third-party-apps to bring up the Mail compose view in their own apps would be great, but the process should be generalized.  I would love to expose the tweet-compose view from Tweetie, so other apps could post tweets without having to quit themselves.\r\n\r\nThere could be other apps like a Flickr uploader that could expose a way for other apps to post photos.  Or a Delicious bookmarks manager could expose a \"create new bookmark\" screen right from another app's embedded browser.\r\n\r\nFrom an implementation perspective, I'm not sure what the best way to do this is.  Perhaps in the form of a framework - every app can have a bundle of code that other apps can find, load and execute in their own processes.  Or perhaps each \"mini modal view\" would in fact be its own process... the OS could make it just *look like* a normal modal transition.\r\n\r\nI probably don't need to say this, but I will anyway.  Inter-application communication and integration is critical.  Newly announced devices are coming up with interesting solutions to the multiple/parallel-tasks problem, but I have no doubt that the iPhone can far exceed their ease-of-use.\r\n\r\nPerhaps this solution doesn't scale.  Perhaps it's just a stop-gap before true background processing becomes feasible.  Perhaps - (well, I have no doubt actually) - that you folks have already been thinking about this.  But something like this would be awfully handy, no?"
    email: loren.brichter@gmail.com
    modified: "2011-08-28T05:48:19.91749Z"
    number: "6533325"
    number_intvalue: 6533325
    originated: 27-Jan-2009 02:31 PM
    parent_number: '&{NULL_VALUE}'
    product: iPhone SDK
    product_version: "2.2"
    reproducible: Not Applicable
    resolved: ""
    status: Open
    title: Modal display + integration between applications
