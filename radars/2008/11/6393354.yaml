apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "6393354"
    labels:
        datastore_id: "657"
data:
    classification: ""
    created: "2008-11-21T21:32:20.318475Z"
    description: "21-Nov-2008 01:26 PM Adam Leonard:\r\nSummary:\r\nThe documentation page in the Cocoa Fundamentals Guide titled \"Object Creation\" makes an assumption about all class factory methods that is incorrect and unnecessary.\r\n\r\nThe page is available here: http://developer.apple.com/documentation/Cocoa/Conceptual/CocoaFundamentals/CocoaObjects/chapter_3_section_6.html#//apple_ref/doc/uid/TP40002974-CH4-SW36\r\n\r\nIt states that all class factory methods, or convenience methods, \"combine allocation and initialization in one step and return the created object autoreleased (in memory-managed code).\"\r\n\r\nI believe that there are several problems with this statement.\r\n\r\nBasically, the documentation should not say that all class factory methods always return autoreleased objects because that is an implementation detail that (a) is not required by the memory management rules, (b) is something that the programmer should not care about, and (c) is not even true in the case of some methods, including [NSString string]\r\n\r\n\r\nMore details about the problems with this statement follow:\r\n\r\n1. When and how any object decides to fulfill its end of the memory management agreement is an implementation detail, as stressed by the memory management rules. However, this statement explicitly states that all convenience methods will call +alloc, -init..., and -autorelease.\r\n\r\nA programmer (especially a beginner, to which this documentation is tailored) should not be told to think about the specific calls a method makes. Stating the specific calls \"all\" convenience methods make is by definition a detail of the implementation, and thus should not be included in the documentation.\r\n\r\nAssuming that a new object will always be allocated and initiated leads to the assumption that every call to a convenience method will return a  pointer to a different address. Assuming that every convenience method calls -autorelease leads to the assumption that -release will always be called by the time the next event loop begins (in a GUI app).\r\n\r\n2. This is a generalization that is not always true. \r\n\r\nOne example in the Cocoa frameworks in which a convenience method does not \"combine allocation and initialization\" and probably does not call -autorelease is +[NSString string].\r\n\r\nBy the definition given that convenience methods are of the form \" + (type)className... (where className excludes any prefix)\", +(id)string is undoubtably a convenience method.\r\n\r\nHowever, by inspection, +[NSString string] always returns the same pointer, no matter how many times it is called, leading me to believe it is implemented as a singleton. This makes sense, as there is no reason to create multiple instances of an empty string, as this is just a waste of memory. Thus, +alloc and -init... are only being called the FIRST time +[NSString string] is called, disproving the statement in the documentation.\r\n\r\nFurther, as a singleton, the instance returned by +[NSString string] has a retain count of INT_MAX and will never be released, and thus probably is not even being sent an -autorelease message in the implementation (and if it is, this call amounts to a no op), disproving the statement that it will \"return the created object autoreleased\"\r\n\r\nThis is a correct implementation of +[NSString string] that follows all of the memory management rules, and I believe other methods in the Cocoa frameworks have similar implementations. Thus, the statement made by this page of the documentation is not true in all cases.\r\n\r\n\r\nExpected Results:\r\nI would suggest that the sentence \"They combine allocation and initialization in one step and return the created object autoreleased (in memory-managed code).\" be replaced with: \"They return an object that is not owned by the receiver.\" I believe this is pretty much everything that can be said about such methods that is always true and does not unnecessarily expose details of their implementations.\r\n\r\nA link to the memory management rules should also be included (http://developer.apple.com/documentation/Cocoa/Conceptual/MemoryMgmt/Tasks/MemoryManagementRules.html)"
    email: dogtown08@gmail.com
    modified: "2011-08-28T05:49:18.096361Z"
    number: "6393354"
    number_intvalue: 6393354
    originated: 21-Nov-2008 01:26 PM
    parent_number: '&{NULL_VALUE}'
    product: Documentation
    product_version: 10.5.5/9F33
    reproducible: ""
    resolved: ""
    status: Open
    title: Incorrect assumptions about convenience methods made in documentation
