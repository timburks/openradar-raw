apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "6406055"
    labels:
        datastore_id: "93"
data:
    classification: Feature (New)
    created: "2008-11-28T12:16:07.43248Z"
    description: "* Summary:\r\nIt'd be really great if ObjC gained support for autoboxing and autounboxing, ala Java. It can be quite tedious having to write things like\r\n\r\n  [myArray addObject:[NSNumber numberWithInt:5]];\r\n\r\nwhen it *should* be relatively simple to set things up so that we can just do\r\n\r\n  [myArray addObject:5];\r\n\r\nLikewise\r\n\r\n  int foo = [[myArray objectAtIndex:7] intValue];\r\n\r\nversus\r\n\r\n  int foo = [myArray objectAtIndex:7];\r\n\r\nI've been pondering this for some time; I think the right way to do it is probably to add a way to declare rules for autoboxing/unboxing, something like:\r\n\r\n@autobox (int a) => [NSNumber numberWithInt:a];\r\n@autounbox (id obj) => int : [obj intValue];\r\n\r\nObviously the syntax requires some thought. Equally obviously, it's possible that the rules might be declared on the class itself rather than using separate statements, e.g.\r\n\r\n@interface NSNumber {\r\n...\r\n}\r\n\r\n+ @autobox (NSNumber *)numberWithInt:(int)a;\r\n\r\n...\r\n\r\n- @autounbox (int)intValue;\r\n\r\n@end\r\n\r\nThe downside of doing that is that autounboxing should probably send e.g. -intValue to *any* object, not just NSNumbers. Also, using separate statements means that a later statement could override the default behaviour, whereas declaring this on the classes themselves makes it tricky to resolve situations where you've been given two autobox declarations with the same types."
    email: alastair@alastairs-place.net
    modified: "2011-08-28T05:49:07.238057Z"
    number: "6406055"
    number_intvalue: 6406055
    originated: 28-Nov-2008 04:06 AM
    parent_number: "4395455"
    product: Developer Tools
    product_version: GCC 4.2
    reproducible: Not applicable
    resolved: ""
    status: Duplicate/4395455
    title: ObjC should support autoboxing
