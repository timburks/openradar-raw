apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "34824398"
    labels:
        datastore_id: "5059854985068544"
data:
    classification: Crash
    created: "2017-10-26T18:18:17.42338Z"
    description: "UPDATE: Fixed in Xcode 9.3/Swift 4.1.\r\n\r\nUPDATE: Apple's Swift developers have classified the bug as a miscompile. The bug is still present in Xcode 9.2.\r\n\r\nSummary:\r\n\r\n- Xcode 9/Swift 3.2/Swift 4: AnyHashable's casting behavior fails with Swift classes. Structs and NSObject classes behave correctly.\r\n- Xcode 8/Swift 3.1: Behaves as expected.\r\n\r\nSteps to Reproduce:\r\n\r\n1. Create two Swift classes, conforming to Hashable.\r\n2. Instantiate two AnyHashable objects, each using a different object type (from #1).\r\n3. Cast an AnyHashable object to the other's class type.\r\n4. Results should be nil.\r\n\r\n    class SwiftClass3 : Hashable { ... }\r\n    class SwiftClass4 : Hashable { ... }\r\n    let c3 = SwiftClass3()\r\n    let c4 = SwiftClass4()\r\n    let h3: AnyHashable = c3\r\n    let h4: AnyHashable = c4\r\n\r\nExpected Results:\r\n\r\nFor both Xcode 8 and Xcode 9:\r\n    XCTAssertTrue(h3 is SwiftClass3)\r\n    XCTAssertFalse(h3 is SwiftClass4)\r\n    XCTAssertFalse(h4 is SwiftClass3)\r\n    XCTAssertTrue(h4 is SwiftClass4)\r\n    XCTAssertNotNil(h3 as? SwiftClass3)\r\n    XCTAssertNil(h3 as? SwiftClass4)\r\n    XCTAssertNil(h4 as? SwiftClass3)\r\n    XCTAssertNotNil(h4 as? SwiftClass4)\r\n\r\nActual Results:\r\n\r\nXcode 8 passes, Xcode 9 fails:\r\n    XCTAssertTrue(h3 is SwiftClass3)\r\n    XCTAssertFalse(h3 is SwiftClass4)      // **** xcode 9: fails ****\r\n    XCTAssertFalse(h4 is SwiftClass3)      // **** xcode 9: fails ****\r\n    XCTAssertTrue(h4 is SwiftClass4)\r\n    XCTAssertNotNil(h3 as? SwiftClass3)\r\n    XCTAssertNil(h3 as? SwiftClass4)     // **** xcode 9: fails ****\r\n    XCTAssertNil(h4 as? SwiftClass3)     // **** xcode 9: fails ****\r\n    XCTAssertNotNil(h4 as? SwiftClass4)\r\n\r\n---------- Sample Code ----------\r\n\r\n\r\nimport XCTest\r\n\r\nstruct Struct1 : Hashable, CustomStringConvertible {\r\n    var hashValue: Int { return 1 }\r\n    static func ==(lhs: Struct1, rhs: Struct1) -> Bool { return lhs.hashValue == rhs.hashValue }\r\n    var description: String { return \"\\(type(of: self))-\\(hashValue)\" }\r\n}\r\n\r\nstruct Struct2 : Hashable, CustomStringConvertible {\r\n    var hashValue: Int { return 2 }\r\n    static func ==(lhs: Struct2, rhs: Struct2) -> Bool { return lhs.hashValue == rhs.hashValue }\r\n    var description: String { return \"\\(type(of: self))-\\(hashValue)\" }\r\n    func only2CanDo() -> String { return #function }\r\n}\r\n\r\nclass SwiftClass3 : Hashable, CustomStringConvertible {\r\n    var hashValue: Int { return 3 }\r\n    static func ==(lhs: SwiftClass3, rhs: SwiftClass3) -> Bool { return lhs.hashValue == rhs.hashValue }\r\n    var description: String { return \"\\(type(of: self))-\\(hashValue)\" }\r\n}\r\n\r\nclass SwiftClass4 : Hashable, CustomStringConvertible {\r\n    var hashValue: Int { return 4 }\r\n    static func ==(lhs: SwiftClass4, rhs: SwiftClass4) -> Bool { return lhs.hashValue == rhs.hashValue }\r\n    var description: String { return \"\\(type(of: self))-\\(hashValue)\" }\r\n    func only4CanDo() -> String { return #function }\r\n}\r\n\r\nclass ObjCClass5 : NSObject {\r\n    override var hashValue: Int { return 5 }\r\n    static func ==(lhs: ObjCClass5, rhs: ObjCClass5) -> Bool { return lhs.hashValue == rhs.hashValue }\r\n    override var description: String { return \"\\(type(of: self))-\\(hashValue)\" }\r\n}\r\n\r\nclass ObjCClass6 : NSObject {\r\n    override var hashValue: Int { return 6 }\r\n    static func ==(lhs: ObjCClass6, rhs: ObjCClass6) -> Bool { return lhs.hashValue == rhs.hashValue }\r\n    override var description: String { return \"\\(type(of: self))-\\(hashValue)\" }\r\n    func only6CanDo() -> String { return #function }\r\n}\r\n\r\nclass AnyHashableTests: XCTestCase {\r\n    \r\n    func testStructEquality() {\r\n        let s1 = Struct1()\r\n        let s2 = Struct2()\r\n        let h1: AnyHashable = s1\r\n        let h2: AnyHashable = s2\r\n        \r\n        XCTAssertNotEqual(\"\\(Struct1.self)\", \"\\(Struct2.self)\")\r\n        XCTAssertNotEqual(\"\\(type(of: s1).self)\", \"\\(type(of: s2).self)\")\r\n        XCTAssertNotEqual(\"\\(type(of: h1.base).self)\", \"\\(type(of: h2.base).self)\")\r\n        \r\n        XCTAssertTrue   (h1 is Struct1)\r\n        XCTAssertFalse  (h1 is Struct2)\r\n        XCTAssertFalse  (h2 is Struct1)\r\n        XCTAssertTrue   (h2 is Struct2)\r\n        \r\n        XCTAssertNotNil (h1 as? Struct1)\r\n        XCTAssertNil    (h1 as? Struct2)\r\n        XCTAssertNil    (h2 as? Struct1)\r\n        XCTAssertNotNil (h2 as? Struct2)\r\n        \r\n        XCTAssertNotNil (h1.base as? Struct1)\r\n        XCTAssertNil    (h1.base as? Struct2)\r\n        XCTAssertNil    (h2.base as? Struct1)\r\n        XCTAssertNotNil (h2.base as? Struct2)\r\n        \r\n        XCTAssertEqual  (s1.description, \"Struct1-1\")\r\n        XCTAssertEqual  (h1.description, \"Struct1-1\")\r\n        XCTAssertEqual  (s2.description, \"Struct2-2\")\r\n        XCTAssertEqual  (h2.description, \"Struct2-2\")\r\n        \r\n        XCTAssertEqual  ((h1 as? Struct1)?.description, \"Struct1-1\")\r\n        XCTAssertEqual  ((h1 as? Struct2)?.description, nil)\r\n        XCTAssertEqual  ((h2 as? Struct1)?.description, nil)\r\n        XCTAssertEqual  ((h2 as? Struct2)?.description, \"Struct2-2\")\r\n        \r\n        let _1as2 = h1 as? Struct2\r\n        let _2as2 = h2 as? Struct2\r\n        XCTAssertEqual(_1as2?.only2CanDo(), nil)\r\n        XCTAssertEqual(_2as2?.only2CanDo(), \"only2CanDo()\")\r\n    }\r\n    \r\n    func testNSObjectClassEquality() {\r\n        let c5 = ObjCClass5()\r\n        let c6 = ObjCClass6()\r\n        let h5: AnyHashable = c5\r\n        let h6: AnyHashable = c6\r\n        \r\n        XCTAssertNotEqual(\"\\(ObjCClass5.self)\", \"\\(ObjCClass6.self)\")\r\n        XCTAssertNotEqual(\"\\(type(of: c5).self)\", \"\\(type(of: c6).self)\")\r\n        XCTAssertNotEqual(\"\\(type(of: h5.base).self)\", \"\\(type(of: h6.base).self)\")\r\n        \r\n        XCTAssertTrue   (h5 is ObjCClass5)\r\n        XCTAssertFalse  (h5 is ObjCClass6)\r\n        XCTAssertFalse  (h6 is ObjCClass5)\r\n        XCTAssertTrue   (h6 is ObjCClass6)\r\n        \r\n        XCTAssertNotNil (h5 as? ObjCClass5)\r\n        XCTAssertNil    (h5 as? ObjCClass6)\r\n        XCTAssertNil    (h6 as? ObjCClass5)\r\n        XCTAssertNotNil (h6 as? ObjCClass6)\r\n        \r\n        XCTAssertNotNil (h5.base as? ObjCClass5)\r\n        XCTAssertNil    (h5.base as? ObjCClass6)\r\n        XCTAssertNil    (h6.base as? ObjCClass5)\r\n        XCTAssertNotNil (h6.base as? ObjCClass6)\r\n        \r\n        XCTAssertEqual  (c5.description, \"ObjCClass5-5\")\r\n        XCTAssertEqual  (h5.description, \"ObjCClass5-5\")\r\n        XCTAssertEqual  (c6.description, \"ObjCClass6-6\")\r\n        XCTAssertEqual  (h6.description, \"ObjCClass6-6\")\r\n        \r\n        XCTAssertEqual  ((h5 as? ObjCClass5)?.description, \"ObjCClass5-5\")\r\n        XCTAssertEqual  ((h5 as? ObjCClass6)?.description, nil)\r\n        XCTAssertEqual  ((h6 as? ObjCClass5)?.description, nil)\r\n        XCTAssertEqual  ((h6 as? ObjCClass6)?.description, \"ObjCClass6-6\")\r\n        \r\n        let _5as6 = h5 as? ObjCClass6\r\n        let _6as6 = h6 as? ObjCClass6\r\n        XCTAssertEqual(_5as6?.only6CanDo(), nil)\r\n        XCTAssertEqual(_6as6?.only6CanDo(), \"only6CanDo()\")\r\n    }\r\n    \r\n    func testSwiftClassEquality() {\r\n        let c3 = SwiftClass3()\r\n        let c4 = SwiftClass4()\r\n        let h3: AnyHashable = c3\r\n        let h4: AnyHashable = c4\r\n        \r\n        XCTAssertNotEqual(\"\\(SwiftClass3.self)\", \"\\(SwiftClass4.self)\")\r\n        XCTAssertNotEqual(\"\\(type(of: c3).self)\", \"\\(type(of: c4).self)\")\r\n        XCTAssertNotEqual(\"\\(type(of: h3.base).self)\", \"\\(type(of: h4.base).self)\")\r\n        \r\n        #if swift(>=3.2)\r\n            XCTAssertTrue   (h3 is SwiftClass3)\r\n            XCTAssertTrue   (h3 is SwiftClass4)      // **** xcode 9: wrong behavior ****\r\n            XCTAssertTrue   (h4 is SwiftClass3)      // **** xcode 9: wrong behavior ****\r\n            XCTAssertTrue   (h4 is SwiftClass4)\r\n            \r\n            XCTAssertNotNil (h3 as? SwiftClass3)\r\n            XCTAssertNotNil (h3 as? SwiftClass4)     // **** xcode 9: wrong behavior ****\r\n            XCTAssertNotNil (h4 as? SwiftClass3)     // **** xcode 9: wrong behavior ****\r\n            XCTAssertNotNil (h4 as? SwiftClass4)\r\n        #else\r\n            XCTAssertTrue   (h3 is SwiftClass3)\r\n            XCTAssertFalse  (h3 is SwiftClass4)      // **** xcode 8: correct behavior ****\r\n            XCTAssertFalse  (h4 is SwiftClass3)      // **** xcode 8: correct behavior ****\r\n            XCTAssertTrue   (h4 is SwiftClass4)\r\n            \r\n            XCTAssertNotNil (h3 as? SwiftClass3)\r\n            XCTAssertNil    (h3 as? SwiftClass4)     // **** xcode 8: correct behavior ****\r\n            XCTAssertNil    (h4 as? SwiftClass3)     // **** xcode 8: correct behavior ****\r\n            XCTAssertNotNil (h4 as? SwiftClass4)\r\n        #endif\r\n        \r\n        XCTAssertNotNil (h3.base as? SwiftClass3)\r\n        XCTAssertNil    (h3.base as? SwiftClass4)\r\n        XCTAssertNil    (h4.base as? SwiftClass3)\r\n        XCTAssertNotNil (h4.base as? SwiftClass4)\r\n        \r\n        XCTAssertEqual  (c3.description, \"SwiftClass3-3\")\r\n        XCTAssertEqual  (h3.description, \"SwiftClass3-3\")\r\n        XCTAssertEqual  (c4.description, \"SwiftClass4-4\")\r\n        XCTAssertEqual  (h4.description, \"SwiftClass4-4\")\r\n        \r\n        #if swift(>=3.2)\r\n            XCTAssertEqual  ((h3 as? SwiftClass3)?.description, \"SwiftClass3-3\")\r\n            XCTAssertEqual  ((h3 as? SwiftClass4)?.description, \"SwiftClass3-3\")    // **** xcode 9: wrong behavior ****\r\n            XCTAssertEqual  ((h4 as? SwiftClass3)?.description, \"SwiftClass4-4\")    // **** xcode 9: wrong behavior ****\r\n            XCTAssertEqual  ((h4 as? SwiftClass4)?.description, \"SwiftClass4-4\")\r\n        #else\r\n            XCTAssertEqual  ((h3 as? SwiftClass3)?.description, \"SwiftClass3-3\")\r\n            XCTAssertEqual  ((h3 as? SwiftClass4)?.description, nil)                // **** xcode 8: correct behavior ****\r\n            XCTAssertEqual  ((h4 as? SwiftClass3)?.description, nil)                // **** xcode 8: correct behavior ****\r\n            XCTAssertEqual  ((h4 as? SwiftClass4)?.description, \"SwiftClass4-4\")\r\n        #endif\r\n        \r\n        #if false\r\n            // **** xcode 9: wrong behavior (function returns random bytes or crashes) ****\r\n            // set if-def to true to observe behavior\r\n            let _3as4 = h3 as? SwiftClass4\r\n            XCTAssertEqual(_3as4?.only4CanDo(), nil)\r\n        #endif\r\n        let _4as4 = h4 as? SwiftClass4\r\n        XCTAssertEqual(_4as4?.only4CanDo(), \"only4CanDo()\")\r\n    }\r\n}"
    email: eholley@gmail.com
    modified: "2018-04-04T19:17:07.06727Z"
    number: "34824398"
    number_intvalue: 34824398
    originated: 10/4/2017
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 9.0.1 (9A1004)
    reproducible: Always
    resolved: 3/29/2018
    status: Closed
    title: AnyHashable casting error in Xcode 9/Swift 3.2/Swift 4
