apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "34933061"
    labels:
        datastore_id: "5561942701768704"
data:
    classification: ""
    created: "2017-10-11T14:46:15.43888Z"
    description: "Summary:\r\nBehavior for iOS 11 UICollectionView has changed after `endInteractiveMovement()` or `cancelInteractiveMovement()` is called such that it now reloads the cell at the new index path after it is moved/cancelled asynchronously (seemingly triggered from a call to layout subviews in the collection view). Whereas, in iOS 10, the cell did not reload and simply maintained the view it had.\r\n\r\nThis will at least cause the cell to flash as the layout is invalidated and reloaded.\r\n\r\nBut the real issue arises when you want to manipulate cells directly after `endInteractiveMovement()` and change the source data such that a different number of cells exist in the collection than did before the reorder took place. Because the `cellForItemAt indexPath` call is delayed by the animation, it will try loading the cell after it may have been removed (via `deleteItems(at:)`) Then you get a crash.\r\n\r\nSteps to Reproduce:\r\n1. Create a UICollectionView.\r\n2. Implement the interactive movement methods with a LongPressGestureRecognizer.\r\n3. Run the app.\r\n4. Press and hold to drag. When the drag completes the moved cell will flash and reload.\r\n\r\nExpected Results:\r\nThe cell should move to it's new location seamlessly in it's new state with no view flashing.\r\n\r\nActual Results:\r\nThe view flashes as the cell is removed and laid out again.\r\n\r\nVersion/Build:\r\niOS 11 (15A372)"
    email: prolfe07@gmail.com
    modified: "2017-10-11T14:46:42.57834Z"
    number: "34933061"
    number_intvalue: 34933061
    originated: 10/11/2017
    parent_number: '&{NULL_VALUE}'
    product: iOS
    product_version: iOS 11
    reproducible: Always
    resolved: ""
    status: Open
    title: UICollectionView reloads cell after `endInteractiveMovement`
