apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "35729330"
    labels:
        datastore_id: "5542516430471168"
data:
    classification: ""
    created: "2017-12-21T20:20:30.92522Z"
    description: "As of Safari 11.1, we can no longer reproduce this.\r\n\r\nSummary:\r\n\r\ncrypto.subtle.generateKey({{ name: \"ECDSA\", namedCurve: \"P-256\", }, true, [\"sign\", \"verify\"]) will occasionally (about 1 out of 200 times) produce keys that when exported contain points that are not on curve P-256.\r\n\r\nThe most apparent symptom is that Safari will fail when attempting to verify signatures created with these keys. But other browsers refuse to import these keys.\r\n\r\nSummary for crypto team:\r\n\r\nA few JWK exported ECDSA generated keys give x,y pairs that are not on the curve.\r\n\r\nWe do not know if the bug is in the generator or in the exporter.\r\n\r\nSteps to Reproduce:\r\n\r\nOverview of how to reproduce.\r\n\r\n1. Generate a large number of keys (say 500).\r\n2. Export to JWK.\r\n3. Test validity of the keys.\r\n\r\nThere are multiple ways to test the validity of the generated keys.\r\n\r\n- Sign data using the key and then attempt to verify the signature.\r\n- Mathematically compute that the x and y values correspond to a point on curve P-256\r\n- Import the exported keys into other browsers.\r\n\r\nAll three tests confirm that some bad keys are generated.\r\n\r\nFor steps 1 and 2, see the attached files [...] Note that as keys are randomly generated, each run of the script will produce a different 500 keys.\r\n\r\nIn that output file of 500 private keys, three are bad. Those are \r\n\r\n{\"pubKey\":{\"crv\":\"P-256\",\"ext\":true,\"key_ops\":[\"verify\"],\"kty\":\"EC\",\"x\":\"TE1MHGJ\r\nPz423Ih79CX8Z2LajPocPH40piEkYWeLPnLc\",\"y\":\"y-8R78D0yL9YtgL4FNVDIzU0HGNkWaCQ5Pz3E\r\nYX0TQA\",\"kid\":\"foo-122\"},\"priKey\":{\"crv\":\"P-256\",\"ext\":true,\"key_ops\":[\"sign\"],\"\r\nkty\":\"EC\",\"x\":\"TE1MHGJPz423Ih79CX8Z2LajPocPH40piEkYWeLPnLc\",\"y\":\"y-8R78D0yL9YtgL\r\n4FNVDIzU0HGNkWaCQ5Pz3EYX0TQA\",\"kid\":\"foo-122\",\"d\":\"G8dmImGl4O1zkCyZuHLIE7_B1wgat\r\nnKlkv4gB5o20j4\"}}\r\n\r\n{\"pubKey\":{\"crv\":\"P-256\",\"ext\":true,\"key_ops\":[\"verify\"],\"kty\":\"EC\",\"x\":\"mgmwh6D8f3KlrDsKNrHH4gwf39ME0L74Zhdrp-pdwQA\",\"y\":\"rtDmfYZq8_WN7WxJugLhoZCtOMntI3vk_0JaNwTATF4\",\"kid\":\"foo-435\"},\"priKey\":{\"crv\":\"P-256\",\"ext\":true,\"key_ops\":[\"sign\"],\"kty\":\"EC\",\"x\":\"mgmwh6D8f3KlrDsKNrHH4gwf39ME0L74Zhdrp-pdwQA\",\"y\":\"rtDmfYZq8_WN7WxJugLhoZCtOMntI3vk_0JaNwTATF4\",\"kid\":\"foo-435\",\"d\":\"FArmFpREGoAYhJDHBzi48EY_qO2pc0vtm6a1ZKneHSc\"}}\r\n\r\n{\"pubKey\":{\"crv\":\"P-256\",\"ext\":true,\"key_ops\":[\"verify\"],\"kty\":\"EC\",\"x\":\"E8BDqZcRjbq1SRIyOG5xs6-bY-_CkXrPhgUfZFXAcAA\",\"y\":\"zv3PL2kftp_HDH5cFlVKgolDi_FDFmQp5KqbeDBEZL4\",\"kid\":\"foo-467\"},\"priKey\":{\"crv\":\"P-256\",\"ext\":true,\"key_ops\":[\"sign\"],\"kty\":\"EC\",\"x\":\"E8BDqZcRjbq1SRIyOG5xs6-bY-_CkXrPhgUfZFXAcAA\",\"y\":\"zv3PL2kftp_HDH5cFlVKgolDi_FDFmQp5KqbeDBEZL4\",\"kid\":\"foo-467\",\"d\":\"sJbK6CMys6slIxheRTq0AZge64hZMv-P9k9hPuB1Agc\"}}\r\n\r\nTo test these sample load testKeys.js[...]\r\n\r\nExpected Results:\r\n\r\nAll generated keys should pass all tests\r\n\r\nActual Results:\r\n\r\nA few generated/exported keys fail. \r\n\r\nImpact: [...]\r\n\r\nSpeculation:\r\n\r\nWe suspect that the Safari bug is in creating the representation of x. That may be in the generation process or it may be in the export process. (Hey, we have to leave something for you to test.)\r\n\r\nThe reason for this is that some of the bad keys we've seen have x values which cannot correspond to any y. Given the x of E8BDqZcRjbq1SRIyOG5xs6-bY-_CkXrPhgUfZFXAcAA in foo-467 computing y^2 := x^3 - 3x + b (where b and the modulus are defined in curve P-256) results in a y^2 that is not a quadratic residue in the underlying group.\r\n\r\nThe other two bad keys do allow us to compute a y^2 that do happen to be quadratic residues, but do not correspond to the y given in the exported key.\r\n\r\nWe have only tested P-256 keys.\r\n\r\nNote for open-radar readers:\r\n\r\nThe actual rdar contained several attachments with testing and generating scripts, as well as buckets full of generated test data and screenshots.\r\n\r\nSecurity: We did not see any security implications of this issue but filed it under Security nonetheeless, as misbehavior of some cryptographic routine is something that needs to be treated as a security issue until determined otherwise. Apple has since confirmed that there are no security implications, and reclassified it. Only after that reclassification are we sharing this publicly."
    email: jeff@agilebits.com
    modified: "2018-05-03T00:01:34.79205Z"
    number: "35729330"
    number_intvalue: 35729330
    originated: "2017-11-28"
    parent_number: '&{NULL_VALUE}'
    product: Safari
    product_version: 11.0.1 (13604.3.5)
    reproducible: Approximately once every 200 trials
    resolved: "2018-05-02"
    status: Resolved
    title: generateKey occasionally produces bad ECDSA public keys
