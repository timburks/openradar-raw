apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "36182782"
    labels:
        datastore_id: "6180285251059712"
data:
    classification: Bug
    created: "2017-12-22T14:04:49.42556Z"
    description: "DUPLICATE OF 36053082\r\n\r\nArea:\r\nUIKit\r\n\r\nSummary:\r\nAny UITextField objects created are never deallocated causing serious memory overhead in applications that display large numbers of UITextFields over their lifetime. The UITextField does not need to be added to the view hierarchy, simply initializing a text field in a local variable will result in an abandoned object when the reference falls out of scope. \r\n\r\nSteps to Reproduce:\r\nCreate a UITextField using the default initializer or through interface builder. Leave the scope that the UITextField instance is valid in so that all references to the object are destroyed or remove the containing view from the view hierarchy and remove all references to the view ensuring the containing view is deallocated. \r\n\r\nExpected Results:\r\nThe UITextField is deallocated when references to the instance and it's containing view (if added to the view hierarchy) is deallocated. \r\n\r\nActual Results:\r\nThe UITextField is never deallocated and remains in the application's memory space for the lifetime of the application. \r\n\r\nVersion/Build:\r\niOS 11.2 & 11.2.1 \r\n\r\nConfiguration:\r\nA sample application has been provided to illustrate the problem. The applications displays an initial view controller containing 4 UIButton's:\r\n1. \"Show Text Field Table\": Tapping this button displays a table view with 1000 rows. Each row contains 12 UITextFields.\r\n2. \"Show Text View Table\": Tapping this button displays a table view with 1000 rows. Each row contains 12 UITextViews. \r\n3. \"Show View Controller\": Tapping this button displays a view controller containing a single UITextField and a single UITextView. \r\n4. \"Create UITextField\": Tapping this button creates a function local UITextField instance, which is not assigned to a variable or added to a view hierarchy.  \r\n\r\nThe looking at the memory graph during execution of the sample will show that leaving any of the views containing a UITextField results in the text fields being abandoned not deallocating with the containing view controller. Tapping button 4 the application also illustrates that any initialized UITextField is never deallocated. In contrast all instances of UITextView are destroyed when their parent view is deallocated."
    email: Chris.Morse@vtinfo.com
    modified: "2017-12-22T14:11:36.56367Z"
    number: "36182782"
    number_intvalue: 36182782
    originated: December 21, 2017
    parent_number: '&{NULL_VALUE}'
    product: iOS + SDK
    product_version: ""
    reproducible: Always
    resolved: ""
    status: OPEN
    title: UITextField instances are never destroyed and cause significant performance degradation due to memory and CPU overhead.
