apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "33132086"
    labels:
        datastore_id: "5033093614272512"
data:
    classification: Bug
    created: "2017-07-05T10:56:55.34991Z"
    description: "Area:\r\nCore Location\r\n\r\nSummary:\r\nIt seems that CLLocationManager uses @synchronized(self) internally. It makes it dangerous using CLLocationManager instances in @synchronized blocks in developers' code, since it is not clear that the code may lock. It may result in freezes and even a deadlock (that's what I ran into).\r\nThe danger is that it looks like it works, and the code looks perfectly sane. And when it happens, it's really hard to figure out the reason, especially if the threading logic is complicated.\r\n\r\nSteps to Reproduce:\r\n1) Create a CLLocationManager instance.\r\n2) On a background thread run a long-running task inside a @synchronized(self.locationManager) block.\r\n3) On the main thread call [locationManager stopUpdatingLocation]. Probably, some of the other methods would work as well, it's just the only method I tried.\r\n\r\nHere is an example project demonstrating the issue: https://github.com/DMAPro/LocationManagerDeadlock\r\n(also attached to this report)\r\n\r\nExpected Results:\r\nThe main thread and the background thread work independently\r\n\r\nObserved Results:\r\nThe main thread (and the UI) freezes, until the background thread completes the task\r\n\r\nVersion:\r\nTested on iOS 8 / 9 / 10 (including the latest public release 10.3.2 14F89) on iPhone (both device & simulator).\r\nDidn't test on an iPad.\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:"
    email: demid.itsk@gmail.com
    modified: "2017-07-05T10:56:55.35025Z"
    number: "33132086"
    number_intvalue: 33132086
    originated: July 5th 2017
    parent_number: '&{NULL_VALUE}'
    product: Core Location
    product_version: iOS 8 / 9 / 10
    reproducible: Always
    resolved: ""
    status: ""
    title: CLLocationManager uses @synchronized(self) internally
