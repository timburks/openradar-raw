apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "30642331"
    labels:
        datastore_id: "5063836319088640"
data:
    classification: ""
    created: "2017-03-29T12:32:32.59689Z"
    description: "Summary:\r\nIn a particular structure of HTML/JS/CSS (as included in the example app), when a particular element is touched, the underlying WebContent process enters a seemingly infinite work cycle and pegs the CPU at 100%. This is observable with both an iPhone 7 running Mobile Safari and the iOS Simulator in 10.2. A small change to the HTML structure, i.e. changing an inner <div> tag to an <a> tag resolves the issue with seemingly no other changes anywhere else.\r\n\r\nSteps to Reproduce:\r\nI have hosted examples of a broken and working web application. It uses 3 javascript libraries, namely Angular/Angular-Route/Angular-UI-Router. I have distilled the example apps down to an absolute basic case.\r\n\r\nBad Example:\r\n1. Visit http://bug.dmf.zone/bad\r\n2. Tap the arrow\r\n3. 2 lines should be logged to the JS console (via console.log)\r\n4. Safari will now be locked up/unresponsive\r\n\r\nGood Example:\r\n1. Visit http://bug.dmf.zone/good\r\n2. Tap the arrow\r\n3. 2 lines should be logged to the JS console (via console.log)\r\n4. You should be able to tap the arrow again and more events are logged, indicating that Safari is not locked up\r\n\r\nI have included the source of these apps as an attachment. They just need a local web server. \r\n\r\nExpected Results:\r\nTouch events should continue to be logged into the JS console \r\n\r\nActual Results:\r\nThe Safari Web Content process starts consuming 100% of available CPU capacity and Mobile Safari needs to be killed\r\n\r\nVersion:\r\nTested using iOS 10.2 Simulator and iPhone 7 running 10.2.1 and issue is present\r\n\r\nTested on macOS (Version 10.12.3) with Safari (Version 10.0.3 (12602.4.8)) and issue was not present due to absence of touch events\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:\r\nThe only difference between the good and bad examples is in views/detail.html on line 8 and 12. Changing that tag from a <div> to an <a> tag, while affecting the styling, also mitigates the underlying issue. \r\n\r\nAdditionally, it seems that any adjustment to the DOM tree manually via the inspector prior to the issue occurring also prevents the issue from occurring. \r\n\r\nI've also performed testing on previous iOS versions via the simulator and I believe the issue was introduced in 9.3:\r\n\r\n8.4 (Simulator) - Okay\r\n8.4.1 (iPhone 4s) - Okay\r\n9.0 (Simulator iPhone 5s) - Okay\r\n9.1 (Simulator iPhone 5s) - Okay\r\n9.2 (Simulator iPhone 5s) - Okay\r\n9.3 (Simulator iPhone 5s) - Issue Present\r\n9.3 (Simulator iPhone 6s) - Issue Present\r\n10.1.1 (iPhone 6s) - Issue Present\r\n10.2.1 (iPhone 7) - Issue Present\r\n\r\nIts also worth noting that I don't believe this problem is directly related to the javascript used in this project. Reason being is that while the javascript is on the scene when the issue occurs, when it does I'm unable to debug/breakpoint/pause using the Web Inspector debugger. Inserting 'debugger;' statements throughout the JS code makes no difference. Additionally, without changing the JS but rather changing a <div> to an <a> tag mitigating the issue tends to suggest the JS is not responsible."
    email: Dave.Finster@gmail.com
    modified: "2017-03-29T12:32:32.59718Z"
    number: "30642331"
    number_intvalue: 30642331
    originated: 22-Feb-2017
    parent_number: '&{NULL_VALUE}'
    product: Safari
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Open
    title: WebContent process infinite loop trigger in Mobile Safari causing lock up
