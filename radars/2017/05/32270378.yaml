apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "32270378"
    labels:
        datastore_id: "4986273773125632"
data:
    classification: Bug
    created: "2017-05-18T12:21:20.22488Z"
    description: "Area:\r\nFoundation\r\n\r\nSummary:\r\nWhen fetching data from a server that uses gzip transfer encoding iOS will repeatedly perform a conditional get and not respect the cache. iOS will go out to the network after the initial cache timeout and continually receive a 304. This does not happen when the server does not use compression and returns a non-gzip’d response.\r\n\r\nSteps to Reproduce:\r\nIn the sample project attached you can see the difference between a request that uses gzip content-encoding and one that doesn’t. The sample project hits two URLs. Both have a max-age for the content set to 30 seconds to make testing easier.\r\n\r\n1. Proxy the device’s traffic so you can see the real network requests (I’ve used Charles proxy during testing).\r\n2. Load up the sample app.\r\n3. Leave the ‘Get gzip file’ switch on.\r\n4. Touch fetch and observe that a request was made out to the server (via proxy) and that results are shown in the app, response code was 200.\r\n5. Hit clear and fetch again within 30 seconds.\r\n6. Observe that the request was shown in the app, but that the network was not hit (iOS served from cache). During this initial time the network won’t be hit no matter how many times you fetch.\r\n7. Wait 30 seconds.\r\n8. Hit clear and fetch again and observe that network was hit (via proxy) and that results are shown in the app, response code was 304.\r\n9. Hit fetch again repeatedly and notice that network was hit (via proxy), response code was 304 again.\r\n\r\nAn example timeline is a follows (with gzip):\r\n\r\n1. Fetch file, 200 response\r\n2. Fetch file again within 30 seconds, network not hit, iOS serves from cache\r\n3. After 30 seconds, a 304 is returned, network was hit\r\n4. From now on 304 will be returned and network will always be hit.\r\n\r\nAn example timeline without gzip:\r\n\r\n1. Fetch file, 200 response\r\n2. Fetch file again within 30 seconds, network not hit, iOS serves from cache\r\n3. After 30 seconds, a 304 is returned, network was hit\r\n4. Fetch file again within 30 seconds, network not hit, iOS serves from cache\r\n5. After 30 seconds, another 304 is returned, network was hit, continues from step 4\r\n\r\nExpected Results:\r\nAfter the initial 30 seconds, when a conditional GET is done and a 304 is returned iOS should not hit the network for the cache timeout period for any further network requests. This would match behaviour when the file isn’t gzip’d.\r\n\r\nIf you repeat the tests above, but turn off the ‘Get gzip file’ switch you will notice that after a 304 iOS will not hit the network for the cache timeout period. A 304 will be returned after each cache timeout period (30 seconds).\r\n\r\nAdditionally, in the sample project you can change the variable `enableWorkAround` to true in ViewController.swift which will fix the issue when fetching content that is returned with gzip content-encoding. When repeating the steps with the fix enabled you’ll see the log:\r\n\r\nresponse had a header content-length of: 1546\r\ncreating new response to cache with header content-length of: 3806\r\n\r\nThe fix works by using the NSURLSessionDataDelegate method `URLSession:dataTask:willCacheResponse:completionHandler:` and changing the proposed cached response headers to have a content-length header that is equal to the actual data size of the response that will be cached. You can see this fix in TransferEncodingBugURLCacheHelper.swift in the sample app.\r\n\r\nObserved Results:\r\nAfter the initial 30 second max-age iOS will continue to hit the network each time the content is fetched. iOS seems to ignore the cache.\r\n\r\nVersion:\r\niOS 10.3 (14E277), also is reproducible on iOS 9.3\r\n\r\nNotes:\r\nIn our app the real URLs max-age is 10 minutes. I’ve used these sample URLs to make it easier to reproduce.\r\n\r\nConfiguration:\r\nTo enable a fix for this bug you can change the variable `enableWorkAround` to true in ViewController.swift which will fix the issue when fetching content that is returned with gzip content-encoding.\r\n\r\nSample project:\r\nhttps://github.com/gspiers/radar_32270378\r\n\r\n\r\nUpdate:\r\n\r\nThis seems to be fixed in iOS 11 Beta 5, the bug is still open in Radar so will close this when iOS 11 ships."
    email: gspiers@gmail.com
    modified: "2018-02-13T10:39:27.21494Z"
    number: "32270378"
    number_intvalue: 32270378
    originated: 18/05/2017
    parent_number: '&{NULL_VALUE}'
    product: iOS + SDK Foundation
    product_version: "10.3"
    reproducible: Always
    resolved: ""
    status: Closed
    title: NSURLSession caching problem when using gzip Content-Encoding and conditional GETs
