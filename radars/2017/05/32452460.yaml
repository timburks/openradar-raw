apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "32452460"
    labels:
        datastore_id: "5023858897715200"
data:
    classification: Other Bug
    created: "2017-05-29T14:58:27.42979Z"
    description: "## Summary:\r\n\r\nNSHTTPCookieStorage manages storage of cookies. If an application creates a session cookie and adds it to the NSHTTPCookieStorage singleton, UIWebView sends this cookie, whereas WKWebView doesn't send it. The documentation of NSHTTPCookieStorage says that \"As a rule, cookies are shared among all applications and are kept in sync across process boundaries. Session cookies (where the cookie objectâ€™s sessionOnly method returns YES) are local to a single process and are not shared.\". But for the app developper, WKWebView can (and should) be used for drop-in replacement of UIWebView (since UIWebView is deprecated on iOS 9), regardless WKWebView is sandboxed compared to UIWebView. In particular, all session cookies positionned by an app should be honoured by WKWebView in the context of this particular application. As a side note, there are multiple use cases where session cookie are useful (limited login etc...) in an application.\r\n\r\n## Steps to Reproduce:\r\n\r\n1. Create an iOS application with one UIWebView and one WKWebView\r\n2. Create a session cookie and a cookie with an expiration date in the app:\r\n\r\n\t\t- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\r\n\r\n\t\t\t[self addCookies];\r\n\r\n\t\t\treturn YES;\r\n\t\t}\r\n\r\n\r\n\t\t- (void)addCookies {\r\n\r\n\t\t\tNSDictionary *properties1 = @{\r\n\t\t\t\tNSHTTPCookieName: @\"cookie_session\",\r\n\t\t\t\tNSHTTPCookieValue: @\"value1\",\r\n\t\t\t\tNSHTTPCookieDomain: @\".kermit.orange-labs.fr\",\r\n\t\t\t\tNSHTTPCookiePath: @\"/\",\r\n\t\t\t};\r\n\t\t\tNSHTTPCookie *cookie1 = [NSHTTPCookie cookieWithProperties:properties1];\r\n\r\n\t\t\t[[NSHTTPCookieStorage sharedHTTPCookieStorage] setCookie:cookie1];\r\n\r\n\t\t\tNSDate *nowPlus15Minute = [NSDate dateWithTimeIntervalSinceNow:15 * 60];\r\n\t\t\tNSDictionary *properties2 = @{\r\n\t\t\t\t\t\t\t\t\t\t  NSHTTPCookieName: @\"cookie_with_expiration_date\",\r\n\t\t\t\t\t\t\t\t\t\t  NSHTTPCookieValue: @\"value2\",\r\n\t\t\t\t\t\t\t\t\t\t  NSHTTPCookieDomain: @\".kermit.orange-labs.fr\",\r\n\t\t\t\t\t\t\t\t\t\t  NSHTTPCookiePath: @\"/\",\r\n\t\t\t\t\t\t\t\t\t\t  NSHTTPCookieExpires: nowPlus15Minute,\r\n\t\t\t\t\t\t\t\t\t\t  };\r\n\t\t\tNSHTTPCookie *cookie2 = [NSHTTPCookie cookieWithProperties:properties2];\r\n\r\n\t\t\t[[NSHTTPCookieStorage sharedHTTPCookieStorage] setCookie:cookie2];\r\n\t\t}\r\n\r\n\r\n3. Load the url <http://cookie.kermit.orange-labs.fr> from the UIWebView and the WKWebView. Note: <http://cookie.kermit.orange-labs.fr> is a web page that display cookies set by the request, but test web page could be used. \r\n\r\nAlternative:\r\n\r\n1. Build and run the provided sample.\r\n\r\n## Expected Results:\r\n\r\nUIWebView and WKWebView should display the two cookies 'cookie_session' and 'cookie_with_expiration_date'.\r\n\r\n## Actual Results:\r\n\r\nWKWebView only displays the 'cookie_with_expiration_date', whereas UIWebView displays both cookies.\r\n\r\n## Version:\r\n\r\niOS 10.3.2 (14F89)\r\n\r\n## Notes:\r\n\r\n##Configuration:\r\n\r\nTested on iPhone SE iOS 10.3.2"
    email: contact@manbolo.com
    modified: "2017-06-09T12:18:56.06443Z"
    number: "32452460"
    number_intvalue: 32452460
    originated: 29-May-2017 01:00 PM
    parent_number: "17486250"
    product: iOS + SDK WebKit
    product_version: iOS 10.3.2
    reproducible: Always
    resolved: ""
    status: Duplicate/17486250
    title: WKWebView Doesn't Take NSHTTPCookieStorage Session Cookies into Account
