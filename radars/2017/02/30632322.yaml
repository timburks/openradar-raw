apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "30632322"
    labels:
        datastore_id: "4987342213349376"
data:
    classification: Crash/Hang/Data Loss
    created: "2017-02-21T16:42:41.92032Z"
    description: "Description:\r\nWhen `-[UICollectionView prefetchingEnabled]` is `YES`, there are conditions in which `UICollectionView` can request a cell that does not exist when the `-[UICollectionView performBatchUpdates:completion:]` method is invoked.\r\n\r\nThis has been observed as a crash in the production with our application. It has the following stack trace:\r\n\r\n```\r\n7   UIKit                                0x0000000198447c0c -[UICollectionView _createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:notify:] + 444\r\n8   UIKit                                0x0000000198448edc -[UICollectionView _prefetchItemsForVelocity:maxItemsToPrefetch:invalidateCandidatesOnDirectionChanges:] + 496\r\n9   UIKit                                0x0000000197bba73c -[UICollectionView layoutSubviews] + 688\r\n10  UIKit                                0x0000000197b5ba80 -[UIView(CALayerDelegate) layoutSublayersOfLayer:] + 1192\r\n11  QuartzCore                           0x00000001950099d8 -[CALayer layoutSublayers] + 144\r\n12  QuartzCore                           0x0000000194ffe4cc CA::Layer::layout_if_needed(CA::Transaction*) + 288\r\n13  UIKit                                0x0000000197b70500 -[UIView(Hierarchy) layoutBelowIfNeeded] + 1012\r\n14  UIKit                                0x000000019845beec -[UICollectionView _performBatchUpdates:completion:invalidationContext:tentativelyForReordering:animator:] + 240\r\n15  UIKit                                0x000000019845bdd8 -[UICollectionView _performBatchUpdates:completion:invalidationContext:tentativelyForReordering:] + 92\r\n16  UIKit                                0x000000019845bd5c -[UICollectionView _performBatchUpdates:completion:invalidationContext:] + 80\r\n17  UIKit                                0x0000000197d38618 -[UICollectionView performBatchUpdates:completion:] + 60\r\n```\r\n\r\nFrom this stack trace, you can observe that the UICollectionView is is requesting a new cell from its `dataSource` as a side-effect of the `performBatchUpdates:completion:` method. This would be normally be expected behavior, except for the fact that the cell that's being requested is one that doesn't exist.\r\n\r\nWhen the `[UICollectionView _performBatchUpdates:completion:invalidationContext:tentativelyForReordering:animator:]` method is disassembled, you can see that the `-[UIView layoutBelowIfNeeded]` method referenced from the above stack trace is invoked before the batch updates are made.\r\n\r\n```\r\nvoid -[UICollectionView _performBatchUpdates:completion:invalidationContext:tentativelyForReordering:animator:](void * self, void * _cmd, void * arg_8, void * arg_C, void * arg_10, char arg_14, void * arg_18) {\r\n    ...\r\n    if ([self _visible] != 0x0) {\r\n            ...\r\n            [esi layoutBelowIfNeeded];\r\n            [esi _beginUpdates];\r\n            ...\r\n    }\r\n    else {\r\n        ...\r\n    }\r\n    ...\r\n    return;\r\n}\r\n``` \r\n\r\nSpecifically, note that `[esi layoutBelowIfNeeded]` is invoked before `[esi _beginUpdates]`, which appears to apply the updates provided in the `batchUpdates` block to the collection view's internal representation of the items and sections. This would imply that the data inconsistency is resulting from a logic error whereby `UICollectionView` does not prevent itself from requesting old cells prior to the application of batch updates.\r\n\r\nThis can be tied to prefetching by the fact that `_prefetchItemsForVelocity:maxItemsToPrefetch:invalidateCandidatesOnDirectionChanges:` is included in the stack trace, which is only invoked if prefetching is enabled.\r\n\r\nAdditionally, we did not observe this crash before prefetching was enabled.\r\n\r\n\r\nSteps to Reproduce:\r\n- Set enablePrefetching to YES on a UICollectionView\r\n- Perform batch updates on the content of the UICollectionView\r\n\r\n\r\nExpected Results:\r\nUICollectionView does not request non-existent cells. \r\n\r\n\r\nActual Results:\r\nCells that no longer exist are requested by the UICollectionView, which causes a crash when nil is returned from `-[UICollectionViewDataSource collectionView:cellForItemAtIndexPath:]`\r\n\r\n\r\nConfiguration:\r\nSeen on a variety of devices\r\n\r\nVersion & Build:\r\niOS 10.2.1 (14D27)"
    email: horacek.eric@gmail.com
    modified: "2017-02-21T16:42:41.92051Z"
    number: "30632322"
    number_intvalue: 30632322
    originated: 2/21/2017
    parent_number: '&{NULL_VALUE}'
    product: UIKit
    product_version: ""
    reproducible: Sometimes
    resolved: No
    status: Open
    title: Prefetching in UICollectionView requests non-existent cells as part of performing batch updates when prefetching is enabled
