apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "30517694"
    labels:
        datastore_id: "6090931107266560"
data:
    classification: Serious Bug
    created: "2017-02-14T20:18:32.14475Z"
    description: "Area:\r\nSomething not on this list\r\n\r\nSummary:\r\nAn x86_64 process can use certain x87 instructions. Whenever an x87 instruction executes, the FIP (FPU Instruction Pointer Offset) register within the CPU is updated to contain the address of the instruction. See Intel SDM Volume 1 (253665-001) §8.1.8.\r\n\r\nThe FIP register is 64 bits wide on a 64-bit CPU. In a 64-bit process, instructions of x87 instructions can be 64 bits wide.\r\n\r\nIf an x87 instruction is executed in a 64-bit process, and a context switch occurs, when the process next runs, the FIP register (and related FDP, FPU Data Pointer Offset register) are not restored correctly. Only the low 32 bits are restored.\r\n\r\nThe attached test program exhibits this behavior. It prints the contents of the FIP register (obtained via the FXSAVE instruction) three times. The first time, the FPU has been initialized but has not done anything else, and FIP is zero. It then allocates a block of memory, prints the address of this block, and writes an x87 instruction to it. It executes the newly written code, and then prints the FIP register’s value again, which should equal the address of the allocated block. Finally, it sleeps for 100ms to effect a context switch, and upon resuming, it prints the FIP register’s value one last time. The last print should show a value equal to the previous one, but it does not.\r\n\r\nThere are three versions of the FXSAVE structure documented by the Intel SDM Volume 2A (253666-061) §3.2 in the FXSAVE section. There’s the 32-bit FXSAVE format (table 3-43) which is not relevant here. Then there’s the FXSAVE64 format (table 3-46) and 64-bit FXSAVE format (table 3-47). The difference between the two is that the 64-bit FXSAVE format limits the FIP and FDP fields to 32 bits, and provides additional 16-bit fields for FCS and FDS. The FXSAVE64 format omits FCS and FDS, and contains full 64-bit FIP and FDP fields.\r\n\r\nFor saving and restoring the context of a 64-bit process, the FXSAVE64 format is correct. However, the kernel uses the FXSAVE format. See 10.12.3 xnu-3789.41.3/osfmk/i386/fpu.c, which only uses the fxsave instruction, and never fxsave64.\r\n\r\nFCS and FDS may be more relevant to 32-bit processes where 286-style segmentation is available in more than a simplified vestigial form. Even so, modern CPUs always force FCS and FDS to 0. See Intel SDM Volume 1 (253665-061) §8.1.8 under the “FXSAVE, XSAVE, and XSAVEOPT” bullet regarding FCS and FDS deprecation, and Intel SDM Volume 2A (253666-061) §3.2 in the CPUID section, table 3-8, CPUID, with EAX=07h, ECX=0, EBX bit 13: “deprecates FPU CS and DS values if 1.” On these CPUs, no additional information can be gleaned from the FXSAVE structure over the FXSAVE64 structure even for 32-bit processes that may be using segmentation.\r\n\r\nIt would be correct to use the fxsave64 format for 64-bit processes, and it would not be incorrect to use it for 32-bit processes, although the fxsave format is valid for 32-bit processes too.\r\n\r\nSteps to Reproduce:\r\n$ clang++ -std=c++11 fpu_ip.cc -o fpu_ip\r\n$ ./fpu_ip\r\n\r\nExpected Results:\r\n$ ./fpu_ip\r\nfxsave.fpu_ip_64 = 0x0\r\nblock = 0x10f786000\r\nfxsave.fpu_ip_64 = 0x10f786000\r\nfxsave.fpu_ip_64 = 0x10f786000\r\n\r\nNote that “block” and the second two installments of “fxsave.fpu_ip_64” are identical.\r\n\r\nActual Results:\r\n$ ./fpu_ip\r\nfxsave.fpu_ip_64 = 0x0\r\nblock = 0x1028ed000\r\nfxsave.fpu_ip_64 = 0x1028ed000\r\nfxsave.fpu_ip_64 = 0x28ed000\r\n\r\nNote that the final “fxsave.fpu_ip_64” has been truncated to 32 bits.\r\n\r\nVersion:\r\n10.12.3 16D32\r\nxnu-3789.41.3\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:\r\n\r\n\r\nAttachments:\r\n'fpu_ip.cc' was successfully uploaded. http://pastebin.com/KZNk8xyH"
    email: mark@chromium.org
    modified: "2017-02-14T20:18:32.14502Z"
    number: "30517694"
    number_intvalue: 30517694
    originated: "2017-02-14"
    parent_number: '&{NULL_VALUE}'
    product: macOS + SDK
    product_version: 10.12.3 16D32
    reproducible: Always
    resolved: ""
    status: Open
    title: Context switch does not restore full FPU state
