apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "30609889"
    labels:
        datastore_id: "4980317458792448"
data:
    classification: Feature (New)
    created: "2017-02-20T19:48:28.02063Z"
    description: "https://bugs.webkit.org/show_bug.cgi?id=148363\r\n\r\nThe SRI specification \"defines a mechanism by which user agents may verify that a fetched resource has been delivered without unexpected manipulation\" using a validation scheme and \"extending several HTML elements with an integrity attribute that contains a cryptographic hash of the representation of the resource the author expects to load.\" http://w3c.github.io/webappsec/specs/subresourceintegrity/\r\n\r\nExample: If a document loads some JavaScript library code from a shared server at https://example.com/example-framework.js rather than from the same own origin as the document, the document can specify the expected SHA-256 hash of https://example.com/example-framework.js (e.g., C6CB9UYIS9UJeqinPHWTHVqh/E1uhG5Twh+Y5qFQmYg=) and the UA, before executing the JavaScript, can verify that the data matches that expected hash.\r\n\r\n<script src=\"https://example.com/example-framework.js\"\r\n        integrity=\"sha256-C6CB9UYIS9UJeqinPHWTHVqh/E1uhG5Twh+Y5qFQmYg=\"\r\n        crossorigin=\"anonymous\"></script>\r\n\r\nThe mechanism can also be used for resources loaded through <link> elements.\r\n\r\nAs far as support in other UAs, Chrome has supported Subresource Integrity since v45, and Firefox has since v43. https://developer.mozilla.org/en/docs/Web/HTML/Element/script#Browser_compatibility"
    email: DanFabulich@gmail.com
    modified: "2017-03-08T18:16:40.05859Z"
    number: "30609889"
    number_intvalue: 30609889
    originated: "2017-02-20"
    parent_number: '&{NULL_VALUE}'
    product: Safari
    product_version: ""
    reproducible: Not Applicable
    resolved: ""
    status: Duplicate of 18945879
    title: Implement Subresource Integrity
