apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "32547794"
    labels:
        datastore_id: "5040616786362368"
data:
    classification: UIKit
    created: "2017-06-02T23:28:53.33675Z"
    description: "Area:\r\nUIKit\r\n\r\nSummary:\r\nWe are using UICollectionView to focus on certain transformed cells. To do this, we sometimes need to scroll to an offset with a fractional value (to have pixel precise layout). Sometimes, the UICollectionView does not respect the given fraction offset and rounds to the nearest integer.\r\n\r\nThis problem seems to occur before the UICollectionView has been added to a UIWindow. However, after it has been added to any UIWindow, it will accept fractional offsets without issue, even after being removed from the window.\r\n\r\nDue to this issue we cannot rely upon the offset we give to the UICollectionView even when setting without animation. So in addition to the potential for UI bugs due to offset being off by a pixel, there are also bugs when components rely upon the UICollectionView being at a certain offset for state management.\r\n\r\nOne attempted workaround for this bug was correcting the offset after `viewDidAppear` for the UICollectionView's UIViewController or `didMoveToWindow()` for the UICollectionView. However, neither of these fix the issue, the fractional offset is still not respected at those points. The only thing that seemed to actually work was to do:\r\n```\r\noverride func didMoveToWindow() {\r\n    super.didMoveToWindow()\r\n    DispatchQueue.main.async {\r\n        self.setContentOffset(<correct offset>, animated: false)\r\n    }\r\n}\r\n```\r\nHowever this workaround does not seem reliable and results in a very brief flash of the offset being incorrect. This is not an acceptable solution for production.\r\n\r\nSteps to Reproduce:\r\nOpen ScrollingBugExample (the included demo project) and run it on any simulator or device (I can confirm iOS 10.3 on iPhone 7). These steps then illustrate the issue:\r\n\r\n1. Run the app\r\n2. Touch button \"A\"\r\n    - It should add the UICollectionView's UIViewController to the screen\r\n3. Check the logs\r\n    - You should see an attempt to `setContentOffset` to a fractional value before the \"CollectionView.willMove(toWindow: )\" log.\r\n    - It should look like: \r\n\r\n        before setContentOffset((0.0, -200.5), animated: false) offset is: (0.0, 0.0)\r\n        contentOffset.willSet: (0.0, -200.5)\r\n        contentOffset.didSet: (0.0, -201.0)\r\n        after setContentOffset((0.0, -200.5), animated: false) offset is: (0.0, -201.0)\r\n\r\n    - Notice that it internally drops the fractional value before setting the `contentOffset`.\r\n4. Touch button \"C\", it should properly scroll to a fractional `contentOffset`.\r\n5. Touch button \"B\", it will remove the UICollectionView from the window. You can see that it maintains the fractional `contentOffset` now even though it doesn't have a window.\r\n6. Touch button \"A\" again, you will see that this time before the UICollectionView is added to the window, it correctly scrolls to a fractional offset.\r\n\r\nExpected Results:\r\n1. Scrolling to a fractional offset works as expected at all points OR there is an override to allow fractional offsets before adding to a window.\r\n2. There is consistency for how fractional offsets are handled between when a UICollectionView has a window and does not have a window.\r\n3. If a window is necessary to accept fractional offsets, setting a fractional offset in `didMoveToWindow()` is successful.\r\n4. Documentation about which values are accepted for a contentOffset at which periods in the lifecycle of UICollectionView.\r\n\r\nObserved Results:\r\n1. Scrolling to a fractional offset does not work at some periods of the UICollectionView lifecycle, the value is rounded.\r\n2. Scrolling to a fractional offset works sometimes when the UICollectionView is in a certain state, but other times does not.\r\n3. Setting a fractional offset in `didMoveToWindow()` does not work, the requested value is rounded.\r\n4. There is no documentation about what `contentOffset` values are acceptable.\r\n\r\nVersion:\r\niOS 10.3, iOS 10.2, iOS 10.2.1, iOS 10.3.2, iPhone 7 Simulator, iPhone 7 Plus,  Xcode 8.3.2, Xcode 8.2.1\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:\r\nOccurs in a variety of hardware and software configurations.\r\n\r\n======================================================================================\r\nExample project included with bug (all code in single ViewController):\r\n\r\n//\r\n//  TestFractionalScrollingViewController.swift\r\n//\r\n//\r\n//  A demo root view controller for testing fractional contentOffsets.\r\n//  This is for testing a bug where fractional contentOffset is ignored at certain\r\n//  times. It seems that it happens before the layoutSubviews after the UICollectionView is\r\n//  added to a window.\r\n//\r\n//  To use this ViewController\r\n//  - Set it as the rootViewController in a new project\r\n//  - Run the app\r\n//  - Click button \"A\"\r\n//  - It should add the UICollectionView ViewController to the screen\r\n//  - Check the logs, you should see an attempt to setContentOffset to a fractional value before\r\n//  the ColletionView.willMove(toWindow:). You should notice that internally it drops the fraction.\r\n//  - Then press button \"C\", it should properly scroll to a fractional contentOffset\r\n//  - Then press button \"B\", it will remove the CollectionView. You can see that it maintains the\r\n//  fractional contentOffset after its removed from the window.\r\n//  - Press button \"A\" again, you will see that this time it is added to the window, it correctly\r\n//  scrolls to the fractional contentOffset. ????\r\n\r\nimport UIKit\r\n\r\nclass CollectionView: UICollectionView {\r\n\r\n    override var contentOffset: CGPoint {\r\n        willSet {\r\n            NSLog(\"contentOffset.willSet: \\(newValue)\")\r\n        }\r\n        didSet {\r\n            NSLog(\"contentOffset.didSet: \\(contentOffset)\")\r\n        }\r\n    }\r\n\r\n    override func layoutSubviews() {\r\n        NSLog(\"CollectionView.layoutSubviews contentOffset: \\(contentOffset)\")\r\n        super.layoutSubviews()\r\n    }\r\n\r\n    override func performBatchUpdates(_ updates: (() -> Void)?, completion: ((Bool) -> Void)? = nil) {\r\n        NSLog(\"CollectionView.performBatchUpdates\")\r\n        super.performBatchUpdates(updates, completion: completion)\r\n    }\r\n\r\n    override func reloadData() {\r\n        NSLog(\"CollectionView.reloadData\")\r\n        super.reloadData()\r\n    }\r\n\r\n    override func reloadSections(_ sections: IndexSet) {\r\n        NSLog(\"CollectionView.reloadSections\")\r\n        super.reloadSections(sections)\r\n    }\r\n\r\n    override func didMoveToWindow() {\r\n        NSLog(\"CollectionView didMoveToWindow\")\r\n        super.didMoveToWindow()\r\n    }\r\n\r\n    override func willMove(toWindow newWindow: UIWindow?) {\r\n        NSLog(\"CollectionView willMoveToWindow: \\(String(describing: newWindow))\")\r\n        super.willMove(toWindow: window)\r\n    }\r\n\r\n    override func willMove(toSuperview newSuperview: UIView?) {\r\n        NSLog(\"CollectionView willMoveToSuperview: \\(String(describing: newSuperview))\")\r\n        super.willMove(toSuperview: newSuperview)\r\n    }\r\n\r\n    override func didMoveToSuperview() {\r\n        NSLog(\"CollectionView didMoveToSuperview\")\r\n        super.didMoveToSuperview()\r\n    }\r\n\r\n    override func setContentOffset(_ contentOffset: CGPoint, animated: Bool) {\r\n        NSLog(\"before setContentOffset(\\(contentOffset), animated: \\(animated)) offset is: \\(self.contentOffset)\")\r\n        super.setContentOffset(contentOffset, animated: animated)\r\n        NSLog(\"after setContentOffset(\\(contentOffset), animated: \\(animated)) offset is: \\(self.contentOffset)\")\r\n    }\r\n}\r\n\r\nclass TestFractionalScrollingViewController: UIViewController {\r\n    var collectionViewController = CollectionViewController()\r\n    let header = UIView()\r\n    let button1 = UIButton(type: UIButtonType.custom)\r\n    let button2 = UIButton(type: UIButtonType.custom)\r\n    let button3 = UIButton(type: UIButtonType.custom)\r\n\r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n\r\n        setupHeader()\r\n    }\r\n\r\n    override func viewDidLayoutSubviews() {\r\n        super.viewDidLayoutSubviews()\r\n        collectionViewController.view.frame = CGRect(x: 0,\r\n                                                     y: 0,\r\n                                                     width: view.bounds.width,\r\n                                                     height: view.bounds.height - 50)\r\n        layoutHeader()\r\n    }\r\n\r\n    // MARK: Actions\r\n\r\n    func addCollectionView() {\r\n\r\n        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 1) {\r\n            NSLog(\"starting off screen scroll\")\r\n            self.collectionViewController.collectionView.setContentOffset(CGPoint(x: 0, y: -200.5), animated: false)\r\n            DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.001) {\r\n                NSLog(\"starting present\")\r\n                self.presentCV()\r\n            }\r\n        }\r\n    }\r\n\r\n    func presentCV() {\r\n        addChildViewController(collectionViewController)\r\n        view.addSubview(collectionViewController.view)\r\n        collectionViewController.didMove(toParentViewController: self)\r\n    }\r\n\r\n    func removeCollectionView() {\r\n        NSLog(\"collectionView contentOffset before remove: \\(collectionViewController.collectionView.contentOffset)\")\r\n        collectionViewController.willMove(toParentViewController: nil)\r\n        collectionViewController.view.removeFromSuperview()\r\n        collectionViewController.removeFromParentViewController()\r\n        NSLog(\"collectionView contentOffset after remove: \\(collectionViewController.collectionView.contentOffset)\")\r\n    }\r\n\r\n    // MARK: Buttons\r\n\r\n    func handleButton1() {\r\n        addCollectionView()\r\n    }\r\n\r\n    func handleButton2() {\r\n        removeCollectionView()\r\n    }\r\n\r\n    func handleButton3() {\r\n        collectionViewController.collectionView.setContentOffset(CGPoint(x: 0, y: 99.5), animated: true)\r\n    }\r\n\r\n    // MARK: Buttons Header\r\n\r\n    func setupHeader() {\r\n        header.backgroundColor = .lightGray\r\n        view.addSubview(header)\r\n\r\n        header.addSubview(button1)\r\n        button1.setTitle(\"A\", for: .normal)\r\n        button1.addTarget(self, action: #selector(handleButton1), for: .touchUpInside)\r\n        button1.backgroundColor = .darkGray\r\n\r\n        header.addSubview(button2)\r\n        button2.setTitle(\"B\", for: .normal)\r\n        button2.addTarget(self, action: #selector(handleButton2), for: .touchUpInside)\r\n        button2.backgroundColor = .darkGray\r\n\r\n        header.addSubview(button3)\r\n        button3.setTitle(\"C\", for: .normal)\r\n        button3.addTarget(self, action: #selector(handleButton3), for: .touchUpInside)\r\n        button3.backgroundColor = .darkGray\r\n    }\r\n\r\n    func layoutHeader() {\r\n        header.frame = view.bounds\r\n        header.frame.origin.y = view.bounds.height - 50\r\n\r\n        header.frame.size.height = 50\r\n\r\n        let buttonWidth = (header.bounds.width - 5) / 3 - 5\r\n        button1.frame = CGRect(x: (5 + buttonWidth) * 0 + 5, y: 5, width: buttonWidth, height: 40)\r\n        button2.frame = CGRect(x: (5 + buttonWidth) * 1 + 5, y: 5, width: buttonWidth, height: 40)\r\n        button3.frame = CGRect(x: (5 + buttonWidth) * 2 + 5, y: 5, width: buttonWidth, height: 40)\r\n    }\r\n}\r\n\r\nclass CollectionViewController: UIViewController, UICollectionViewDelegateFlowLayout, UICollectionViewDataSource {\r\n    let collectionViewLayout = UICollectionViewFlowLayout()\r\n    let collectionView: UICollectionView\r\n\r\n    init() {\r\n        collectionView = CollectionView(frame: .zero, collectionViewLayout: collectionViewLayout)\r\n        super.init(nibName: nil, bundle: nil)\r\n    }\r\n\r\n    required init?(coder aDecoder: NSCoder) {\r\n        fatalError(\"init(coder:) has not been implemented\")\r\n    }\r\n\r\n    override func viewDidLoad() {\r\n        NSLog(\"ViewController viewDidLoad\")\r\n        super.viewDidLoad()\r\n        view.backgroundColor = .white\r\n        collectionView.backgroundColor = .white\r\n        view.addSubview(collectionView)\r\n\r\n        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: \"cell\")\r\n        collectionView.dataSource = self\r\n        collectionView.delegate = self\r\n    }\r\n\r\n    override func viewDidLayoutSubviews() {\r\n        super.viewDidLayoutSubviews()\r\n\r\n        collectionView.frame = view.bounds\r\n    }\r\n\r\n    // MARK: CollectionView data\r\n\r\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\r\n        return 6\r\n    }\r\n\r\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\r\n        let c = collectionView.dequeueReusableCell(withReuseIdentifier: \"cell\", for: indexPath)\r\n\r\n        let color: UIColor\r\n        switch indexPath.item {\r\n        case 0: color = .red\r\n        case 1: color = .black\r\n        case 2: color = .orange\r\n        case 3: color = .blue\r\n        case 4: color = .green\r\n        case 5: color = .magenta\r\n        default: color = .gray\r\n        }\r\n\r\n        c.backgroundColor = color\r\n\r\n        return c\r\n    }\r\n\r\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\r\n        return CGSize(width: collectionView.bounds.width, height: 200)\r\n    }\r\n    \r\n    func scrollViewDidEndScrollingAnimation(_ scrollView: UIScrollView) {\r\n        NSLog(\"didEndScrollingAnimation at \\(scrollView.contentOffset)\")\r\n    }\r\n}"
    email: smiller@uber.com
    modified: "2017-09-28T23:19:36.20403Z"
    number: "32547794"
    number_intvalue: 32547794
    originated: June 2 2017, 4:25 PM
    parent_number: '&{NULL_VALUE}'
    product: iOS + SDK
    product_version: iOS 10
    reproducible: Always
    resolved: ""
    status: DUPLICATE OF 23255528 | OPEN
    title: UICollectionView/UIScrollView ignores fractional content offsets in some cases
