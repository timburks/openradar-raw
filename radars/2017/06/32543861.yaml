apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "32543861"
    labels:
        datastore_id: "5628401448648704"
data:
    classification: UIKit
    created: "2017-06-02T21:14:32.88006Z"
    description: "Area:\r\nUIKit\r\n\r\nSummary:\r\nWhen calling `UICollectionView.performBatchUpdates` then soon after calling `UICollectionView.reloadData`, the `UICollectionView` is not properly reloaded. In this bad case, `UICollectionViewDataSource.collectionView(_:cellForItemAt:)` is never called for the `reloadData`.\r\n\r\nThis issue is not experience if `UICollectionView.reloadSections` is used in place of `reloadData`.\r\n\r\nHere are some example method traces from the demo project:\r\n\r\nHere we have `performBatchUpdates` followed by `reloadData` and we can see that no call is made to `UICollectionViewDataSource.collectionView(_:cellForItemAt:)` as expected with `reloadData`.\r\n```\r\n16:39:25.944 CollectionView.performBatchUpdates\r\n16:39:25.945 ViewController.performBatchUpdates update closure\r\n16:39:25.946 ViewController.collectionView(_:layout:sizeForItemAt: 0-0)\r\n16:39:25.946 ViewController.collectionView(_:layout:sizeForItemAt: 0-1)\r\n16:39:25.947 ViewController.collectionView(_:layout:sizeForItemAt: 0-2)\r\n16:39:25.947 ViewController.collectionView(_:layout:sizeForItemAt: 0-3)\r\n16:39:25.950 CollectionView.reloadData\r\n16:39:25.951 ViewController.collectionView(_:layout:sizeForItemAt: 0-0)\r\n16:39:26.000 ViewController.collectionView(_:layout:sizeForItemAt: 0-1)\r\n16:39:26.000 ViewController.collectionView(_:layout:sizeForItemAt: 0-2)\r\n16:39:26.000 ViewController.collectionView(_:layout:sizeForItemAt: 0-3)\r\n16:39:26.001 ViewController.performBatchUpdates complete closure\r\n16:39:26.002 CollectionView.layoutSubviews\r\n```\r\n\r\nHere we have `performBatchUpdates` followed by `reloadSections` and we can see that calls are properly made to `UICollectionViewDataSource.collectionView(_:cellForItemAt:)` as expected.\r\n```\r\n17:13:28.620 CollectionView.performBatchUpdates\r\n17:13:28.621 ViewController.performBatchUpdates update closure\r\n17:13:28.622 ViewController.collectionView(_:layout:sizeForItemAt: 0-0)\r\n17:13:28.622 ViewController.collectionView(_:layout:sizeForItemAt: 0-1)\r\n17:13:28.622 ViewController.collectionView(_:layout:sizeForItemAt: 0-2)\r\n17:13:28.623 ViewController.collectionView(_:layout:sizeForItemAt: 0-3)\r\n17:13:28.625 CollectionView.reloadSections\r\n17:13:28.625 ViewController.collectionView(_:layout:sizeForItemAt: 0-0)\r\n17:13:28.625 ViewController.collectionView(_:layout:sizeForItemAt: 0-1)\r\n17:13:28.626 ViewController.collectionView(_:layout:sizeForItemAt: 0-2)\r\n17:13:28.626 ViewController.collectionView(_:layout:sizeForItemAt: 0-3)\r\n17:13:28.627 ViewController.collectionView(_:cellForItemAt: 0-0)\r\n17:13:28.629 ViewController.collectionView(_:cellForItemAt: 0-1)\r\n17:13:28.629 ViewController.collectionView(_:cellForItemAt: 0-2)\r\n17:13:28.630 ViewController.collectionView(_:cellForItemAt: 0-3)\r\n17:13:28.631 CollectionView.layoutSubviews\r\n17:13:28.633 ViewController.performBatchUpdates complete closure\r\n17:13:28.633 CollectionView.layoutSubviews\r\n17:13:29.002 CollectionView.layoutSubviews\r\n```\r\n\r\nSteps to Reproduce:\r\n1. Call `UICollectionView.performBatchUpdates(nil, completion: nil)`\r\n2. Optionally, update the UICollectionViewDataSource (this will help visualize the issue)\r\n3. Call `UICollectionView.reloadData()` immediately afterward (all of this in the same method is the easiest)\r\n\r\nExpected Results:\r\nAll cells are reloaded by calling `UICollectionViewDataSource.collectionView(_:cellForItemAt:)`.\r\n\r\nObserved Results:\r\n`UICollectionViewDataSource.collectionView(_:cellForItemAt:)` is never called.\r\n\r\nVersion:\r\niOS 10.2.1 (14D27), iOS Simulator 10.2 (14C89), Xcode Version 8.2.1 (8C1002), iOS Simulator 10.3 (14E269), Xcode Version 8.3.2 (8E2002)\r\n\r\nNotes:\r\nFor using the included demo project:\r\n\r\nThere are some notes at the top of ViewController.swift, the main file.\r\n\r\n1. Run the project on any device or simulator.\r\n2. Tap the button labeled \"Bad\"\r\n  - You should see that the cells change size but do not reload (they should reload to yellow). If you scroll around you will see that the cells do correctly configure when scrolled on to the screen.\r\n3. Tap the button labeled \"Reset\"\r\n  - This will reset the example to its original state\r\n4. Tap the button labeled \"Good\"\r\n  - You should see the proper reloading behavior since this uses `reloadSections`\r\n5. Repeat 2-4 after changing `DISABLE_ANIMATIONS` at the top of the ViewController.swift file to `true`. This just demonstrates the same issue occurs when not using animations for the animated UICollectionView methods.\r\n\r\nConfiguration:\r\niPhone 7 Plus 128G AT&T, iPhone Simulator\r\n\r\n\r\n\r\n\r\nSample Project include (you only need the ViewController):\r\n=====================================================================\r\n//\r\n//  ViewController.swift\r\n//  CollectionViewBug\r\n//\r\n//  Created by Sam Miller on 3/22/17.\r\n//  Copyright Â© 2017 Sam Miller. All rights reserved.\r\n//\r\n//  A view controller demonstrating a bug in UICollectionView reloadData.\r\n//  To try, simply create an empty application in Xcode and create an instance of\r\n//  ViewController as the rootViewController.\r\n//\r\n//  You will then see that the \"Bad\" button does not correctly reload the UICollectionView\r\n//  whereas the \"Good\" button will correctly reload the cells. \"Bad\" incorrectly reloads\r\n//  the cells by updating the layout but not reconfiguring the cells.\r\n//\r\n//  You can also try these methods both with animations left on, or with animations disabled. \r\n//  Just change the global variable at the top of this file, DISABLE_ANIMATIONS. This will enabled\r\n//  or disable wrapping the UICollectionView reload methods with UIView.performWithoutUpdates.\r\n//\r\n\r\nimport UIKit\r\n\r\nlet DISABLE_ANIMATIONS = false\r\n\r\nclass CollectionView: UICollectionView {\r\n    override func layoutSubviews() {\r\n        NSLog(\"CollectionView.layoutSubviews\")\r\n        super.layoutSubviews()\r\n    }\r\n\r\n    override func performBatchUpdates(_ updates: (() -> Void)?, completion: ((Bool) -> Void)? = nil) {\r\n        NSLog(\"CollectionView.performBatchUpdates\")\r\n        super.performBatchUpdates(updates, completion: completion)\r\n    }\r\n\r\n    override func reloadData() {\r\n        NSLog(\"CollectionView.reloadData\")\r\n        super.reloadData()\r\n    }\r\n\r\n    override func reloadSections(_ sections: IndexSet) {\r\n        NSLog(\"CollectionView.reloadSections\")\r\n        super.reloadSections(sections)\r\n    }\r\n}\r\n\r\nclass DemoCell: UICollectionViewCell {\r\n\r\n    let label = UILabel()\r\n\r\n    public override init(frame: CGRect) {\r\n        super.init(frame: frame)\r\n\r\n        label.textAlignment = .center\r\n        label.numberOfLines = 0\r\n        contentView.addSubview(label)\r\n    }\r\n\r\n    required init?(coder aDecoder: NSCoder) {\r\n        fatalError(\"init(coder:) has not been implemented\")\r\n    }\r\n\r\n    override func layoutSubviews() {\r\n        super.layoutSubviews()\r\n\r\n        label.frame = contentView.bounds\r\n    }\r\n}\r\n\r\nstruct CellData {\r\n    let id: String\r\n    let color: UIColor\r\n    let height: CGFloat\r\n}\r\n\r\nclass ViewController: UIViewController, UICollectionViewDelegateFlowLayout, UICollectionViewDataSource {\r\n\r\n    static let defaultCells: [CellData] = [\r\n        CellData(id: \"0\", color: .red,     height: 250),\r\n        CellData(id: \"1\", color: .green,   height: 120),\r\n        CellData(id: \"2\", color: .blue,    height: 200),\r\n        CellData(id: \"3\", color: .purple,  height: 300),\r\n        CellData(id: \"4\", color: .gray,    height: 250),\r\n        CellData(id: \"5\", color: .orange,  height: 100),\r\n        CellData(id: \"5\", color: .magenta, height: 50)\r\n    ]\r\n\r\n    let collectionViewLayout = UICollectionViewFlowLayout()\r\n    let collectionView: UICollectionView\r\n    let header = UIView()\r\n    let button1 = UIButton(type: UIButtonType.custom)\r\n    let button2 = UIButton(type: UIButtonType.custom)\r\n    let button3 = UIButton(type: UIButtonType.custom)\r\n\r\n    var cells: [CellData] = ViewController.defaultCells\r\n\r\n    init() {\r\n        collectionView = CollectionView(frame: .zero, collectionViewLayout: collectionViewLayout)\r\n        super.init(nibName: nil, bundle: nil)\r\n    }\r\n\r\n    required init?(coder aDecoder: NSCoder) {\r\n        fatalError(\"init(coder:) has not been implemented\")\r\n    }\r\n\r\n    override func viewDidLoad() {\r\n        NSLog(\"ViewController.viewDidLoad\")\r\n        super.viewDidLoad()\r\n        view.backgroundColor = .white\r\n        collectionView.backgroundColor = .white\r\n        view.addSubview(collectionView)\r\n\r\n        collectionView.register(DemoCell.self, forCellWithReuseIdentifier: \"cell\")\r\n        collectionView.dataSource = self\r\n        collectionView.delegate = self\r\n        setupHeader()\r\n    }\r\n\r\n    override func viewDidLayoutSubviews() {\r\n        super.viewDidLayoutSubviews()\r\n\r\n        collectionView.frame = view.bounds\r\n        layoutHeader()\r\n    }\r\n\r\n    // MARK: CollectionView data\r\n\r\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\r\n        return cells.count\r\n    }\r\n\r\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\r\n        NSLog(\"ViewController.collectionView(_:cellForItemAt: \\(indexPath.map({ \"\\(Int($0))\" }).joined(separator: \"-\")))\")\r\n        let c = collectionView.dequeueReusableCell(withReuseIdentifier: \"cell\", for: indexPath)\r\n        guard let cell = c as? DemoCell else { return c }\r\n\r\n        let model = cells[indexPath.item]\r\n\r\n        cell.label.text = \"Cell \\(model.id)\"\r\n        cell.backgroundColor = model.color\r\n\r\n        return cell\r\n    }\r\n\r\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\r\n        NSLog(\"ViewController.collectionView(_:layout:sizeForItemAt: \\(indexPath.map({ \"\\(Int($0))\" }).joined(separator: \"-\")))\")\r\n        return CGSize(width: view.bounds.width, height: cells[indexPath.item].height)\r\n    }\r\n\r\n    // MARK: Actions\r\n\r\n    func badReload() {\r\n        invalidateLayout()\r\n\r\n        cells = yellowCells()\r\n\r\n        UIView.performWithoutAnimation(DISABLE_ANIMATIONS) {\r\n            collectionView.reloadData()\r\n        }\r\n    }\r\n\r\n    func goodReload() {\r\n        invalidateLayout()\r\n\r\n        cells = yellowCells()\r\n\r\n        UIView.performWithoutAnimation(DISABLE_ANIMATIONS) {\r\n            collectionView.reloadSections(IndexSet(0..<collectionView.numberOfSections))\r\n        }\r\n    }\r\n\r\n    func invalidateLayout() {\r\n        UIView.performWithoutAnimation(DISABLE_ANIMATIONS) {\r\n            collectionView.performBatchUpdates({\r\n                NSLog(\"ViewController.performBatchUpdates update closure\")\r\n                }, completion: { (finished) in\r\n                    NSLog(\"ViewController.performBatchUpdates complete closure\")\r\n            })\r\n        }\r\n    }\r\n\r\n    func reset() {\r\n        cells = ViewController.defaultCells\r\n\r\n        collectionView.reloadData()\r\n        collectionView.layoutIfNeeded()\r\n    }\r\n\r\n    // MARK: Buttons\r\n\r\n    func handleButton1() {\r\n        badReload()\r\n    }\r\n\r\n    func handleButton2() {\r\n        goodReload()\r\n    }\r\n\r\n    func handleButton3() {\r\n        reset()\r\n    }\r\n\r\n    func yellowCells() -> [CellData] {\r\n        return [\r\n            CellData(id: \"A\", color: .yellow, height: 100),\r\n            CellData(id: \"B\", color: .yellow, height: 200),\r\n            CellData(id: \"C\", color: .yellow, height: 300),\r\n            CellData(id: \"D\", color: .yellow, height: 200),\r\n            CellData(id: \"E\", color: .yellow, height: 100),\r\n            CellData(id: \"F\", color: .yellow, height: 50),\r\n            CellData(id: \"G\", color: .yellow, height: 400)\r\n        ]\r\n    }\r\n\r\n    // MARK: Buttons Header\r\n\r\n    func setupHeader() {\r\n        collectionView.contentInset.bottom = 50\r\n\r\n        header.backgroundColor = .lightGray\r\n        view.addSubview(header)\r\n\r\n        header.addSubview(button1)\r\n        button1.setTitle(\"Bad\", for: .normal)\r\n        button1.addTarget(self, action: #selector(handleButton1), for: .touchUpInside)\r\n        button1.backgroundColor = .darkGray\r\n\r\n        header.addSubview(button2)\r\n        button2.setTitle(\"Good\", for: .normal)\r\n        button2.addTarget(self, action: #selector(handleButton2), for: .touchUpInside)\r\n        button2.backgroundColor = .darkGray\r\n\r\n        header.addSubview(button3)\r\n        button3.setTitle(\"Reset\", for: .normal)\r\n        button3.addTarget(self, action: #selector(handleButton3), for: .touchUpInside)\r\n        button3.backgroundColor = .darkGray\r\n    }\r\n\r\n    func layoutHeader() {\r\n        header.frame = view.bounds\r\n        header.frame.origin.y = view.bounds.height - 50\r\n\r\n        header.frame.size.height = 50\r\n\r\n        let buttonWidth = (header.bounds.width - 5) / 3 - 5\r\n        button1.frame = CGRect(x: (5 + buttonWidth) * 0 + 5, y: 5, width: buttonWidth, height: 40)\r\n        button2.frame = CGRect(x: (5 + buttonWidth) * 1 + 5, y: 5, width: buttonWidth, height: 40)\r\n        button3.frame = CGRect(x: (5 + buttonWidth) * 2 + 5, y: 5, width: buttonWidth, height: 40)\r\n    }\r\n}\r\n\r\nextension UIView {\r\n    open class func performWithoutAnimation(_ isWithoutAnimation: Bool, _ actionsWithoutAnimation: () -> Swift.Void) {\r\n        if isWithoutAnimation {\r\n            self.performWithoutAnimation(actionsWithoutAnimation)\r\n        } else {\r\n            actionsWithoutAnimation()\r\n        }\r\n    }\r\n}"
    email: smiller@uber.com
    modified: "2017-06-02T21:16:04.46002Z"
    number: "32543861"
    number_intvalue: 32543861
    originated: June 2 2017
    parent_number: '&{NULL_VALUE}'
    product: iOS + SDK
    product_version: iOS 10.2, iOS 10.3
    reproducible: Always
    resolved: ""
    status: Open
    title: UICollectionView reloadData does not reload when preceded by performBatchUpdates
