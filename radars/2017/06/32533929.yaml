apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "32533929"
    labels:
        datastore_id: "6175096964120576"
data:
    classification: Crash
    created: "2017-06-02T12:28:30.8715Z"
    description: "Summary:\r\nWe observed a crash in our app under certain circumstances:\r\n- It only happens when the app is started from Xcode.\r\n- It only happens on devices, not in the simulator.\r\n- It only happens in Release-mode.\r\n- It only happens when \"Debug executable\" is turned on in the scheme.\r\n- \"Launch\" has to be set to \"Automatically\" in the scheme.\r\n- \"GPU Frame Capture\" has to on \"Automatically Enabled\".\r\n- OpenGLES.framework has to be linked to the app.\r\n- None of the memory-analyzing options (Address Sanitizer, Malloc Scribble, Malloc Guard Edges, Guard Malloc, Zombie Objects or Malloc Stack) has to be enabled.\r\n\r\nThe stacktraces varied and didn't guide us to an error in our sourcecode (I attach screenshots of some of them to this issue). It looks like that the memory gets somewhere corrupted, that something writes to an address it shouldn't do and corrupts active objects. In ~1 out of 50 cases, the crash happens at the same point within the app, but at that 50th case, it crashes somewhere random in the app. So the guess was that the corruption hits most often an object that was currently created, and used within the same viewcontroller, and sometimes it just hits an object that is used by an other viewcontroller. Not being able to reproduce the problem with any of the memory-analyzing-options turned on, didn't make it easier.\r\nNevertheless, we assumed that the error was in one of the changes we did in our app and selectively reverted / outcommented code to find the line that causes the crash.\r\n\r\nThis guided us to a call to [[NSRunLoop currentRunLoop] runUntilDate:] inside SVProgressHUD - when we outcommented it, it didn't crash. But this didn't make any sense at all. Before that call, views, layers and animations are created. So we assumed that it might be related to animations that start to get visible while the runloop gets started, and then the method which calls runUntilDate finishes and the autoreleasepool kicks in and something terrible happens. But deactivating almost all of that code didn't made the crash to go away.\r\n\r\nSo, on the third day of debugging, today, I switched the available options in the Scheme on / off just out of curiousity. So I first found out that it only happens when \"Debug executable\" is turned on, and it also only happens when \"Launch\" is set to \"Automatically\". Seems like that an active debugging-session alters the behaviour of the app. Reactivating the \"Debug exectuable\" and setting \"Launch\" back to \"Automatically\", I finally turned the \"GPU Frame Capture\"-option from its default-value \"Automatically Enabled\" to \"Disabled\" and that made the crash also disappear. I tried it in an test-project that I created before to make a reduced test-case and noticed that the \"FPS\"-Gauge only appears when the OpenGLES.framework is linked to the app and concluded that the \"GPU Frame Capture\"-setting also is only active when the OpenGLES.framework is linked to the app. \r\n\r\n(continue in \"Steps to Reproduce\")\r\n\r\nSteps to Reproduce:\r\nAs i only have 3000 characters for the Summary, here the continuation:\r\nAfter linking it to the test-app, I was able to reproduce the crash in it (the project is also attached to this issue).\r\n\r\nWe conclude that \"GPU Frame Capture\" alters the behaviour of the app in a way that may corrupt the memory or cause an undefined state somewhere in iOS that may crash an App. We further conclude that there is no bug in our code and that appstore-releases won't be affected by it.\r\n\r\nAs all of this is purely based on observations and not backed by the knowledge of the real cause, it would be great to hear back if you can confirm our conclusions.\r\n\r\nReproduce:\r\n1. Start the attached project on a device.\r\n2. Tap the \"Scroll\"-button\r\n3. Wait until the progress-hud disappears\r\n4. Repeat step 2 and 3 until the app crashes (normally happens within the first 10 tries)\r\n\r\nExpected Results:\r\nEnabling \"GPU Frame Capture\" crashes the app.\r\n\r\nObserved Results:\r\nEnabling \"GPU Frame Capture\" should not cause an app to crash.\r\n\r\nVersion:\r\n\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:\r\nObserved on\r\niPad Mini 1gen with iOS 9.3.5, iPad 4 with iOS 10.3.2, iPad 4 with iOS 10.3.3 Dev Beta 1"
    email: raise.rescue@gmail.com
    modified: "2017-06-02T12:28:30.87174Z"
    number: "32533929"
    number_intvalue: 32533929
    originated: June 2 2017, 2:19 PM
    parent_number: '&{NULL_VALUE}'
    product: ""
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Open
    title: Crash when "GPU Frame Capture" is enabled in Scheme
