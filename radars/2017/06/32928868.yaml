apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "32928868"
    labels:
        datastore_id: "5048766755241984"
data:
    classification: Crash/Hang/Data Loss
    created: "2017-06-22T18:36:47.55094Z"
    description: "I’ve found that something is changing the timestamps (last-modified time) of executables and dylibs on an APFS filesystem. This does not occur on HFS+.\r\n\r\nLike many other build systems, Chrome’s build system tracks whether a particular build output is up to date based on whether its timestamp is more recent than the timestamps of any of the things that it depends on.\r\n\r\nI’ve experienced timestamps advance before my very eyes. It’s particularly alarming to do a build, not change anything, and find that an attempt to rebuild, which shouldn’t need to do any work at all, wants to do several thousand things.\r\n\r\nSo far, I’ve only caught timestamps advancing. This causes an over-build problem. I don’t know if timestamps ever move backwards, although this would have the potential to be a larger problem, because it could mask the fact that files had changed and cause downstream dependencies to not be rebuilt when they ought to be (an under-build problem).\r\n\r\nI’m classifying this as data loss because timestamps are metadata that do have significance.\r\n\r\nSteps to Reproduce:\r\nPreconditions: Be sure that Xcode is installed. Be sure that it’s been launched, that you’ve accepted its license, and that it’s had the opportunity to install any components necessary. Be sure that xcode-select points to it.\r\n\r\nCheck out and build Chromium. (A more complete guide to building Chromium is at https://chromium.googlesource.com/chromium/src/+/master/docs/mac_build_instructions.md.)\r\n\r\n% git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git\r\n% PATH=\"${PATH}:$(pwd)/depot_tools\"\r\n% mkdir chromium\r\n% cd chromium\r\n% fetch chromium\r\n[…wait…]\r\n% cd src\r\n% gn gen out/debug\r\nDone. Made 6755 targets from 1296 files in 4569ms\r\n% ninja -C out/debug chrome\r\nninja: Entering directory `out/debug'\r\n[…wait…]\r\n[29471/29471] STAMP obj/chrome/chrome.stamp\r\n\r\nThen, without making any changes, build it again.\r\n\r\n% ninja -C out/debug chrome\r\n\r\nExpected Results:\r\nThe second attempt to build (the rebuild) should find that there’s nothing to do, and exit quickly. This is what happens when the build is on an HFS+ filesystem.\r\n\r\n% ninja -C out/debug chrome\r\nninja: Entering directory `out/debug'\r\nninja: no work to do.\r\n\r\nObserved Results:\r\nThe second (and often third, fourth, …) attempts to build find that there’s work to do, and rebuilds various files, along with everything “downstream” from the files it’s rebuilt. This can result in thousands of recompiles.\r\n\r\nlitterbox@litterbox zsh% ninja -C out/debug chrome\r\nninja: Entering directory `out/debug'\r\n[2700/2700] STAMP obj/chrome/chrome.stamp\r\n\r\nUse the -n argument to ninja to do a dry run (ninja -n -C out/debug chrome), which will tell you whether it’s planning on rebuilding anything without actually doing the rebuild. Use the “-d explain” option to get ninja to tell you why it’s decided to rebuild something. For example:\r\n\r\n% ninja -d explain -n -C out/debug chrome\r\n[…]\r\nninja explain: output obj/net/http/generate_transport_security_state.inputdeps.stamp older than most recent input transport_security_state_generator (1498153036 vs 1498153760)\r\n[…]\r\n\r\nIn this case, transport_security_state_generator is an executable that’s run to produce transport_security_state_static.h. You can see this in the build description at https://chromium.googlesource.com/chromium/src/+/526c7ebbc8501df55df5ecb0ee90e08368ee6852/net/http/BUILD.gn#7.  generate_transport_security_state.inputdeps.stamp is an output whose timestamp is updated after transport_security_state_static.h is updated. We can look at all of the files involved:\r\n\r\nlitterbox@litterbox zsh% ls -lT out/debug/transport_security_state_generator out/debug/obj/net/http/generate_transport_security_state.inputdeps.stamp out/debug/gen/net/http/transport_security_state_static.h net/http/transport_security_state_static.json net/http/transport_security_state_static.pins net/http/transport_security_state_static.template\r\n-rw-r--r--  1 litterbox  staff  2469636 Jun 21 15:58:09 2017 net/http/transport_security_state_static.json\r\n-rw-r--r--  1 litterbox  staff    90854 Jun 15 12:14:10 2017 net/http/transport_security_state_static.pins\r\n-rw-r--r--  1 litterbox  staff     2013 Jun 15 12:14:10 2017 net/http/transport_security_state_static.template\r\n-rw-r--r--  1 litterbox  staff  1649554 Jun 22 13:37:20 2017 out/debug/gen/net/http/transport_security_state_static.h\r\n-rw-r--r--  1 litterbox  staff        0 Jun 22 13:37:16 2017 out/debug/obj/net/http/generate_transport_security_state.inputdeps.stamp\r\n-rwxr-xr-x  1 litterbox  staff   580756 Jun 22 13:49:20 2017 out/debug/transport_security_state_generator\r\n\r\nSure enough, transport_security_state_generator appears newer than transport_security_state_static.h and generate_transport_security_state.inputdeps.stamp, and since it has appeared to change, it must be run again to produce its output. But its timestamp, 13:49:20, isn’t correct! The file was created at 13:37:16 and no part of the build system changed it.\r\n\r\nlitterbox@litterbox zsh% GetFileInfo out/debug/transport_security_state_generator\r\nfile: \"/chrome/chrome/src/out/debug/transport_security_state_generator\"\r\ntype: \"\\0\\0\\0\\0\"\r\ncreator: \"\\0\\0\\0\\0\"\r\nattributes: avbstclinmedz\r\ncreated: 06/22/2017 13:37:16\r\nmodified: 06/22/2017 13:49:20\r\n\r\nVersion:\r\n10.13db2 17A291j with Xcode 9b2 9M137d.\r\nI also experienced this with 10.13db1 17A264c with Xcode 9b1 9M136h.\r\n\r\nNotes:\r\nRunning “ls -ltT out/debug” is informative. If you run it right after the build, wait a while without doing anything, and then run it again, you’ll spot timestamps advancing on executables and dylibs. For example, when I first finished the initial build, I had\r\n\r\n-rwxr-xr-x  1 litterbox  staff  21302808 Jun 22 13:49 mksnapshot\r\n\r\nWithout doing any rebuild at all or doing anything else that would cause this file to be touched, a half hour later, I now have\r\n\r\n-rwxr-xr-x  1 litterbox  staff  21302808 Jun 22 14:13 mksnapshot\r\n\r\nYou’ll also note that each dylib in out/debug is accompanied by a .TOC file. The .TOC file is always updated immediately after its corresponding .dylib is linked, so the timestamp of any .TOC file should always be at least as fresh as its companion .dylib. Yet there are numerous examples such as\r\n\r\n-rwxr-xr-x   2 litterbox  staff   10772916 Jun 22 14:02 libbase.dylib\r\n-rw-r--r--   1 litterbox  staff     342086 Jun 22 13:36 libbase.dylib.TOC\r\n\r\nConfiguration:\r\nThis only occurs on an APFS volume. When I do the build on an HFS+ volume, I don’t see this problem."
    email: mark@chromium.org
    modified: "2017-08-01T21:29:55.8426Z"
    number: "32928868"
    number_intvalue: 32928868
    originated: "2017-06-22"
    parent_number: '&{NULL_VALUE}'
    product: macOS + SDK
    product_version: 10.13db2 17A291j
    reproducible: Sometimes
    resolved: "2017-08-01"
    status: Closed
    title: 'APFS: Something is changing timestamps (last-modified time) of executables and dylibs, triggering build systems to rebuild unnecessarily'
