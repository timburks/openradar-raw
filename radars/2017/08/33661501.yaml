apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "33661501"
    labels:
        datastore_id: "4978826434052096"
data:
    classification: Performance
    created: "2017-08-01T21:43:55.03156Z"
    description: "Area:\r\nPerformance (slow, hung)\r\n\r\nSummary:\r\nOriginally filed under 32934061, which was incorrectly marked as a duplicate of 32928868 and closed. I still experience this problem on 10.13db4 17A315i and was instructed to open a new bug report.\r\n\r\nWhen comparing APFS’ performance to HFS+’s for common operations done during software development, I found that in no case does APFS perform better than HFS+. In some cases, it performs worse.\r\n\r\nDevelopment of a large project like Chrome often involves tools scanning many files to determine whether they’ve changed, either by examining their data or metadata such as timestamps. Chrome’s main git repository contains over 250,000 files, all repositories together contain over 400,000 files, and a build produces over 40,000 files. This can present quite a workout to a filesystem.\r\n\r\nI found that with a cold buffer cache (following system boot), “git status” takes twice as long on APFS as it does on HFS+. A null build, in which everything’s already up-to-date and nothing new needs to be compiled, also takes longer on APFS than it does on HFS+. This tests each filesystem’s speed of reading file metadata, notably, modification timestamps.\r\n\r\nOn the other hand, most of the differences disappear with a warm buffer cache.\r\n\r\nSummarizing various results, here are the wall clock times for various operations.\r\n\r\n                                                   APFS   HFS+\r\ngit status, with core.untrackedcache false, cold  7.654  4.311\r\n                                          , warm  1.428  1.174\r\ngit status, with core.untrackedcache true, cold   7.797  3.810\r\n                                         , warm   0.726  0.684\r\nnull build, cold                                  8.193  6.014\r\n          , warm                                  2.018  2.031\r\n\r\nBoth APFS and HFS+ volumes were on the same physical media, and neither was encrypted. For all tests, the system was installed on the APFS volume. Each “cold” test was performed immediately following a reboot, and each “warm” test was performed immediately thereafter. APFS and HFS+ were never tested during the same boot, to ensure that all parts of the system were equally cold and warm for purposes of comparison testing.\r\n\r\nTests were performed on a MacBook Pro (15-inch, 2016) (MacBookPro13,3) with a 512GB SSD (APPLE SSD SM0512L). Chrome was synced to c2c8d078d585958a92e62c96de953ed3ab8e8cfe (https://crrev.com/c2c8d078d585958a92e62c96de953ed3ab8e8cfe).\r\n\r\nAPFS is not performing on par with developer expectations coming from HFS+.\r\n\r\nSteps to Reproduce:\r\nPreconditions: Be sure that Xcode is installed. Be sure that it’s been launched, that you’ve accepted its license, and that it’s had the opportunity to install any components necessary. Be sure that xcode-select points to it.\r\n\r\nCheck out and build Chromium, once on an APFS volume, and once again on an HFS+ volume. (A more complete guide to building Chromium is at https://chromium.googlesource.com/chromium/src/+/master/docs/mac_build_instructions.md.)\r\n\r\n% git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git\r\n% PATH=\"${PATH}:$(pwd)/depot_tools\"\r\n% mkdir chromium\r\n% cd chromium\r\n% mount | grep -F $(df . | tail +2 | cut -d' ' -f1)\r\n/dev/disk1s1 on / (apfs, local, journaled)\r\n% fetch chromium\r\n[…wait…]\r\n% cd src\r\n% gn gen out/debug\r\nDone. Made 6756 targets from 1296 files in 6251ms\r\n% ninja -C out/debug chrome\r\nninja: Entering directory `out/debug'\r\n[…wait…]\r\n[29471/29471] STAMP obj/chrome/chrome.stamp\r\n% mkdir /Volumes/HFSPlus/chromium\r\n% cd /Volumes/HFSPlus/chromium\r\n% mount | grep -F $(df . | tail +2 | cut -d' ' -f1)\r\n/dev/disk0s4 on /Volumes/HFSPlus (hfs, local, journaled)\r\n% fetch chromium\r\n[…wait…]\r\n% cd src\r\n% gn gen out/debug\r\nDone. Made 6756 targets from 1296 files in 6332ms\r\n% ninja -C out/debug chrome\r\nninja: Entering directory `out/debug'\r\n[…wait…]\r\n[29471/29471] STAMP obj/chrome/chrome.stamp\r\n\r\nThen, on each volume, test “git status” and the “ninja -C out/debug chrome” null build, both cold (immediately following boot) and warm (immediately thereafter).\r\n\r\nNote that actually achieving a null build on an APFS+ volume is tricky due to radar 32928868. In order to reach a state where the timestamps stopped moving, I had to do several null builds and then reboot to attempt a re-test.\r\n\r\nExpected Results:\r\nHFS+ results\r\n\r\n(git config --global core.untrackedcache false; git update-index; reboot)\r\n% time git status\r\nOn branch master\r\nYour branch is up-to-date with 'origin/master'.\r\nnothing to commit, working tree clean\r\ngit status  1.48s user 8.51s system 231% cpu 4.311 total\r\n% time git status\r\nOn branch master\r\nYour branch is up-to-date with 'origin/master'.\r\nnothing to commit, working tree clean\r\ngit status  0.68s user 2.62s system 281% cpu 1.174 total\r\n\r\n(git config --global core.untrackedcache true; git update-index; reboot)\r\n% time git status\r\nOn branch master\r\nYour branch is up-to-date with 'origin/master'.\r\nnothing to commit, working tree clean\r\ngit status  1.19s user 8.13s system 244% cpu 3.810 total\r\n% time git status\r\nOn branch master\r\nYour branch is up-to-date with 'origin/master'.\r\nnothing to commit, working tree clean\r\ngit status  0.39s user 2.27s system 389% cpu 0.684 total\r\n\r\n(reboot)\r\n% time ninja -C out/debug chrome\r\nninja: Entering directory `out/debug'\r\nninja: no work to do.\r\nninja -C out/debug chrome  1.86s user 1.62s system 57% cpu 6.014 total\r\n% time ninja -C out/debug chrome\r\nninja: Entering directory `out/debug'\r\nninja: no work to do.\r\nninja -C out/debug chrome  1.59s user 0.43s system 99% cpu 2.031 total\r\n\r\nObserved Results:\r\nAPFS results\r\n\r\n(git config --global core.untrackedcache false; git update-index; reboot)\r\n% time git status\r\nOn branch master\r\nYour branch is up-to-date with 'origin/master'.\r\nnothing to commit, working tree clean\r\ngit status  1.57s user 30.67s system 421% cpu 7.654 total\r\n% time git status\r\nOn branch master\r\nYour branch is up-to-date with 'origin/master'.\r\nnothing to commit, working tree clean\r\ngit status  0.69s user 2.84s system 247% cpu 1.428 total\r\n\r\n(git config --global core.untrackedcache true; git update-index; reboot)\r\n% time git status\r\nOn branch master\r\nYour branch is up-to-date with 'origin/master'.\r\nnothing to commit, working tree clean\r\ngit status  1.64s user 31.23s system 421% cpu 7.797 total\r\n% time git status\r\nOn branch master\r\nYour branch is up-to-date with 'origin/master'.\r\nnothing to commit, working tree clean\r\ngit status  0.41s user 2.43s system 391% cpu 0.726 total\r\n\r\n(reboot)\r\nlitterbox@litterbox zsh% time ninja -C out/debug chrome\r\nninja: Entering directory `out/debug'\r\nninja: no work to do.\r\nninja -C out/debug chrome  1.96s user 2.61s system 55% cpu 8.193 total\r\nlitterbox@litterbox zsh% time ninja -C out/debug chrome\r\nninja: Entering directory `out/debug'\r\nninja: no work to do.\r\nninja -C out/debug chrome  1.57s user 0.42s system 98% cpu 2.018 total\r\n\r\nVersion:\r\n10.13db4 17A315i with Xcode 9b4 9M189t.\r\nI have experienced this on every 10.13 beta back to the original 10.13db1 17A264c with Xcode 9b1 9M136h."
    email: mark@chromium.org
    modified: "2017-11-02T10:42:31.09232Z"
    number: "33661501"
    number_intvalue: 33661501
    originated: "2017-08-01"
    parent_number: '&{NULL_VALUE}'
    product: macOS + SDK
    product_version: 10.13db4 17A315i
    reproducible: Always
    resolved: ""
    status: Duplicate/31939491 (Open)
    title: APFS performance lags HFS+ for common development operations such as working with Chrome
