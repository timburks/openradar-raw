apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "34162269"
    labels:
        datastore_id: "6170942757666816"
data:
    classification: Bug
    created: "2017-08-30T14:46:45.13338Z"
    description: "Summary:\r\nThe code in the attached project reliably causes the swift compiler to crash (segmentation fault 11) in either Swift version\r\n mode (3.2 or 4.0) when the project is built in the Release configuration (or archived).\r\n \r\n This only happens for the arm64 architecture.\r\n \r\n The compiler does not crash if the project is built in Debug mode.\r\n \r\n It does not matter if the delegate class responds to the selector in question, the compiler crashes anyway.  You can\r\n uncomment out the function declarations of the crash(_:foo:) method in BazTaskDelegate and Bar and the crash will\r\n still occur.\r\n \r\n The error reported is:\r\n \r\n 1.    While running pass #1095 SILFunctionTransform \"\"Combine SIL Instructions via Peephole Optimization\"\" on SILFunction \"@_T013CompilerCrash0bA0C9subscriptAA3BarCSgAA3FooCcfgTo\".\r\n for 'subscript(_:)' at /Users/spaus/Documents/Xcode Projects/CompilerCrash/CompilerCrash/CrashCompiler.swift:48:5\r\n\r\nThere appear to be three aspects of the code that must exist for this crash to occur:\r\n1. The class must declare a subscript operator,\r\n2. The class must use the subscript operator on itself within one of it's own methods\r\n3. The method implementation must also ask the result of the subscript operator if it responds to a method of the same signature as the calling method.\r\n\r\nSteps to Reproduce:\r\nCompile the following code in Release mode with the Xcode 9.0 Beta 6 Swift compiler, in either Swift 3.2 or Swift 4.0 compatibility mode:\r\n\r\nimport Foundation\r\n\r\nprotocol BazDelegate : NSObjectProtocol {}\r\nprotocol BazTaskDelegate : BazDelegate {\r\n    //func crash(_ baz: Baz, foo: Foo)\r\n}\r\n\r\nclass Foo: NSObject {}\r\nclass Bar: NSObject {}\r\nextension Bar: BazTaskDelegate {\r\n    //func crash(_ baz: Baz, foo: Foo){}\r\n}\r\nclass Baz : NSObject {}\r\n\r\nclass CrashCompiler: NSObject {\r\n    subscript(foo: Foo) -> Bar? { get { return Bar() } }\r\n    \r\n    func crash(_ baz: Baz, foo: Foo) {\r\n        if let d = self[foo] as BazTaskDelegate? {\r\n            if d.responds(to: #selector(crash(_:foo:))) {}\r\n        }\r\n    }\r\n}\r\n\r\nExpected Results:\r\nThe expectation is that this code compiles properly, and that swiftc does not crash.  This code compiles correctly under the Xcode 8.3.3 Swift compiler.\r\n\r\nObserved Results:\r\nswiftc crashes with the following output:\r\n\r\nThe error reported is:\r\n \r\n 1.    While running pass #1095 SILFunctionTransform \"\"Combine SIL Instructions via Peephole Optimization\"\" on SILFunction \"@_T013CompilerCrash0bA0C9subscriptAA3BarCSgAA3FooCcfgTo\".\r\n for 'subscript(_:)' at /Users/spaus/Documents/Xcode Projects/CompilerCrash/CompilerCrash/CrashCompiler.swift:48:5\r\n\r\n The stack trace produced is:\r\n \r\n 0  swift                    0x000000010413342a PrintStackTraceSignalHandler(void*) + 42\r\n 1  swift                    0x0000000104132866 SignalHandler(int) + 662\r\n 2  libsystem_platform.dylib 0x00007fff8c6c4b3a _sigtramp + 26\r\n 3  libsystem_platform.dylib 0x00007fff5f1ca100 _sigtramp + 3534771680\r\n 4  swift                    0x0000000101455623 void llvm::function_ref<void (swift::CanType, swift::ProtocolConformanceRef)>::callback_fn<swift::SILCombiner::propagateConcreteTypeOfInitExistential(swift::FullApplySite, swift::WitnessMethodInst*)::$_5>(long, swift::CanType, swift::ProtocolConformanceRef) + 291\r\n 5  swift                    0x00000001014547ea swift::SILCombiner::propagateConcreteTypeOfInitExistential(swift::FullApplySite, swift::ProtocolDecl*, llvm::function_ref<void (swift::CanType, swift::ProtocolConformanceRef)>) + 1018\r\n 6  swift                    0x00000001014554fa swift::SILCombiner::propagateConcreteTypeOfInitExistential(swift::FullApplySite, swift::WitnessMethodInst*) + 474\r\n 7  swift                    0x000000010144ad4c swift::SILVisitor<swift::SILCombiner, swift::SILInstruction*>::visit(swift::ValueBase*) + 20940\r\n 8  swift                    0x0000000101445863 swift::SILCombiner::doOneIteration(swift::SILFunction&, unsigned int) + 2131\r\n 9  swift                    0x0000000101452534 (anonymous namespace)::SILCombine::run() + 708\r\n 10 swift                    0x00000001014feba3 swift::SILPassManager::runOneIteration() + 5139\r\n 11 swift                    0x0000000100c23e3b swift::SILPassManager::executePassPipelinePlan(swift::SILPassPipelinePlan const&) + 235\r\n 12 swift                    0x0000000101503ba3 swift::runSILOptimizationPasses(swift::SILModule&) + 3907\r\n 13 swift                    0x0000000100aa7cf3 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) + 14323\r\n 14 swift                    0x0000000100aa2c94 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) + 7716\r\n 15 swift                    0x0000000100a57bb8 main + 12248\r\n 16 libdyld.dylib            0x00007fff8c4b5235 start + 1\r\n Stack dump:\r\n\r\nVersion:\r\nXcode Version 9.0 beta 6 (9M214v)\r\nmacOS Sierra 10.12.6 (16G29)\r\n\r\nNotes:\r\n\r\n\r\nConfiguration:\r\nThis does not happen when building with the Xcode Version 8.3.3 (8E3004b) swift compiler.\r\nComments"
    email: spaus@paushaus.net
    modified: "2017-08-30T14:47:49.60145Z"
    number: "34162269"
    number_intvalue: 34162269
    originated: 30 August 2017
    parent_number: '&{NULL_VALUE}'
    product: Xcode
    product_version: 9.0 Beta 6 (9M214v)
    reproducible: Yes
    resolved: ""
    status: Open
    title: Swift compiler crashes during Combine SIL Instructions via Peephole Optimization
