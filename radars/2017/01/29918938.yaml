apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "29918938"
    labels:
        datastore_id: "5052063343968256"
data:
    classification: ""
    created: "2017-01-08T19:33:40.41539Z"
    description: "Area:\r\nSomething not on this list\r\n\r\nSummary:\r\nUsing the CTRubyAnnotationCreate function available in CoreText, starting in iOS 10.0 the layout of text using the kCTRubyAlignmentCenter value for CTRubyAlignment is incorrect. \r\n\r\nWhen the ruby text is wider than the base text, it incorrectly aligns the ruby text to the *end* of the base text, instead of the center. When the ruby text is less wide than the base text, it correctly aligns the ruby text to the center of the base text.\r\n\r\nThe intended behavior is for the ruby to be aligned to the center of the base text in both situations, and this was the behavior in iOS 9. This is made clear in the documentation for that parameter, which states:\r\n\r\n\"The ruby text is centered within the width of the base text. If the ruby text is wider than the base text the base text is centered in the width of the ruby text.\"\r\n\r\nSee the attached screenshots for examples. It shows the behavior for every combination of CTRubyAlignment and CTRubyOverhang. It turns out that CTRubyOverhang did not affect the results, but it's included to confirm that it doesn't have an effect.\r\n\r\nThe incorrect line is in iOS 10 Wide Ruby.png, the row marked \"center\". Notice that the ruby is not centered above the base text. The same exact app running on iOS 9 (see screenshot iOS 9 Wide Ruby.png) displays the ruby correctly centered above the base text. Also note that when the base text is larger than the ruby text, it is properly centered even in iOS 10 (see iOS 10 Wide Base.png)\r\n\r\nSteps to Reproduce:\r\n1. Create a CTRubyAnnotationRef, passing kCTRubyAlignmentCenter as the alignment, and ruby text that is longer than the base text it will be applied to.\r\n2. Create a CFAttributedStringRef using this ruby annotation as the kCTRubyAnnotationAttributeName attribute for the short base text.\r\n3. Create a CTLineRef using this CFAttributedStringRef.\r\n4. Draw the CTLineRef using CTLineDraw.\r\n\r\nExpected Results:\r\nThe text is drawn with the ruby text centered above the base text.\r\n\r\nActual Results:\r\nThe text is drawn with the ruby text aligned to the end of the base text.\r\n\r\nVersion:\r\niOS 10.0 to 10.2\r\n\r\nNotes:\r\nSample project illustrating the issue is attached. Run on iOS 9 and iOS 10 to see the difference in behavior.\r\n\r\nConfiguration:\r\nTested on iOS simulator and iPhone SE\r\n\r\nAttachments:\r\n'RubyAlignmentBug.zip', 'iOS 10 Wide Base.png', 'iOS 9 Wide Base.png', 'iOS 10 Wide Ruby.png' and 'iOS 9 Wide Ruby.png' were successfully uploaded."
    email: clindsay@gmail.com
    modified: "2019-09-18T16:29:28.671069Z"
    number: "29918938"
    number_intvalue: 29918938
    originated: 01/08/2017
    parent_number: '&{NULL_VALUE}'
    product: iOS SDK
    product_version: "10.0"
    reproducible: Always
    resolved: ""
    status: Resolved
    title: Incorrect layout using kCTRubyAlignmentCenter when ruby text is wider than base text (iOS 10.0+)
