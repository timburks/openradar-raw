apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "12498897"
    labels:
        datastore_id: "2156401"
data:
    classification: Crash
    created: "2012-10-15T13:59:13.376198Z"
    description: "Core Image crashes when accessing addresses outside of its own allocated space on 10.8.2 (12C60)\r\n\r\n\r\nCertain calls like these ones:\r\n-[CIContext drawImage:inRect:fromRect:]\r\n-[CIContext drawImage:inRect:fromRect:]\r\n-[CIContext render:…]\r\n-[CIContext createCGImage…]\r\n…\r\n\r\nsystematically access addresses outside of their own Core Image allocated space. This in turns creates random crashes (either rare or frequent, depending on configurations) with our customers. In our tests, this potentially affects all applications using Core Image on 10.8.2. The same code behaves correctly on 10.7.5. We haven't found any workaround for this problem, which makes it critical.\r\n\r\nWe have found that it is extremely difficult to reproduce the bug in shipping apps, but using lib Guard Malloc makes it systematically crash near the actual problem.\r\n\r\nSteps to reproduce:\r\n- Unzip the ImageApp sample code\r\n- Build and run ImageApp sample project on a 10.8.2 Mac\r\n- Activate Guard Malloc in the scheme settings\r\n- Run the sample project\r\n- Open an image, notice it shows up correctly in the window (Core Graphics rendering is doing OK)\r\n- Click the Core Image checkbox, which in turn initiate a Core Image rendering\r\n- Guard Malloc immediately crashes the app when rendering with the following backtrace:\r\n\r\n#0\t0x00007fff8a94526d in CGLGetPixelFormat ()\r\n#1\t0x00007fff8ea84398 in -[CIOpenGLContextImpl createAccelContext] ()\r\n#2\t0x00007fff8ea84750 in -[CIOpenGLContextImpl updateContext] ()\r\n#3\t0x00007fff8ea86285 in -[CIOpenGLContextImpl _lockfeContext] ()\r\n#4\t0x00007fff8ea69ecc in -[CIContextImpl setObject:forKey:] ()\r\n#5\t0x00007fff8ea8423c in -[CIOpenGLContextImpl setObject:forKey:] ()\r\n#6\t0x00007fff8f4f03e3 in cgxcoreimage_instance_render ()\r\n#7\t0x00007fff89f09b94 in CGSCoreImageInstanceRender ()\r\n#8\t0x00007fff870839cc in ripc_AcquireCoreImage ()\r\n#9\t0x00007fff87073a00 in ripc_DrawShading ()\r\n#10\t0x00007fff89e8f553 in CGContextDrawShading ()\r\n#11\t0x00007fff8ea63c57 in -[CICGContextImpl render:] ()\r\n#12\t0x00007fff8ea6918a in -[CIContext drawImage:inRect:fromRect:] ()\r\n#13\t0x0000000100007b4c in -[ImageView drawCIImage] at /Volumes/Safe/Users/raf/Downloads/ImageApp/ImageView.m:151\r\n#14\t0x0000000100007cd4 in -[ImageView drawRect:] at /Volumes/Safe/Users/raf/Downloads/ImageApp/ImageView.m:162\r\n\r\n\r\n\r\nThe same sample code runs fine under Guard Malloc on 10.7.5\r\n\r\n\r\nAdditional information:\r\n\r\nWe have noticed that backtrace problem (crash) in one of our apps, just after a -[CIContext render:toBitmap:rowBytes:…], which is also detected with the Guard Malloc library, within the scope of Core Image:\r\n\r\n#0\t0x0000000101b67cb9 in tinyunw_async_list_remove_image_by_header at .../PLCrashReporterGit/Source/tinyunwind/libtinyunwind_image.c:241\r\n#1\t0x00007fff5fc01bd9 in dyld::removeImage(ImageLoader*) ()\r\n#2\t0x00007fff5fc0b5dd in NSUnLinkModule ()\r\n#3\t0x00007fff8cf156ff in NSUnLinkModule ()\r\n#4\t0x0000000202036919 in ___lldb_unnamed_function6$$libcldcpuengine.dylib ()\r\n#5\t0x00000002020368ee in glrCompDeleteProgram ()\r\n#6\t0x00007fff89b4448b in ___lldb_unnamed_function976$$OpenCL ()\r\n#7\t0x00007fff89b3d3f0 in ___lldb_unnamed_function455$$OpenCL ()\r\n#8\t0x00007fff89b3d38d in ___lldb_unnamed_function453$$OpenCL ()\r\n#9\t0x00007fff89b2bbdc in clReleaseProgram ()\r\n#10\t0x00007fff8ea9f5be in FEOpenCLProgram::setProgram(_cl_program*) ()\r\n#11\t0x00007fff8ea9f6aa in FEOpenCLProgram::~FEOpenCLProgram() ()\r\n#12\t0x00007fff8ea9f620 in FEOpenCLProgram::~FEOpenCLProgram() ()\r\n#13\t0x00007fff8d99afef in -[NSConcretePointerArray dealloc] ()\r\n#14\t0x00007fff8ea9ca7e in FEOpenCLContextFinalize(FEOpenCLContext*) ()\r\n#15\t0x00007fff8ea9cc02 in -[FEOpenCLContext dealloc] ()\r\n#16\t0x00007fff8ea65e9c in -[CICLContextImpl invalidate] ()\r\n#17\t0x00007fff8ea65fec in -[CICLContextImpl setOwner:] ()\r\n#18\t0x00007fff8ea684c6 in -[CIContext invalidate] ()\r\n#19\t0x00007fff8ea6843b in -[CIContext dealloc] ()\r\n#20\t0x00007fff8e05c230 in (anonymous namespace)::AutoreleasePoolPage::pop(void*) ()\r\n#21\t0x00007fff85e9c342 in _CFAutoreleasePoolPop ()\r\n#22\t0x00007fff8d9894fa in -[NSAutoreleasePool drain] ()\r\n#23\t0x000000010059ce12 in -[CIImage(EXBase) ex_bakedDataWithBitmapInfo:format:bitsPerComponent:bitsPerPixel:bakingColorSpace:processingContext:destinationData:] at /Volumes/Safe/Users/raf/WorkArea/Creacode/EXBase/Sources/CIImage+EXBase.m:506\r\n\r\n\r\nUpdate on 2012-10-16\r\nThe additional information above can be ignored, as it appears to be linked to an interaction with PLCrashReporter, which is a third party framework. The first part of the bug report remains valid though."
    email: raphael@creaceed.com
    modified: "2012-10-16T07:34:29.081174Z"
    number: "12498897"
    number_intvalue: 12498897
    originated: 15/10/2012
    parent_number: '&{NULL_VALUE}'
    product: Mac OS X 10.8
    product_version: 10.8.2 (12C60)
    reproducible: Always
    resolved: ""
    status: Open
    title: Core Image crashes when rendering (accessing addresses outside of its own allocated space)
