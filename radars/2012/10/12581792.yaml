apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "12581792"
    labels:
        datastore_id: "2214401"
data:
    classification: Other Bug
    created: "2012-10-27T13:04:00.856332Z"
    description: "I am porting my coroutine implemetation (https://github.com/mikewei/micoro) to MacOS and found swapcontext(3) in MacOS(10.7.5) (with Libc-763.13) does not work correctly. \r\nThen I wrote a simple test program and the problem is clear: swapcontext does not SAVE-RESTORE some registers (R14, RBX) correctly.  The testing code listed below will abort for assert failure:\r\n\r\n\t#define _XOPEN_SOURCE\r\n\t#include <ucontext.h>\r\n\t#include <stdio.h>\r\n\t#include <stdlib.h>\r\n\t#include <assert.h>\r\n\r\n\tstatic ucontext_t uctx_main, uctx_func2;\r\n\r\n\tstatic void func2(void)\r\n\t{\r\n\t\tswapcontext(&uctx_func2, &uctx_main);\r\n\t}\r\n\r\n\r\n\tstatic void func1(void)\r\n\t{\r\n\t#define REG \"r14\"\r\n\t\tlong i;\r\n\t\tasm volatile (\"movq $1234, %%\" REG : :);\r\n\t\tswapcontext(&uctx_main, &uctx_func2);\r\n\t\tasm volatile (\"movq %%\" REG \", %0\" :\"=m\"(i) :);\r\n\r\n\t\t/* assert will fail here */\r\n\t\tassert(i == 1234);\r\n\t}\r\n\r\n\tint main(int argc, char *argv[])\r\n\t{\r\n\t\tchar func2_stack[1024*256];\r\n\r\n\t\tgetcontext(&uctx_func2);\r\n\t\tuctx_func2.uc_stack.ss_sp = func2_stack;\r\n\t\tuctx_func2.uc_stack.ss_size = sizeof(func2_stack);\r\n\t\tuctx_func2.uc_link = NULL;\r\n\t\tmakecontext(&uctx_func2, func2, 1, 0);\r\n\r\n\t\tfunc1();\r\n\t\treturn 0;\r\n\t}\r\n\r\nI debug and analyze the assembly code of swapcontext and I think the bug is found:\r\n1. (00000000000286b2~00000000000286b4) swapcontext save R14 and RBX in its stack-frame (note this should be preserved accross ucontext switch)\r\n2. (00000000000286fb~000000000002870e) setcontext call is *tail-call-optimized* by compiler and the stack-frame-saved-regs is released wrongly\r\n3. (000000000002870e, 00000000000a2867) previous saved R14 and RBX (in step 1) is overwrited by push and call\r\n4. after swapcontext the old ucontext data is already incorrect, so when swapcontext back it get a wrong R14,RBX value and the following code will crash\r\n\r\n\totool -tV /usr/lib/system/libsystem_c.dylib\r\n\r\n\t_swapcontext:\r\n\t00000000000286b2        pushq   %r14\r\n\t00000000000286b4        pushq   %rbx\r\n\t00000000000286b5        subq    $0x08,%rsp\r\n\t00000000000286b9        testq   %rdi,%rdi\r\n\t00000000000286bc        je      0x000286c6\r\n\t00000000000286be        movq    %rsi,%rbx\r\n\t00000000000286c1        testq   %rbx,%rbx\r\n\t00000000000286c4        jne     0x000286d8\r\n\t00000000000286c6        callq   ___error\r\n\t00000000000286cb        movl    $0x00000016,(%rax)\r\n\t00000000000286d1        movl    $0xffffffff,%eax\r\n\t00000000000286d6        jmp     0x000286f3\r\n\t00000000000286d8        movq    %rdi,%r14\r\n\t00000000000286db        andb    $0x7f,0x03(%r14)\r\n\t00000000000286e0        movq    %r14,%rdi\r\n\t00000000000286e3        callq   _getcontext\r\n\t00000000000286e8        testl   %eax,%eax\r\n\t00000000000286ea        jne     0x000286f3\r\n\t00000000000286ec        movl    (%r14),%ecx\r\n\t00000000000286ef        testl   %ecx,%ecx\r\n\t00000000000286f1        jns     0x000286fb\r\n\t00000000000286f3        addq    $0x08,%rsp\r\n\t00000000000286f7        popq    %rbx\r\n\t00000000000286f8        popq    %r14\r\n\t00000000000286fa        ret\r\n\t00000000000286fb        orl     $0x80000000,%ecx\r\n\t0000000000028701        movl    %ecx,(%r14)\r\n\t0000000000028704        movq    %rbx,%rdi\r\n\t0000000000028707        addq    $0x08,%rsp\r\n\t000000000002870b        popq    %rbx\r\n\t000000000002870c        popq    %r14\r\n\t000000000002870e        jmp     _setcontext\r\n\r\n\t_setcontext:\r\n\t00000000000a2855        pushq   %rbx\r\n\t00000000000a2856        leaq    0x38(%rdi),%rbx\r\n\t00000000000a285a        cmpq    0x30(%rdi),%rbx\r\n\t00000000000a285e        je      0x000a2864\r\n\t00000000000a2860        movq    %rbx,0x30(%rdi)\r\n\t00000000000a2864        movl    0x04(%rdi),%edi\r\n\t00000000000a2867        callq   _sigsetmask\r\n\t00000000000a286c        movq    %rbx,%rdi\r\n\t00000000000a286f        popq    %rbx\r\n\t00000000000a2870        jmp     __setcontext\r\n\r\nI think the bug can be fixed by disable tail call optimization (-foptimize-sibling-calls)."
    email: mikewei08@gmail.com
    modified: "2012-10-27T13:37:28.885523Z"
    number: "12581792"
    number_intvalue: 12581792
    originated: 27-Oct-2012 12:06 AM
    parent_number: '&{NULL_VALUE}'
    product: Mac OS X
    product_version: 10.7.5
    reproducible: YES
    resolved: ""
    status: Open
    title: 'swapcontext bug: not preserve R14,RBX correctly'
