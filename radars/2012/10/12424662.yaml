apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "12424662"
    labels:
        datastore_id: "2095402"
data:
    classification: Crash/Hang/Data Loss
    created: "2012-10-03T21:27:40.494962Z"
    description: "Summary:\r\nSometimes, an application will get into a state where sending an Apple event to that application using AESendMessage() will result in the event not being delivered to the target application, and AESendMessage() blocking in the client application until the timeout value is reached, at which time an errAETimeout error is returned. This does not happen if the event is sent specifically to the target applications kernel process ID, only when sending using the app's bundle identifier or creator signature. In Apple event nomenclature, having a target address descriptor with typeKernelProcessID works, but using typeApplicationBundleID does not work.\r\n\r\nSteps to Reproduce:\r\nAttached is a sample project which demonstrates the problem. Unfortunately, I have not been able to come up with a consistent method for getting the system into the state described above. It seems to have something to do with quitting and launching the application one or more times, but beyond that, I don't know what exactly the trigger is. Once you get into this state though, the steps below work to demonstrate the problem.\r\n\r\n1. Build and launch the AppleEventTesting application.\r\n2. In the \"Bundle ID\" text field, enter the bundle identifier of the application to be targeted by the Apple event. iPhoto's bundle identifier is the default, but it can be changed to something else.\r\n3. Open the target application manually using the dock or Finder (the test app doesn't open it automatically, so it must be running first)\r\n4. Click the \"Send Event\" button.\r\n5. After the app becomes responsive again, check the \"Use pid address\" box, then click \"Send Event\" button again\r\n\r\nExpected Results:\r\nThe following text should be output to the text view in the main window:\r\n\r\nSending event with settings: {\r\n    sendAsync = 0;\r\n    useCustomMachPort = 0;\r\n    useGCD = 0;\r\n    usePidAddress = 0;\r\n}\r\nSend: <NSAppleEventDescriptor: 'core'\\'getd'{ '----':'obj '{ 'want':'prop', 'from':null(), 'form':'prop', 'seld':'pnam' } }>\r\nReply: <NSAppleEventDescriptor: 'aevt'\\'ansr'{ '----':'utxt'(\"iPhoto\") }>\r\nSending event with settings: {\r\n    sendAsync = 0;\r\n    useCustomMachPort = 0;\r\n    useGCD = 0;\r\n    usePidAddress = 1;\r\n}\r\nSend: <NSAppleEventDescriptor: 'core'\\'getd'{ '----':'obj '{ 'want':'prop', 'from':null(), 'form':'prop', 'seld':'pnam' } }>\r\nAESendMessage returned 0\r\nReply: <NSAppleEventDescriptor: 'aevt'\\'ansr'{ '----':'utxt'(\"iPhoto\") }>\r\n\r\n\r\nActual Results:\r\nThe first click of the \"Send Event\" button results in a hang until the timeout value of the Apple event is reached (in this project, we set it to 10 seconds). The second click works as expected. The following output is found in the window - note the \"ASendMessage return -1712\" output for the first event.\r\n\r\nSending event with settings: {\r\n    sendAsync = 0;\r\n    useCustomMachPort = 0;\r\n    useGCD = 0;\r\n    usePidAddress = 0;\r\n}\r\nSend: <NSAppleEventDescriptor: 'core'\\'getd'{ '----':'obj '{ 'want':'prop', 'from':null(), 'form':'prop', 'seld':'pnam' } }>\r\nAESendMessage returned -1712\r\nSending event with settings: {\r\n    sendAsync = 0;\r\n    useCustomMachPort = 0;\r\n    useGCD = 0;\r\n    usePidAddress = 1;\r\n}\r\nSend: <NSAppleEventDescriptor: 'core'\\'getd'{ '----':'obj '{ 'want':'prop', 'from':null(), 'form':'prop', 'seld':'pnam' } }>\r\nAESendMessage returned 0\r\nReply: <NSAppleEventDescriptor: 'aevt'\\'ansr'{ '----':'utxt'(\"iPhoto\") }>\r\n\r\nRegression:\r\n- This bug appears to only affect OS X 10.8.2, and I have not had any reports of the same problem on earlier versions.\r\n\r\nNotes:\r\n- The rest of the checkboxes in the sample app can be ignored for the purposes of this bug, they were all other variations I was trying in attempting to reproduce the problem, but in my experience they all give the same results.\r\n- When this behavior does occur, it appears to be specific to just one application on the system. For example, if iPhoto gets in \"the state\" where it doesn't receive events sent via AESendMessage, another application such as iTunes will likely continue to work fine.\r\n- The behavior does not appear to be related to the application _sending_ the event. I get the same behavior from both my own application and the test project, for example.\r\n- While I have only gotten iPhoto in this state, I know at least one other developer has encountered this issue with their own application as the target. They filed this under bug 12396793. In their case, they were using typeSignature instead of typeApplicationBundleID, but otherwise the behavior they described was the same.\r\n- The same behavior occurs in both 32 bit and 64 applications calling AESendMessage\r\n- Quitting and relaunching the target application does not fix the problem. Logging out and back in again will usually clear things up so the target application can again receive Apple events.\r\n- I filed an initial bug on this as number 12372422, before I had been able to reproduce the problem and produce this sample project.\r\n- I suspect this bug may also be related to (now closed) bug 11458937, which I reported during the 10.8 developer preview period, but only dealt with \"quit\" events sent to applications.\r\n- Events sent from a running AppleScript do not appear to suffer from this same problem.\r\n\r\n03-Oct-2012 02:25 PM Brian Webster:\r\n'AppleEventTesting.zip' and 'Mac Pro.spx' were successfully uploaded"
    email: bewebste@gmail.com
    modified: "2012-10-03T21:27:40.495344Z"
    number: "12424662"
    number_intvalue: 12424662
    originated: 03-Oct-2012 02:25 PM
    parent_number: '&{NULL_VALUE}'
    product: OS X
    product_version: OS X 10.8.2/12C54
    reproducible: Sometimes
    resolved: ""
    status: Open
    title: AESendMessage() doesn't deliver event sent to bundle ID address
