apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "12690302"
    labels:
        datastore_id: "2281401"
data:
    classification: Enhancement
    created: "2012-11-13T14:12:40.148994Z"
    description: "In response to Matthew Firlik's message on the developer forums regarding Interface Builder plugins in Xcode 4:\n\n\"Xcode 4.x does not provide public API for extending the IDE's functionality, nor does it have an analog to the Interface Builder 3.x plug-in API. The Interface Builder plug-in API provided a variety of integration points -- adding objects to the library, providing custom inspectors, defining nesting and embedding rules, customizing the document content when objects were added or manipulated, etc.  For those interested in replacement functionality, it would be very useful to have descriptions of your specific interests and use cases:  they are exceptionally valuable as we assess our future plans and consider features and designs to prioritize.\"\n\nI'd like to suggest the following:\n\nIn the header file for a class, you can already tag things with IBOutlet. Let us also tag things with IBProperty, and anything tagged as such displays in the property inspector in Xcode. You could limit it to plist types and it'd still be useful. (Additionally, some form of enum that gave you a popup menu would be really useful.)\n\nThis would have the advantage that you wouldn't need to build a custom IB plugin: the header file alone would do.\n\nI would love it if a similar thing for exposing custom bindings (IBBindableProperty maybe?) could be used. \n\nBoth of these could take additional parameters, such as @property (nonatomic, strong) IBProperty(min=0,max=1) NSNumber *myProperty;."
    email: amorya@gmail.com
    modified: "2012-11-13T14:12:40.149189Z"
    number: "12690302"
    number_intvalue: 12690302
    originated: ""
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Xcode 4.5.1 (4G1004)
    reproducible: Always
    resolved: ""
    status: ""
    title: Interface builder support for custom object properties
