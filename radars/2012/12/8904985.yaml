apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "8904985"
    labels:
        datastore_id: "2402401"
data:
    classification: Other Bug
    created: "2012-12-08T12:29:29.514499Z"
    description: "Summary:\r\n\r\nWhen semop(semid, sops, nsops) is called, and nsops > 5, E2BIG is returned,\r\neven though semopm == 100.\r\n\r\nSteps to Reproduce:\r\n  \r\nCompile & run attached code (semop.c) thus:\r\n########################################\r\n$ c99 -DNSEMS=6 -o semop semop.c\r\n$ ./semop\r\n########################################\r\n\r\nExpected Results:\r\n\r\n1 1 1 1 1 1 \r\n\r\nActual Results:\r\n  \r\n########################################\r\nsh-3.2$ uname -mrsv\r\nDarwin 9.8.0 Darwin Kernel Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009; root:xnu-1228.15.4~1/RELEASE_I386 i386\r\nsh-3.2$ ipcs -T\r\nIPC status from <running system> as of Sun Jan 23 12:48:14 CST 2011\r\nmsginfo:\r\n\tmsgmax:  16384\t(max characters in a message)\r\n\tmsgmni:     40\t(# of message queues)\r\n\tmsgmnb:   2048\t(max characters in a message queue)\r\n\tmsgtql:     40\t(max # of messages in system)\r\n\tmsgssz:      8\t(size of a message segment)\r\n\tmsgseg:   2048\t(# of message segments in system)\r\n\r\nshminfo:\r\n\tshmmax: 4194304\t(max shared memory segment size)\r\n\tshmmin:       1\t(min shared memory segment size)\r\n\tshmmni:      32\t(max number of shared memory identifiers)\r\n\tshmseg:       8\t(max shared memory segments per process)\r\n\tshmall:    1024\t(max amount of shared memory in pages)\r\n\r\nseminfo:\r\n\tsemmap:     30\t(# of entries in semaphore map)\r\n\tsemmni:      8\t(# of semaphore identifiers)\r\n\tsemmns:  87381\t(# of semaphores in system)\r\n\tsemmnu:     32\t(# of undo structures in system)\r\n\tsemmsl:  87381\t(max # of semaphores per id)\r\n\tsemopm:    100\t(max # of operations per semop call)\r\n\tsemume:     10\t(max # of undo entries per process)\r\n\tsemusz:     16\t(size in bytes of undo structure)\r\n\tsemvmx:  32767\t(semaphore maximum value)\r\n\tsemaem:  16384\t(adjust on exit max value)\r\n\r\nsh-3.2$ ipcs -s\r\nIPC status from <running system> as of Sun Jan 23 12:48:16 CST 2011\r\nT     ID     KEY        MODE       OWNER    GROUP\r\nSemaphores:\r\n\r\nsh-3.2$ c99 -DNSEMS=6 -o semop semop.c\r\nsh-3.2$ ./semop\r\nsemop: Argument list too long\r\nsh-3.2$ c99 -DNSEMS=5 -o semop semop.c\r\nsh-3.2$ ./semop\r\n1 1 1 1 1 \r\n########################################\r\n\r\nRegression:\r\n\r\nNotes:\r\n\r\nI tested this on OS X 10.6.4 client as well, and got the same result.\r\n\r\nAttachment:\r\n========================================\r\n/* semop.c */\r\n#define _XOPEN_SOURCE 600\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <sys/sem.h>\r\n#include <sys/stat.h>\r\n\r\n//#define NSEMS\r\n\r\nint main(void) {\r\n    //****************************************\r\n    // create semaphore set\r\n    //****************************************\r\n    int semid;\r\n    if ((semid = semget(IPC_PRIVATE, NSEMS, IPC_CREAT|S_IRUSR|S_IWUSR)) == -1) {\r\n        perror(\"semget\");\r\n        exit(EXIT_FAILURE);\r\n    }\r\n\r\n    //****************************************\r\n    // initialize all semaphores to 0\r\n    //****************************************\r\n    union semun {\r\n        int val;\r\n        struct semid_ds *buf;\r\n        unsigned short  *array;\r\n    } arg;\r\n\r\n    unsigned short array[NSEMS] = {0};\r\n    arg.array = array;\r\n    if (semctl(semid, 0, SETALL, arg) == -1) {\r\n        perror(\"semctl SETVAL\");\r\n        exit(EXIT_FAILURE);\r\n    }\r\n\r\n    //****************************************\r\n    // increment each semaphore by 1\r\n    //****************************************\r\n    struct sembuf sops[NSEMS];\r\n    for (unsigned short sem_num = 0; sem_num < NSEMS; sem_num++) {\r\n        sops[sem_num].sem_num = sem_num;\r\n        sops[sem_num].sem_op = 1;\r\n        sops[sem_num].sem_flg = 0;\r\n    }\r\n\r\n    if (semop(semid, sops, (size_t)NSEMS) == -1) {\r\n        perror(\"semop\");\r\n        exit(EXIT_FAILURE);\r\n    }\r\n\r\n\r\n    //****************************************\r\n    // get semaphore values\r\n    //****************************************\r\n    if (semctl(semid, 0, GETALL, arg) == -1) {\r\n        perror(\"semctl GETALL\");\r\n        exit(EXIT_FAILURE);\r\n    }\r\n\r\n    for (unsigned short sem_num = 0; sem_num < NSEMS; sem_num++)\r\n        printf(\"%d \", arg.array[sem_num]);\r\n\r\n    printf(\"\\n\");\r\n\r\n    return 0;\r\n}\r\n========================================\r\n\r\n-- \r\nNathan Weeks\r\nSystems Analyst\r\nIowa State University -- IT Services (HPC Group)\r\nhttp://weeks.public.iastate.edu/"
    email: weeks@iastate.edu
    modified: "2012-12-08T12:29:29.514668Z"
    number: "8904985"
    number_intvalue: 8904985
    originated: 23-Jan-2011 01:17 PM
    parent_number: '&{NULL_VALUE}'
    product: Mac OS X
    product_version: 10.5.8
    reproducible: Always
    resolved: 26-Jul-2012 04:19 PM
    status: Closed
    title: semop() with nsops > 5 returns E2BIG
