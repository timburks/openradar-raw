apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "12342164"
    labels:
        datastore_id: "2018401"
data:
    classification: Performance
    created: "2012-09-20T23:55:29.064612Z"
    description: "Summary:\r\n\r\nThe foo for a Power Box sheet remains in the responder chain during toolbar re-validation after the user clicks a button to dismiss the sheet. During this time, calls to -[NSResponder supplementalTargetForAction] on the NSLocalWindowWrappingRemoteWindow instance which encapsulates the sheet result in dispatch_semaphore_wait time-outs.\r\n\r\nSteps to Reproduce:\r\n\r\nBuild and run the attached sample project on 10.8 using Xcode 4.5. Click the button in the window. (Now would be a good time to clear your debug console.) Now click the Cancel button in the open sheet.\r\n\r\nNotice in the console that calls to supplementalTargetForAction on NSLocalWindowWrappingRemoteWindow take about 300 ms to return. Even though the sheet dismisses, notice that the window's UI remains unresponsive---the window close button is even grayed out---until after all toolbar buttons have been validated.\r\n\r\nTurn off logging of supplementalTargetForAction using the checkbox and repeat the experiment. Notice that the window becomes response much more quickly (though still much slower than when sandboxing is disabled).\r\n\r\nExpected Results:\r\n\r\n-[NSLocalWindowWrappingRemoteWindow supplementalTargetForAction] should return nil immediately if Power Box isn't able to respond, or else NSLocalWindowWrappingRemoteWindow should be removed as key window before revalidating the toolbar.\r\n\r\nActual Results:\r\n\r\n-[NSLocalWindowWrappingRemoteWindow supplementalTargetForAction] times out for every call between dismissing the sheet and the instances eventually removal as the key window.\r\n\r\nRegression:\r\n\r\nYes. The problem exists on 10.8.2. The problem does NOT exist on 10.7.5.\r\n\r\nNotes:\r\n\r\nWe're hitting a nasty interaction of Power Box and -supplementalTargetForAction. The problem appears as a four second blocking of our UI after closing an NSOpenPanel sheet.\r\n\r\nAppKit uses the private class NSLocalWindowWrappingRemoteWindow to shove the open sheet into our window but redirect to Power Box for the internals. \r\n\r\nWhen the user clicks cancel or open in the open sheet, the sheet loses key, and AppKit revalidates all the toolbar items. The NSLocalWindowWrappingRemoteWindow instance is still in the responder chain at this point. \r\n\r\nWe're using a custom target-selection mechanism, called OATargetSelection. OATargetSelection is triggered by an override of -[NSApplication targetForAction:to:from:]. That mechanism traverses the responder chain from the first responder of the key window and the main window. It also checks things like delegates, window controllers, and---crucially---supplementalTargetForAction.\r\n\r\nOATargetSelection calls supplementalTargetForAction on the NSLocalWindowWrappingRemoteWindow instance. NSLocalWindowWrappingRemoteWindow's supplementalTargetForAction dispatches to the Power Box instance, which doesn't respond. It's busy going away. The IPC call times out in 300 ms, supplementalTargetForAction returns nil, and we merrily chase the rest of the responder chain.\r\n\r\nDebugging shows that the time out occurs in _dispatch_semaphore_wait_slow, which is tail-called by dispatch_semaphore_wait. The time-out argument to dispatch_semaphore_wait is generated by a call to dispatch_time with a time-out offset of 300,000,000 nanoseconds. That matches the 300 ms delay we observe. Further the return code of _dispatch_semaphore_wait_slow is 49, indicating a time-out.\r\n\r\nThis time-out delay happens for every validation. After the four seconds that this consumes, the sheet finally leaves the responder chain, our completion handler for the open sheet is called, and the UI becomes responsive again.\r\n\r\nThe delay goes away if we don't call supplementalTargetForAction, but we know of no way to do that only during the sheet closing process. We must call it during regular display of the sheet so that things like edit menu items are validated correctly.\r\n\r\nThe delay also goes away if we turn off sandboxing, but we are working hard to support sandboxing for new versions of our applications.\r\n\r\nAttempted work-arounds and their failures:\r\n\r\n- We attempted to register for NSWindowDidEndSheetNotification. Debugging indicates that this notification is posted to the notification center before the problemantic toolbar validation; however, it isn't propagated until _after_ the validation and corresponding time outs.\r\n\r\n- We attempted to use -[NSApplication endSheet:returnCode:], but that isn't called until after a second round of toolbar validation that comes after the NSWindowDidEndSheetNotification."
    email: curtis.clifton@gmail.com
    modified: "2012-09-20T23:55:29.065294Z"
    number: "12342164"
    number_intvalue: 12342164
    originated: "2012-09-20"
    parent_number: '&{NULL_VALUE}'
    product: Mac OS X
    product_version: 10.8.2
    reproducible: Always
    resolved: ""
    status: Open
    title: supplementalTargetForAction times out during Power Box sheet close
