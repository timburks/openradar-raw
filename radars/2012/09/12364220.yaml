apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "12364220"
    labels:
        datastore_id: "2038402"
data:
    classification: UI/Usability
    created: "2012-09-25T01:50:21.083999Z"
    description: "Summary:\r\nAfter applying a CATransform3D to a layer to rotate its view, other views render in incorrect hierarchical order: a subview A that is hierarchically below a subview B renders on top of A. Bug occurs when run on iOS 6 only.\r\n\r\nSteps to Reproduce:\r\nPlease see the example project, which was built specifically to isolate this bug. Run it and follow the instructions. You will immediately see the bug.\r\n\r\nThe sample project causes the bug to occur by the following coding steps:\r\n1. Create a partially transparent view and add it to the main view (ex self.bunny)\r\n2. Create a \"hidden\" view, which will only be shown after the animation is complete. This view will be \"revealed\" by the rotation animation. Make the view hidden. Add it to the main view. (ex self.hiddenView)\r\n3. Create the view that will rotate. Add it to the main view (ex self.rotationView)\r\n4. Create a CATransform3D with perspective, which rotates on the y-axix.\r\n5. Perform the animation: unhide the hidden view from 2, and animate the view from 3 using the CATransform3D from 4.\r\n6. Run the code on an iOS 6 device or simulator (I'm using iOS Simulator 6.0 (358.4)).\r\n\r\nExpected Results:\r\nThe hidden view from 2 should be fully visible, with nothing else rendered on top of it.\r\n\r\nThis is because the rotation view rotated away from the hidden view, and the hidden view is hierarchically on top of the transparent view from 1, \r\n\r\nActual Results:\r\nThe hidden view from 2 is partially visible, but it's obscured by the partially transparent view from 1.\r\n\r\nRegression:\r\nThis works fine when run on iOS 5 devices or simulator: this behaviour was introduced in iOS 6.\r\n\r\nNotes:\r\n1. There is a work-around: if you set zPositions on the incorrectly rendered layers, in increasing order of height in the view hierarchy, rendering is correct.\r\n\r\n2. If you were to add a control to the hidden view (such as a button), you would see that touch events are correctly handled: the hidden view receives touch events, even though the transparent view is rendered on top.\r\n\r\n3. Attached is a simple sample project showing the bug, and showing the work-around. Try running it on iOS 5 to see correct behaviour. Also attached is screenshots showing the view before and after animating."
    email: michelle@xtremelabs.com
    modified: "2012-09-25T01:50:21.084414Z"
    number: "12364220"
    number_intvalue: 12364220
    originated: 24-Sep-2012 09:43 PM
    parent_number: '&{NULL_VALUE}'
    product: iPhone SDK
    product_version: iOS 6 Simulator and Device
    reproducible: 100%
    resolved: ""
    status: open
    title: iOS 6 3D-rotation causes layers to render without respect for view hierarchy
