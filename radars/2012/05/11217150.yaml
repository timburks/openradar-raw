apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "11217150"
    labels:
        datastore_id: "1722403"
data:
    classification: deadlock/crash
    created: "2012-05-15T09:53:45.752691Z"
    description: "10-Apr-2012 10:57 AM Zeno Albisser:\r\nSummary:\r\nThe cxa_guards used to protect static initialization cause a deadlock, when a static initialization depends on another one. It seems that the cxa_guards are implemented using a single mutex for the whole application. This seems rather harmful. Instead there should be a mutex per initialization.\r\nThis bug especially affects the Qt open source project. Because static initialization is used in several places there.\r\n\r\nSteps to Reproduce:\r\n- Compile the attached code using g++ or clang++:\r\n$ g++ cxabug.cpp\r\n- Run the created binary:\r\n$ ./a.out\r\n\r\nExpected Results (when compiled on linux): \r\nCreating FirstStatic... waiting for the semaphore.\r\nSecondStatic created... unlocking the semaphore.\r\nThis is local static #2\r\nThis is local static #1\r\n\r\nActual Results (when compiled on mac):\r\nCreating FirstStatic... waiting for the semaphore.\r\n\r\nRegression:\r\nI think this problem persists with all available compiler versions on mac os x.\r\n\r\n\r\n10-Apr-2012 10:58 AM Zeno Albisser:\r\n'cxabug.cpp' and 'deadlock.log' were successfully uploaded"
    email: zeno.albisser@gmail.com
    modified: "2012-05-15T09:53:45.752845Z"
    number: "11217150"
    number_intvalue: 11217150
    originated: 10-Apr-2012
    parent_number: '&{NULL_VALUE}'
    product: clang++/g++-llvm
    product_version: 3.1 tags/Apple/clang-318.0.58
    reproducible: always
    resolved: ""
    status: Open
    title: cxa_guards cause deadlock in static initialization.
