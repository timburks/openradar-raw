apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "11605841"
    labels:
        datastore_id: "1751404"
data:
    classification: Enhancement
    created: "2012-06-06T14:57:27.258567Z"
    description: "There are times when I want to make little data structure objects (often for intermediate use) to hold some kind of state or whatnot. Often I end up just using a dictionary - and while there's nothing terribly wrong with that, it's sometimes annoying to give up the type-checking, auto-completion, and other benefits of a real object with real properties. I'm wondering if there could be a middle ground that isn't so syntactically heavy as a \"real\" class but still gets the job done.\r\n\r\nMy suggestion is a simple syntactic sugar for creating property-only classes modeled a bit after C's structs. Here's a short example using the current syntax (with ARC) vs. my proposed @record syntax to accomplish the same thing more compactly:\r\n\r\n\r\n@interface RangeRect : NSObject\r\n@property (assign) CGRect rect;\r\n@property (assign) NSRange range;\r\n@property (copy) NSString *text;\r\n@end\r\n\r\n@implementation RangeRect\r\n@synthesize rect, range, text;\r\n@end\r\n\r\n\r\n\r\n@record RangeRect : NSObject\r\n    (assign) CGRect rect;\r\n    (assign) NSRange range;\r\n    (copy)   NSString *text;\r\n@end\r\n\r\nI think this would make the task of using small, internal data structures in Objective-C a bit nicer. @record would just create a normal class internally, so nothing too deep would be expected to change - this would just primarily be sugar. Although I could imagine expanding on this so that the scope of the generated classes could somehow be controlled so you could, for example, define a named @record in one implementation and in another implementation, you could define a different @record with the same name that's only used internally without them conflicting."
    email: bigzaphod@gmail.com
    modified: "2012-06-06T14:57:27.258716Z"
    number: "11605841"
    number_intvalue: 11605841
    originated: June 6, 2012
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Open
    title: Syntax for simple Objective-C data structures
