apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "12194503"
    labels:
        datastore_id: "1899401"
data:
    classification: Serious Bug
    created: "2012-08-29T02:48:35.284215Z"
    description: "Summary: If the right hand side of an IN predicate contains managed objects of different entities collected via -objectWithID: from an array of NSManagedObjectIDs collected via another fetch request and then calling -valueForKeyPath:@\"relationship.objectID\" on the results , the NSManagedObjectContext will, on calling -executeFetchRequest:error:, return objects that are not in the RHS if they have the same primary key [PK] (last path component of the NSManagedObjectID URI) as a managed object of a different entity which *is* in the RHS.  \r\n\r\nSteps to Reproduce:\r\nSee the attached sample project that demonstrates this bug.\r\n\r\nExpected Results: See log output - there should be no results. More generally, fetch request results with an IN predicate should always be limited to the contents of the RHS of that predicate \r\n\r\nActual Results: See log output - there are 10*n results (where n is the number of times the program has been run since reseting the simulator). More generally, they are not. \r\n\r\nRegression: Unknown. \r\n\r\nNotes: Ignore CDRSearchOperation. I originally thought the minimum reproduction step required getting the objectIDs from another thread, but it doesn't. \r\n\r\nRelevant code, since Open Radar doesn't accept attachments (I'll upload to Dropbox later):\r\n\r\nin -applicationDidFinishLaunching:\r\n\r\n    NSMutableArray *array = [[NSMutableArray alloc] initWithCapacity:40];\r\n    for (int i = 0; i < 10; i++)\r\n    {\r\n        Foo *foo = [NSEntityDescription insertNewObjectForEntityForName:@\"Foo\" inManagedObjectContext:[self managedObjectContext]];\r\n        foo.name = @\"Hello\";\r\n        Keyword *fooword = [NSEntityDescription insertNewObjectForEntityForName:@\"Keyword\" inManagedObjectContext:[self managedObjectContext]];\r\n        fooword.keyword = foo.name;\r\n        fooword.foo = foo;\r\n        [array addObject:foo];\r\n        \r\n        Bar *bar = [NSEntityDescription insertNewObjectForEntityForName:@\"Bar\" inManagedObjectContext:[self managedObjectContext]];\r\n        bar.name = @\"goodbye\";\r\n        Keyword *barword = [NSEntityDescription insertNewObjectForEntityForName:@\"Keyword\" inManagedObjectContext:[self managedObjectContext]];\r\n        barword.keyword = bar.name;\r\n        barword.bar = bar;\r\n        [array addObject:bar];\r\n        \r\n        Baz *baz = [NSEntityDescription insertNewObjectForEntityForName:@\"Baz\" inManagedObjectContext:[self managedObjectContext]];\r\n        baz.name = @\"You say\";\r\n        Keyword *bazword = [NSEntityDescription insertNewObjectForEntityForName:@\"Keyword\" inManagedObjectContext:[self managedObjectContext]];\r\n        bazword.keyword = @\"You\";\r\n        bazword.baz = baz;\r\n        Keyword *bazword2 = [NSEntityDescription insertNewObjectForEntityForName:@\"Keyword\" inManagedObjectContext:[self managedObjectContext]];\r\n        bazword2.keyword = @\"Say\";\r\n        bazword2.baz = baz;\r\n        [array addObject:baz];\r\n        \r\n        Qux *qux = [NSEntityDescription insertNewObjectForEntityForName:@\"Qux\" inManagedObjectContext:[self managedObjectContext]];\r\n        qux.name = @\"I say\";\r\n        Keyword *quxword = [NSEntityDescription insertNewObjectForEntityForName:@\"Keyword\" inManagedObjectContext:[self managedObjectContext]];\r\n        quxword.keyword = @\"I\";\r\n        quxword.qux = qux;\r\n        Keyword *quxword2 = [NSEntityDescription insertNewObjectForEntityForName:@\"Keyword\" inManagedObjectContext:[self managedObjectContext]];\r\n        quxword2.keyword = @\"Say\";\r\n        quxword2.qux = qux;\r\n        [array addObject:qux];\r\n\r\n    }\r\n    [[self managedObjectContext] save:nil];\r\n\r\n    //Uncomment this to see what happens normally\r\n    \r\n//    NSFetchRequest *fooRequest = [[NSFetchRequest alloc] initWithEntityName:@\"Foo\"];\r\n//    NSFetchRequest *barRequest = [[NSFetchRequest alloc] initWithEntityName:@\"Bar\"];\r\n//    NSFetchRequest *bazRequest = [[NSFetchRequest alloc] initWithEntityName:@\"Baz\"];\r\n//    NSFetchRequest *quxRequest = [[NSFetchRequest alloc] initWithEntityName:@\"Qux\"];\r\n//    NSMutableArray *oids = [[NSMutableArray alloc] init];\r\n//    [oids addObjectsFromArray:[[[self managedObjectContext] executeFetchRequest:fooRequest error:nil] valueForKey:@\"objectID\"]];\r\n//    [oids addObjectsFromArray:[[[self managedObjectContext] executeFetchRequest:barRequest error:nil] valueForKey:@\"objectID\"]];\r\n//    [oids addObjectsFromArray:[[[self managedObjectContext] executeFetchRequest:bazRequest error:nil] valueForKey:@\"objectID\"]];\r\n//    [oids addObjectsFromArray:[[[self managedObjectContext] executeFetchRequest:quxRequest error:nil] valueForKey:@\"objectID\"]];\r\n//    NSMutableArray *good = [[NSMutableArray alloc] initWithCapacity:[oids count]];\r\n//    for (NSManagedObjectID *oid in oids)\r\n//    {\r\n//        [good addObject:[[self managedObjectContext] objectWithID:oid]];\r\n//    }\r\n//    NSLog(@\"the array of NSMOIDs: %@\", good);\r\n//    NSFetchRequest *request = [[NSFetchRequest alloc] initWithEntityName:@\"Foo\"];\r\n//    request.predicate = [NSPredicate predicateWithFormat:@\"self IN %@\", good];\r\n//    NSArray *results = [[self managedObjectContext] executeFetchRequest:request error:nil];\r\n//    NSLog(@\"Expected: %@\\n\\n Actual: %@\", [good filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@\"entity = %@\", [NSEntityDescription entityForName:@\"Foo\" inManagedObjectContext:[self managedObjectContext]]]], results);\r\n    \r\n    \r\n    NSFetchRequest *request = [[NSFetchRequest alloc] initWithEntityName:@\"Keyword\"];\r\n    request.predicate = [NSComparisonPredicate predicateWithLeftExpression:[NSExpression expressionForKeyPath:@\"keyword\"]\r\n                                                           rightExpression:[NSExpression expressionForConstantValue:@\"Say\"] \r\n                                                                  modifier:NSDirectPredicateModifier \r\n                                                                      type:NSContainsPredicateOperatorType\r\n                                                                   options:NSCaseInsensitivePredicateOption];\r\n    NSArray *results = [[self managedObjectContext] executeFetchRequest:request error:nil];\r\n    NSMutableSet *resultSet = [NSMutableSet set];\r\n    [resultSet addObjectsFromArray:[results valueForKeyPath:@\"foo.objectID\"]];\r\n    [resultSet addObjectsFromArray:[results valueForKeyPath:@\"bar.objectID\"]];\r\n    [resultSet addObjectsFromArray:[results valueForKeyPath:@\"baz.objectID\"]];\r\n    [resultSet addObjectsFromArray:[results valueForKeyPath:@\"qux.objectID\"]];\r\n    [resultSet removeObject:[NSNull null]];\r\n    [self searchOperation:nil didReturnResults:[resultSet allObjects]];\r\n    ...\r\n}\r\n\r\n\r\n- (void)searchOperation:(id)op didReturnResults:(NSArray *)results\r\n{\r\n    NSFetchRequest *expReq = [[NSFetchRequest alloc] initWithEntityName:@\"Foo\"];\r\n    expReq.predicate = [NSComparisonPredicate predicateWithLeftExpression:[NSExpression expressionForKeyPath:@\"keywords.keyword\"] \r\n                                                          rightExpression:[NSExpression expressionForConstantValue:@\"Say\"]\r\n                                                                 modifier:NSAnyPredicateModifier \r\n                                                                     type:NSContainsPredicateOperatorType \r\n                                                                  options:NSCaseInsensitivePredicateOption];\r\n    NSArray *expLoggit = [[self managedObjectContext] executeFetchRequest:expReq error:nil];\r\n    NSLog(@\"Expected Results (should be empty, becuase the only keywords that have \\\"foo\\\"s have \\\"Hello\\\" as a keyword: %@\", expLoggit);\r\n\r\n    \r\n    NSMutableArray *array = [[NSMutableArray alloc] initWithCapacity:[results count]];\r\n    for (NSManagedObjectID *oid in results)\r\n    {\r\n        [array addObject:[[self managedObjectContext] objectWithID:oid]];\r\n    }\r\n    NSFetchRequest *request = [[NSFetchRequest alloc] initWithEntityName:@\"Foo\"];\r\n    request.predicate = [NSPredicate predicateWithFormat:@\"self IN %@\", array];\r\n    NSArray *loggit = [[self managedObjectContext] executeFetchRequest:request error:nil];\r\n    NSLog(@\"Actual Results:%@\", loggit);\r\n}"
    email: chaos42@gmail.com
    modified: "2012-08-29T02:48:35.284485Z"
    number: "12194503"
    number_intvalue: 12194503
    originated: 28-Aug-2012 07:42 PM
    parent_number: '&{NULL_VALUE}'
    product: iPhone SDK
    product_version: "5.1"
    reproducible: Always
    resolved: ""
    status: Open
    title: 'CoreData returns objects not in RHS of IN pred if from IDs from valueForKeyPath:'
