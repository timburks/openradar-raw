apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "10993287"
    labels:
        datastore_id: "1580401"
data:
    classification: ""
    created: "2012-03-06T16:37:08.897774Z"
    description: "06-Mar-2012 11:35 AM Rob Napier:\r\nSummary:\r\n\r\nAdding an explicit file path to the \"Link Binary With Libraries\" step throws away the path given and uses the library search algorithm to find the library. This can lead to very surprising mis-links\r\n\r\nSteps to Reproduce:\r\n\r\n* In \"Link Binary With Libraries,\" drag a library into the build phase (or use \"Add Other\"). For example projdir/lib/libfoo.a.\r\n* Build\r\n* Note link line:\r\n   ... clang ... -L/full/path/to/projdir/lib ... -lfoo ...\r\n\r\nExpected Results:\r\n\r\n   ... clang ... relative/path/to/projdir/lib/foo.a ...\r\n\r\nActual Results:\r\n\r\nRegression:\r\n\r\nNo\r\n\r\nNotes:\r\n\r\nLinking this way breaks several things:\r\n\r\n* If you link a static library that matches the name of a dynamic library anywhere in the system, then you'll link against the dynamic library.\r\n\r\n* If you link a library that matches the name of a library earlier in the search path, then you'll link against the wrong library.\r\n\r\n* If you remove a link library, Xcode doesn't remove the -L parameter\r\n\r\n* The paths are generally absolute, which makes it difficult to share or move the project.\r\n\r\nIn all cases, looking at the Xcode settings is extremely misleading because it does not match what is actually linked."
    email: robnapier@gmail.com
    modified: "2012-03-06T16:37:08.898168Z"
    number: "10993287"
    number_intvalue: 10993287
    originated: 3/6/2012
    parent_number: '&{NULL_VALUE}'
    product: Xcode
    product_version: "4.3"
    reproducible: ""
    resolved: ""
    status: Open
    title: Xcode incorrectly searches for libraries
