apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "4027633"
    labels:
        datastore_id: "1565411"
data:
    classification: ""
    created: "2012-03-02T08:09:53.296457Z"
    description: "28-Feb-2005 09:21 AM Timothy Wood:\r\nI thought I logged this before, but now I can't find it...\r\n\r\nUTI needs some way to match against streams of XML.  Right now, UTI is more file based (extension, FCC, mime-type) than content based (DTD, XML Schema, byte sniffing).\r\n\r\nUTI really needs to have capabilities in the later arena.  For example, OmniOutliner 3 has the ability to extend the file types it can load based on XSL plugins.  We'd like to switch to UTI in our plugin system, but UTI has no way of saying \"this is an XML file that conforms to FooBar XML Schema/DTD\".  Also, OmniWeb could use this for things like JPEG/PNG/GIF detection (we have to do this pretty often since users pretty frequently put one type of image data on their web server with a different extension).\r\n\r\n\r\n\r\n'10.4 8A369 PB17.spx' was successfully uploaded\r\n\r\n11-Mar-2005 11:46 AM Timothy Wood:\r\n>This is a follow-up to Bug ID# 4027633. Our engineering team has\r\n>requested some additional information, which is necessary to investigate\r\n>this report:\r\n>\r\n>Any UTI may be declared as conforming to \"public.xml\". Is it the \"sniffing\"\r\n>data identification feature you're specifically requesting?\r\n\r\n\r\nLet me rephrase.  public.xml isn't a very _useful_ thing for a UTI to conform to.  Obviously there are some generic XML processing tools, and those should be able open documents conforming to public.xml, but while public.xml is a necessary feature, it isn't sufficient.\r\n\r\nConsider the case of the sdef file format and the plist file format.  Both of these are \"XML\", but Property List Editor cannot meaningfully read/write .sdef files, nor can Script Editor read/write property lists.  Thus, public.xml isn't a \"file format\", it is a archiving mechanism.\r\n\r\nSo, we need the ability to define a UTI like:\r\n\r\n\r\n    conforms-to: public.xml\r\n    root-element: outline\r\n    root-element-namespace: http://www.omnigroup.com/namespace/OmniOutliner/v3\r\n    extension: oo3\r\n\r\nIn the case above, there is a file extension specified which lets you take the easy way out, but if a root-element or root-element-namespace were defined for a UTI, you really need to scan the contents of the file to determine if it really matches the UTI.\r\n\r\nThe real problem becomes apparent when people start writing files w/o a meaningful extension -- they may just use \".xml\" as the extension.  If there are two .xml files to be identified with UTI, you need to look *inside* them to determine what kind of data is in them.\r\n\r\nThink of it this way -- XML can be a self identifying file format via the root element & namespace mechanism.  The file extension is redundant and prone to error.\r\n\r\n\r\nThe issue of byte sniffing is a different angle on the same issue.  Byte sniffing is needed for off-the wire data like images from web servers where users routinely name their files with the wrong extension.  Byte sniffing also applies to XML files, of course, since they have a required lead in sequence (more complicated due to string encodings and white space, but still...)"
    email: twiomood@gmail.com
    modified: "2012-03-02T08:09:53.296801Z"
    number: "4027633"
    number_intvalue: 4027633
    originated: 28-Feb-2005 09:21 AM
    parent_number: '&{NULL_VALUE}'
    product: ""
    product_version: ""
    reproducible: ""
    resolved: ""
    status: Open
    title: UTI has no mechanism for dealing with XML DTD or Schema
