apiVersion: openapi/v1alpha1
kind: Radar
metadata:
    name: "11951049"
    labels:
        datastore_id: "1846401"
data:
    classification: Other Bug
    created: "2012-07-25T01:14:39.377147Z"
    description: "24-Jul-2012 09:12 PM Aaron KRAMER:\r\nSummary:\r\n\r\n    When assigning a retained object to a weak reference, the `arc-unsafe-retained-assign` warning is thrown, because the object will be released immediately after assignment. But if you assign this retained object to a weak reference *and* a normal reference in the same statement, the warning is stil thrown, even though the object will not be released immediately after assignment.\r\n\r\nSteps to Reproduce:\r\n\r\n    Compile the following code with Clang with -fobjc-arc set:\r\n\r\n        __weak NSObject *weakRef;\r\n        NSObject *normalRef;\r\n        normalRef = weakRef = [[NSObject alloc] init];\r\n\r\nExpected Results:\r\n\r\n    The code should compile with no warning.\r\n\r\nActual Results:\r\n\r\n    The following warning is printed:\r\n        warning: assigning retained object to weak variable; object will be released after assignment [-Warc-unsafe-retained-assign]\r\n            normalRef = weakRef = [[NSObject alloc] init];\r\n                                ^ ~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nRegression:\r\n\r\n    The problem does not occur if the normal reference is assigned first, i.e.:\r\n\r\n        weakRef = normalRef = [[NSObject alloc] init];"
    email: ckrames1234@gmail.com
    modified: "2012-07-25T01:14:39.377385Z"
    number: "11951049"
    number_intvalue: 11951049
    originated: 24-Jul-2012 09:12 PM
    parent_number: '&{NULL_VALUE}'
    product: Developer Tools
    product_version: Apple clang version 4.0 (tags/Apple/clang-421.10.53) (based on LLVM 3.1svn)
    reproducible: Always
    resolved: ""
    status: Open
    title: Assigning retained object to both weak reference and regular reference warns you
